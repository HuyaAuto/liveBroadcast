!function(e) {
  function t(s) {
      if (i[s])
          return i[s].exports;
      var a = i[s] = {
          i: s,
          l: !1,
          exports: {}
      };
      return e[s].call(a.exports, a, a.exports, t),
      a.l = !0,
      a.exports
  }
  var i = {};
  t.m = e,
  t.c = i,
  t.d = function(e, i, s) {
      t.o(e, i) || Object.defineProperty(e, i, {
          configurable: !1,
          enumerable: !0,
          get: s
      })
  }
  ,
  t.n = function(e) {
      var i = e && e.__esModule ? function() {
          return e.default
      }
      : function() {
          return e
      }
      ;
      return t.d(i, "a", i),
      i
  }
  ,
  t.o = function(e, t) {
      return Object.prototype.hasOwnProperty.call(e, t)
  }
  ,
  t.p = "",
  t(t.s = 5)
}([function(e, t, i) {
  "use strict";
  function s(e) {
      return e && e.__esModule ? e : {
          default: e
      }
  }
  Object.defineProperty(t, "__esModule", {
      value: !0
  });
  var a = i(1)
    , n = (s(a),
  i(2))
    , r = s(n)
    , o = i(3)
    , u = s(o)
    , l = i(4)
    , d = s(l)
    , h = {
      ENV: null,
      vplayer: null,
      vplayerUI: null,
      logUtils: d.default,
      Event: u.default,
      menuItems: [],
      menuData: [[{
          text: "虎牙直播(H5)_1909271625"
      }], [], [{
          text: "查看视频信息",
          func: function() {
              u.default.fireEvent(u.default.SHOW_VIDEO_INFO)
          }
      }, {
          text: "视频问题反馈",
          func: function() {
              h.vplayerUI.showFeedback()
          }
      }, {
          text: "海量弹幕",
          func: function() {
              u.default.fireEvent(u.default.CHAT_MODE_CHANGE)
          }
      }]],
      streamSetFlag: !1
  };
  t.default = h,
  h.beginTime = Date.now(),
  h.serverTimeGap = 0,
  h.getServerTime = function() {
      return Date.now() + h.serverTimeGap
  }
  ,
  h.yyuid = parseInt(r.default.getCookie("yyuid")) || parseInt(r.default.getCookie("udb_uid")) || 0,
  h.isLogin = h.yyuid > 0,
  h.appid = 0,
  h.topsid = 0,
  h.subsid = 0,
  h.videoLine = -1,
  h.flv = "",
  h.flacFlv = "",
  h.livingInfoRecorded = null,
  h.wsurl = "",
  h.wsconnected = !1,
  h.reConnectTimes = 0,
  h.wsIps = [],
  h.httpWs = [],
  h.badWsIps = [],
  h.badCode = [],
  h.badReason = "",
  h.loginRegister = !1,
  h.userIn = !1,
  h.wsConnectTime = 0,
  h.loginRegisterTime = 0,
  h.userInTime = 0,
  h.livingInfoTime = 0,
  h.firstVideoTime = 0,
  h.userId = null,
  h.presenterUid = 0,
  h.hasVideo = !1,
  h.isPlaying = !1,
  h.isPause = !1,
  h.isServPlaying = !1,
  h.isUIPause = !1,
  h.enforceLowestBitRate = !1,
  h.is360Video = !1,
  h.is360LibLoaded = !1,
  h.lLiveCompatibleFlag = 0,
  h.isVideoMaster = function() {
      return "" != h.yyuid && 0 != h.yyuid && 0 != h.presenterUid && h.yyuid == h.presenterUid
  }
  ,
  h.nobleInfo = null,
  h.livingInfo = null,
  h.streamInfo = null,
  h.isH265 = !1,
  h.SrcBitRate = 0,
  h.line0BitRateList = {},
  h.curBitRate = 0,
  h.getCurBitRate = function() {
      return h.curBitRate
  }
  ,
  h.getTrueBitRate = function() {
      var e = h.getCurBitRate();
      return 0 == e && (e = h.SrcBitRate),
      e
  }
  ,
  h.bitRateList0 = [],
  h.bitRateList1 = [],
  h.isLine0Inited = !1,
  h.getBitRateList = function() {
      return h.bitRateList1
  }
  ,
  h.BitRate = [500, 800, 1e3, 1200, 1500, 2e3, 2500, 3e3, 3500, 4e3, 4500, 6500, 8500],
  h.BitRateName = ["流畅", "高清", "超清", "蓝光"],
  h.BitRate1 = {
      500: "0500",
      800: "0800",
      1200: "1200",
      2000: "2000",
      1500: "1500"
  },
  h.BitRate2 = {
      1000: "22001",
      2500: "22002",
      3000: "22003",
      3500: "22004",
      4000: "22005",
      4500: "22006",
      6500: "22007",
      8500: "22008"
  },
  h.getBitRateName = function(e) {
      return e >= 3e3 ? "蓝光" : e >= 1500 ? "超清" : e >= 1e3 ? "高清" : e >= 800 ? "标清" : "流畅"
  }
  ,
  h.H5ROOT = "//a.msstatic.com/huya/h5player/room/1909271625/",
  function() {
      for (var e = document.scripts, t = 0, i = e.length; t < i; t++) {
          var s = e[t].src
            , a = s.match(/\/vplayer.*?\.js/);
          if (a) {
              h.H5ROOT = s.substring(0, a.index + 1);
              break
          }
      }
  }(),
  h.propsDict = {},
  h.roomGiftDict = [],
  h.userInfo = null,
  h.isUserInfoInited = function() {
      return null != h.userInfo
  }
  ,
  h.getUserName = function() {
      return h.userInfo && h.userInfo.sPassport || r.default.getCookie("username")
  }
  ,
  h.getNickName = function() {
      return h.userInfo && h.userInfo.sNick || ""
  }
  ,
  h.encryptIps = localStorage.wssips,
  h.isFullSize = !1,
  h.isFullscreen = !1,
  h.screenStatus = 1,
  h.isShowDanmu = !0,
  h.isLoginTipShow = !1,
  h.isFromApp = !1,
  h.isYanzhi = !1,
  h.isMobileStarShow = !1,
  h.isMakeFriend = !1,
  h.makeFriendData = [],
  h.curSendGiftData = null,
  h.subscribedCount = 0,
  h.arrEmoji = ["/{dx", "/{pz", "/{fn", "/{tp", "/{jy", "/{ot", "/{ng", "/{hk", "/{kz", "/{wx", "/{se", "/{tx", "/{lh", "/{hp", "/{am", "/{kun", "/{by", "/{ka", "/{cy", "/{kx", "/{ll", "/{fd", "/{yw", "/{xu", "/{yun", "/{zs", "/{88", "/{qd", "/{kl", "/{dy", "/{hx", "/{bz", "/{yb", "/{dai", "/{sj", "/{zt", "/{gz", "/{qq", "/{kb", "/{wq", "/{yx", "/{kel", "/{bs", "/{zk", "/{bq", "/{ok", "/{zan", "/{ruo", "/{ws", "/{sl", "/{mg", "/{kw", "/{wen", "/{xd", "/{xs", "/{lw", "/{sd", "/{zd", "/{dao", "/{cc", "/{dk", "/{hh", "/{66", "/{jx", "/{pu", "/{zc", "/{fe", "/{xk", "/{bk", "/{hq", "/{gl", "/{cl", "/{sh", "/{gd", "/{xh", "/{sq", "/{dg", "&#x221C1;", "&#x1F601;"],
  h.regEmoji = new RegExp(h.arrEmoji.join("|"),"g"),
  h.udbAppid = 5700,
  h.udbAppkey = "Ol2lAiO05O8RwRGsK5xbo55bxtykKAFM",
  h._needTokenWup = [],
  h.needTokenWup = {};
  for (var f = 0, c = h._needTokenWup.length; f < c; f++) {
      var p = h._needTokenWup[f];
      h.needTokenWup[p] = !0
  }
  h.iAttendeeCount = 0,
  h.useHttps = !1,
  h.isReplay = !1,
  h.lGroupId = 0,
  h.lGroupType = 0,
  h.isKongZhong = !1,
  h.isCFMiNi = !1,
  h.h5Log = [],
  h.deleteOriginalPainting = function() {
      var e = h.ENV;
      if (!e.deleteOriginalPainting || "-1" == e.deleteOriginalPainting)
          return !1;
      for (var t = e.deleteOriginalPainting.split(","), i = void 0, s = void 0, a = 0; a < t.length; a++) {
          var n = t[a]
            , r = "string" == typeof n ? n.split("_") : [];
          if (r.length > 1) {
              if (s = r[0],
              i = r[1],
              h.topsid == s && h.subsid == i)
                  return !0
          } else if (s = n,
          h.topsid == s)
              return !0
      }
      return !1
  }
  ,
  h.isInGopChannel = function() {
      var e = h.ENV;
      if (!e.h5gopChannel || "-1" == e.h5gopChannel)
          return !1;
      for (var t, i, s = e.h5gopChannel.split(","), a = 0; a < s.length; a++) {
          var n = s[a]
            , r = "string" == typeof n ? n.split("_") : [];
          if (r.length > 1) {
              if (i = r[0],
              t = r[1],
              h.topsid == i && h.subsid == t)
                  return !0
          } else if (i = n,
          h.topsid == i)
              return !0
      }
      return !1
  }
  ,
  h.iCdnPolicyLevel = 0,
  h.specialGameId = [2135, 2333, 2356, 2408, 2409],
  h.useHuyaSdk = !0,
  h.useP2p = !1,
  h.flvUseHttps = !1,
  h.isShowPresentRecommend = !1,
  h.isFirstVideoPlay = !1,
  h.isMaxDanmu = !1,
  h.ishowRecommend = !1,
  h.flvTokenList = [],
  h.priorityGiftShowNum = 8,
  h.allGiftShowNum = 8,
  h.volume = 0,
  h.isPlayAbs = !1,
  h.isPaused = !1,
  h.isP2pPlayIng = !1,
  h.activityBannerDebugIdArr = ["243", "241"],
  h.activityBannerOnlineIdArr = ["5", "4"],
  h.questionBannerIdArr = [253, 7],
  h.liveid = "0",
  h.sSchedule = "",
  h.sDescription = "",
  h.isHttps = function() {
      var e = window.location.host.split(".")[0];
      return !("test" == e || "develop" == e)
  }
  ,
  h.visibilityState = "visible",
  h.isUnion = !1,
  h.lXid = 0,
  h.isShieldingEffect = !1,
  h.isManager = !1,
  h.bDirector = !1,
  h.isOpenFlac = !1,
  h.flacSwitch = !0,
  h.freezeLevel = 0,
  h.isCheckDefBit = !1,
  h.paymentStatus = 0,
  h.isPip = !1,
  h.danmuGroudId = [],
  h.danmuLruCache = !1,
  h.verifyCookiePass = !0,
  h.yaInit = !1,
  h.followList = null,
  h.calljsCache = [],
  h.hasMFVideo = !1,
  h.isSuperFans = !1,
  h.superFanstime = "",
  h.isAllChat = !1,
  h.judgPlayerData = function(e) {
      var t = h.ENV;
      if (!t.cfg)
          return !1;
      var i = t.cfg.playerdata;
      try {
          i = r.default.unescapeHTML(i),
          i = JSON.parse(i)
      } catch (e) {
          console.log("playerdata error")
      }
      if (!i[e])
          return !1;
      if (1 == i[e])
          return !0;
      if (0 == i[e])
          return !1;
      if ("openp2p" == e)
          return 1 == i[e];
      var s = i[e].split(",");
      if ("p2ppid" == e || "danmuMaskOpenPid" == e)
          return -1 != s.indexOf(h.presenterUid.toString());
      for (var a, n, o = 0; o < s.length; o++) {
          var u = s[o]
            , l = "string" == typeof u ? u.split("_") : [];
          if (l.length > 1) {
              if (n = l[0],
              a = l[1],
              h.topsid == n && h.subsid == a)
                  return !0
          } else if (n = u,
          h.topsid == n)
              return !0
      }
      return !1
  }
  ,
  h.playerConfig = {},
  h.openMFVideo = !0,
  h.setPlayerConfig = function() {
      try {
          var e = h.ENV.cfg.playerConfig;
          e = r.default.unescapeHTML(e),
          h.playerConfig = JSON.parse(e),
          h.openMFVideo = !("0" == h.playerConfig.openMFVideo)
      } catch (e) {
          console.log("playerConfig error")
      }
  }
  ,
  h.sdkExtendConfig = {},
  h._sdkExtendConfig = {},
  h.p2pBitrate,
  h.isInP2PBitratePrivilege,
  h.p2pLineClose = [],
  h.registGroup = !1,
  h.danmuMask = !0,
  h.videoDns = !0,
  h.danmuP2P = !0,
  h.setConfigData = function() {
      var e = h.judgPlayerData("p2p")
        , t = h.judgPlayerData("p2ppid");
      h.flvUseHttps = h.judgPlayerData("flvhttps"),
      h.useHttps = h.judgPlayerData("usehttps"),
      h.registGroup = h.judgPlayerData("registGroup"),
      h.flacSwitch = h.judgPlayerData("flacSwitch"),
      h.danmuMask = h.judgPlayerData("danmuMask"),
      h.danmuMaskOpen = h.judgPlayerData("danmuMaskOpenPid"),
      h.videoDns = h.judgPlayerData("videoDns"),
      h.danmuP2P = h.judgPlayerData("danmuP2P");
      var i = h.ENV.cfg.playerdata;
      try {
          i = r.default.unescapeHTML(i),
          h._sdkExtendConfig.sdk = JSON.parse(i).sdk,
          i = JSON.parse(i)
      } catch (e) {
          console.log("playerdata error")
      }
      h.sdkExtendConfig.sdk = i.sdk,
      h.p2pBitrate = i.p2pBitrate || 0,
      h.isInP2PBitratePrivilege = h.judgPlayerData("p2pBitratePrivilege");
      var s = i.p2pLineClose;
      s && (h.p2pLineClose = s.split(",")),
      h.isHttps() && (h.flvUseHttps = !0);
      var a = 1 == e || 1 == t
        , n = h.judgPlayerData("openp2p");
      h.useP2p = n ? !a : a
  }
  ,
  h.makeHttpsUrl = function(e) {
      return e = e.replace("http:", "https:")
  }
}
, function(e, t, i) {
  "use strict";
  function s(e) {
      return e && e.__esModule ? e : {
          default: e
      }
  }
  function a() {
      return l.default.getDateTimeStr() + ""
  }
  Object.defineProperty(t, "__esModule", {
      value: !0
  });
  var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e
  }
  : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
  }
    , r = i(7)
    , o = s(r)
    , u = i(2)
    , l = s(u)
    , d = 1 == localStorage.log ? 0 : 4
    , h = !0
    , f = {
      _data: [],
      _length: 0,
      _printAudioFrame: !!Number(localStorage._printAudioFrame),
      _printVideoFrame: !!Number(localStorage._printVideoFrame),
      getLogTimeState: function() {
          return h
      },
      setLogTimeState: function(e) {
          h != !!e && (f.log("setLogTimeState to " + !!e),
          h = !!e)
      },
      debug: function() {
          var e = a()
            , t = Array.apply(null, arguments);
          d <= -1 && (h && (t[0] = e + " " + t[0]),
          console.log.apply(console, t))
      },
      log: function(e) {
          var t = a()
            , i = Array.apply(null, arguments);
          d <= 0 && (h && (i[0] = t + " " + i[0]),
          console.log.apply(console, i)),
          f.record(t, i, "log")
      },
      info: function(e) {
          var t = a()
            , i = Array.apply(null, arguments);
          d <= 1 && (h && (i[0] = t + " " + i[0]),
          console.info.apply(console, i)),
          f.record(t, i, "info")
      },
      warn: function(e) {
          var t = a()
            , i = Array.apply(null, arguments);
          d <= 2 && (h && (i[0] = t + " " + i[0]),
          console.warn.apply(console, i)),
          f.record(t, i, "warn")
      },
      error: function(e) {
          var t = a()
            , i = Array.apply(null, arguments);
          d <= 3 && (h && (i[0] = t + " " + i[0]),
          console.error.apply(console, i)),
          f.record(t, i, "error")
      },
      group: function(e) {
          var t = a()
            , i = Array.apply(null, arguments);
          if (d <= 1) {
              h && (i[0] = t + " " + i[0]);
              (console.groupCollapsed || console.group || console.log).apply(console, i)
          }
          f.record(t, i, "group")
      },
      groupEnd: function() {
          console.groupEnd && console.groupEnd.apply(console)
      },
      setLevel: function(e) {
          e != d && (console.log(a() + " set log level from " + d + " to " + e),
          d = e)
      },
      getLevel: function() {
          return d
      },
      record: function(e, t, i) {
          1100 === f._length && (f._data.splice(0, 100),
          f._length = 1e3);
          var s = 0
            , a = (t.shift() || "").toString();
          for (a = a.replace(/\%c/gi, function(e, t) {
              return s++,
              ""
          }); s-- && t.length; )
              t.shift();
          for (var r = 0, o = t.length; r < o; r++) {
              var u = t[r];
              "object" == (void 0 === u ? "undefined" : n(u)) && (t[r] = "")
          }
          t.unshift(e, a);
          var l = t.join(" ");
          f._length++,
          f._data.push("[" + i + "]" + l)
      },
      getLog: function() {
          return f._data.unshift(o.default.platform + " " + o.default.name + " " + o.default.version.string),
          f._data
      }
  };
  t.default = f
}
, function(e, t, i) {
  "use strict";
  Object.defineProperty(t, "__esModule", {
      value: !0
  });
  var s = {
      downloadFile: function(e, t) {
          if (e) {
              t = t || "console.log";
              var i = new Blob([e],{
                  type: "text/plain"
              })
                , s = document.createEvent("MouseEvents")
                , a = document.createElement("a");
              a.download = t,
              a.href = window.URL.createObjectURL(i),
              a.dataset.downloadurl = ["text/plain", a.download, a.href].join(":"),
              s.initMouseEvent("click", !0, !1, window, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null),
              a.dispatchEvent(s),
              a = s = i = null
          }
      },
      setCookie: function(e, t, i, s) {
          var a = new Date;
          a.setTime(a.getTime() + 24 * i * 60 * 60 * 1e3);
          var n = "expires=" + a.toUTCString()
            , r = e + "=" + t + "; " + n;
          s && (r += "; domain=" + s),
          document.cookie = r
      },
      getCookie: function(e) {
          for (var t = e + "=", i = document.cookie.split(";"), s = 0, a = i.length; s < a; s++) {
              var n = i[s].trim();
              if (0 == n.indexOf(t))
                  return n.substr(t.length)
          }
          return ""
      },
      clearCookie: function(e) {
          setCookie(e, "", -1)
      },
      getQueryString: function(e) {
          var t = new RegExp("(^|&)" + e + "=([^&]*)(&|$)")
            , i = window.location.search.substr(1).match(t);
          return null != i ? unescape(i[2]) : null
      },
      unescapeHTML: function(e) {
          return e = "" + e,
          e.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&").replace(/&quot;/g, '"').replace(/&apos;/g, "'")
      },
      linkToFlash: function() {
          var e = window.location.href;
          e.indexOf("?") >= 0 ? e += "&playerflash=1" : e += "?playerflash=1",
          window.location.href = e
      },
      padNum: function(e, t) {
          return "0".repeat(t - e.toString().length) + e
      },
      getDateTimeStr: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
            , t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = null;
          i = e ? new Date(e) : new Date;
          var a = i.getFullYear()
            , n = s.padNum(i.getMonth() + 1, 2)
            , r = s.padNum(i.getDate(), 2)
            , o = s.padNum(i.getHours(), 2)
            , u = s.padNum(i.getMinutes(), 2)
            , l = s.padNum(i.getSeconds(), 2)
            , d = a + "-" + n + "-" + r + " " + o + ":" + u + ":" + l;
          if (t) {
              d += "." + s.padNum(i.getMilliseconds(), 3)
          }
          return d
      }
  };
  t.default = s
}
, function(e, t, i) {
  "use strict";
  Object.defineProperty(t, "__esModule", {
      value: !0
  });
  var s = i(0)
    , a = function(e) {
      return e && e.__esModule ? e : {
          default: e
      }
  }(s)
    , n = {
      addEvent: function(e, t) {
          a.default.vplayer.on(e, t)
      },
      removeEvent: function(e, t) {
          a.default.vplayer.off(e, t)
      },
      fireEvent: function(e, t) {
          a.default.vplayer.trigger(e, t)
      },
      WEBSOCKET_INITED: "WEBSOCKET_INITED",
      VIDEO_FIRST_PLAY: "VIDEO_FIRST_PLAY",
      PLAYER_UI_INITED: "PLAYER_UI_INITED",
      USER_INFO_INITED: "USER_INFO_INITED",
      VIDEO_PLAY: "VIDEO_PLAY",
      VIDEO_STOP: "VIDEO_STOP",
      PROPS_INITED: "PROPS_INITED",
      DYNAMIC_LOGIN: "DYNAMIC_LOGIN",
      CHANGE_TO_FLASH: "CHANGE_TO_FLASH",
      SHOW_BITRATE_TIP: "SHOW_BITRATE_TIP",
      FUllSCREEN_CHANGE: "FUllSCREEN_CHANGE",
      FUll_OR_WEBFULL_SCREEN_CHANGE: "FUll_OR_WEBFULL_SCREEN_CHANGE",
      NEW_VIDEO: "NEW_VIDEO",
      SHOW_VIDEO_INFO: "SHOW_VIDEO_INFO",
      SHOW_MARQUEE: "SHOW_MARQUEE",
      ATTENDEE_COUNT_CHANGE: "ATTENDEE_COUNT_CHANGE",
      REPlAY_START_PLAY: "REPlAY_START_PLAY",
      PlAY_CHANNEl: "PlAY_CHANNEl",
      GET_GAMELIVE_HISUPON_REQ: "GET_GAMELIVE_HISUPON_REQ",
      PAUSE_VIDEO: "PAUSE_VIDEO",
      REFRESH_VISUALANGLE: "REFRESH_VISUALANGLE",
      SHOW_A_SCENE_LEAD: "SHOW_A_SCENE_LEAD",
      SHOW_RECOMMEND: "SHOW_RECOMMEND",
      HIDE_RECOMMEND: "HIDE_RECOMMEND",
      SHOW_FORBID_RECOMMEND: "SHOW_FORBID_RECOMMEND",
      VOLUME_CHANGE: "VOLUME_CHANGE",
      AUTO_FEEDBACK: "AUTO_FEEDBACK",
      DATA_METRIC: "DATA_METRIC",
      DATA_METRIC2: "DATA_METRIC2",
      SAVE_BAG_SET: "saveBagSet",
      GIVE_GIFT: "giveGift",
      TONGJI_READY: "tongjiReady",
      PLAYER_FLOAT: "playerFloat",
      QUIT_FULL_SCREEN: "quitFullScreen",
      QUIT_FULL_MODE: "quitFullMode",
      MSG_SHIELD_CFG: "msgShieldCfg",
      BLOCK_WORDS_UPDATE: "blockWordsUpdate",
      SUBSCRIBE_STATUS_CHANGE: "subscribeStatusChangeToPlayer",
      SHIPIN_PLAY: "shipinPlay",
      SHIPIN_PAUSE: "shipinPause",
      CLEAR_DELIVERY_TIP: "clearDeliveryTips",
      ADD_DIY_ICON: "addDiyIcon",
      PAYMENT_WATCH_STATUS_CHANGE: "paymentWatchStatusChange",
      SHOW_GIFT_TIP: "showGiftTip",
      SET_FACE_DATA: "setFaceData",
      SHOW_DIY_BADGE: "showDiyBadge",
      FOLLOW_LIST_READY: "followListReady",
      DEL_DIY_ICON: "delDiyIcon",
      EXT_FEEDBACK: "extFeedBack",
      PLAY_AGAIN: "PLAY_AGAIN",
      SWITCH_LINE: "SWITCH_LINE",
      UPDATE_BTS_VISIBLE: "updateBtnsVisible",
      CLEAR_PLAYER_EFFECT: "clearPlayerEffect",
      CHAT_MODE_CHANGE: "CHAT_MODE_CHANGE",
      GET_FLAC_TOKEN: "GET_FLAC_TOKEN",
      FLAC_SUCCESS: "FLAC_SUCCESS",
      FLAC_FAIL: "FLAC_FAIL",
      PLAY_TIPS: "PLAY_TIPS",
      SET_SEI: "SET_SEI",
      LINK_MIC_STATE_CHANGE: "LINK_MIC_STATE_CHANGE",
      SHOW_COMMON_TOAST: "SHOW_COMMON_TOAST",
      HLS_FIRST_PLAY: "HLS_FIRST_PLAY",
      FORENOTICE_UPDATE: "FORENOTICE_UPDATE",
      MAKE_FRIEND_AUDIO_SOUND: "MAKE_FRIEND_AUDIO_SOUND",
      TAF_SUCCESS_REPORT: "TAF_SUCCESS_REPORT",
      ACTIVITY_ICON_COUNT_UPDATE: "ACTIVITY_ICON_COUNT_UPDATE",
      SEND_CARDPACKAGE_ITEMRSP: "SEND_CARDPACKAGE_ITEMRSP",
      ENTER_PIP: "ENTER_PIP",
      CF_MINI_JUMP: "CF_MINI_JUMP",
      MAKEFIREND_TEMPLATE_CHANGE: "MAKEFIREND_TEMPLATE_CHANGE",
      HUYA_AD_PLAY: "HUYA_AD_PLAY",
      ENTER_P2P_AFTER_REGISTER_GOURP: "ENTER_P2P_AFTER_REGISTER_GOURP",
      SHOW_OPEN_SUPER_FANS: "SHOW_OPEN_SUPER_FANS",
      HUYA_REPORT: "HUYA_REPORT",
      SCRIPTXSS_REPORT: "SCRIPTXSS_REPORT",
      SET_SUPERFANS_CARD_COUNT: "SET_SUPERFANS_CARD_COUNT",
      META_DATA_UPDATE: "META_DATA_UPDATE",
      STOP_SIGNAL_P2P: "STOP_SIGNAL_P2P",
      PROP_ACT_DATA: "PROP_ACT_DATA"
  };
  a.default.Event = n,
  t.default = n
}
, function(e, t, i) {
  "use strict";
  function s() {
      function e(e) {
          r.default.h5Log.length > 100 && (r.default.h5Log = r.default.h5Log.slice(10));
          var t = ""
            , i = new Date
            , s = i.toLocaleString();
          t = "object" == (void 0 === e ? "undefined" : a(e)) ? s + "  " + JSON.stringify(e) : s + "  " + e,
          r.default.h5Log.push(t)
      }
      function t(e) {
          var t = e.toString();
          if (-1 == o.indexOf(t))
              l.push(t),
              l.length > 200 && (l = l.slice(10));
          else {
              var i = u[t];
              i ? (i++,
              u[t] = i) : u[t] = 1
          }
      }
      function i(e) {
          localStorage.extLog && console.log(e),
          d.push(e),
          d.length > 100 && (d = d.slice(10))
      }
      function s() {
          return d
      }
      function n() {
          var e = l.join(",");
          return u.uri = e,
          u
      }
      var o = ["1400", "7501", "6501", "7707", "6223", "6110", "6630", "8006", "6210", "8007", "3102", "3104", "1024344"]
        , u = {}
        , l = []
        , d = [];
      window.makeUriLog = n,
      this.addLog = e,
      this.addUri = t,
      this.addExtLog = i,
      this.getExtLog = s,
      this.makeUriLog = n
  }
  Object.defineProperty(t, "__esModule", {
      value: !0
  });
  var a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e
  }
  : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
  }
    , n = i(0)
    , r = function(e) {
      return e && e.__esModule ? e : {
          default: e
      }
  }(n)
    , o = new s;
  t.default = o
}
, function(e, t, i) {
  "use strict";
  function s(e) {
      return e && e.__esModule ? e : {
          default: e
      }
  }
  function a(e, t) {
      if (!(e instanceof t))
          throw new TypeError("Cannot call a class as a function")
  }
  Object.defineProperty(t, "__esModule", {
      value: !0
  });
  var n = function() {
      function e(e, t) {
          for (var i = 0; i < t.length; i++) {
              var s = t[i];
              s.enumerable = s.enumerable || !1,
              s.configurable = !0,
              "value"in s && (s.writable = !0),
              Object.defineProperty(e, s.key, s)
          }
      }
      return function(t, i, s) {
          return i && e(t.prototype, i),
          s && e(t, s),
          t
      }
  }()
    , r = i(6)
    , o = s(r)
    , u = i(1)
    , l = s(u)
    , d = i(8)
    , h = s(d)
    , f = i(0)
    , c = s(f)
    , p = i(3)
    , v = s(p)
    , y = i(2)
    , m = s(y)
    , _ = i(9)
    , P = s(_)
    , T = i(10)
    , S = s(T);
  i(11);
  var g = function() {
      function e(t) {
          var s = this;
          a(this, e),
          l.default.warn("vplayer 1909271625 | 2019-09-27 16:25:51"),
          l.default.log("location", location.href, t);
          var n = i(12);
          $(t.idDom).html(n),
          t.isSimple && $("#player-gift-wrap").hide(),
          this.G = c.default;
          var r = t;
          c.default.ENV = this.ENV = r,
          c.default.vplayer = this,
          c.default.ENV.register(this),
          r.gameId = m.default.getQueryString("gameId") || r.gameId,
          r.online = m.default.getQueryString("online"),
          r.isSimple = m.default.getQueryString("isSimple") || r.isSimple;
          var o = m.default.getQueryString("topSid")
            , u = m.default.getQueryString("subSid")
            , d = m.default.getQueryString("appid");
          d = 3 == r.iSourceType ? 10506 : d,
          c.default.topsid = Number(o || r.chTopId),
          c.default.subsid = Number(u || r.subChId),
          c.default.appid = Number(d || r.vappid),
          c.default.isUnion = r.isUnion,
          c.default.isReplay = u ? 0 : r.replay,
          c.default.vIdDom = r.idDom,
          c.default.gameId = Number(r.gameId),
          c.default.isFromApp = 2 == Number(r.iSourceType),
          c.default.isYanzhi = 2168 == Number(r.gameId),
          c.default.isMobileStarShow = 11 == Number(r.iSourceType),
          c.default.isKongZhong = r.isKongZhong,
          c.default.presenterUid = Number(r.eu),
          c.default.freezeLevel = Number(r.freezeLevel),
          c.default.isMakeFriend = 10 == Number(r.iSourceType),
          c.default.isCFMiNi = "huya_pc_225" == TT.promoter && window.IS_UNION,
          c.default.setConfigData(),
          c.default.setPlayerConfig();
          var f = parseInt(localStorage.closep2p);
          isNaN(f) || (c.default.useP2p = !1),
          P.default.setLiveInfoFromENV(r),
          S.default.showLoading(),
          c.default.isReplay || (this.vcore = new h.default(this),
          c.default.isMakeFriend ? this.makeFriendPlay() : this.play()),
          v.default.addEvent(v.default.VIDEO_FIRST_PLAY, this.videoFirstPlay.bind(this)),
          this.loadtime = setTimeout(function() {
              s._loadVPlayerUI()
          }
          .bind(), c.default.streamInfo ? 1e3 : 0),
          this.isUILoaded = !1,
          this.vplayerUI = null
      }
      return n(e, [{
          key: "videoFirstPlay",
          value: function() {
              clearTimeout(this.loadtime),
              this._loadVPlayerUI()
          }
      }, {
          key: "play",
          value: function() {
              l.default.log("VPlayer.play"),
              (c.default.streamInfo || c.default.livingInfo) && this.vcore.play()
          }
      }, {
          key: "makeFriendPlay",
          value: function() {
              this.vcore && this.vcore.makeFriendPlay()
          }
      }, {
          key: "stop",
          value: function() {
              l.default.log("VPlayer.stop"),
              this.vcore.stop()
          }
      }, {
          key: "playFlac",
          value: function() {
              this.vcore.playFlac()
          }
      }, {
          key: "stopFlac",
          value: function() {
              this.vcore.stopFlac()
          }
      }, {
          key: "_loadVPlayerUI",
          value: function() {
              var e = this;
              if (!this.isUILoaded) {
                  this.isUILoaded = !0;
                  var t = Date.now();
                  $.ajax({
                      url: c.default.H5ROOT + "vplayerUI.js",
                      dataType: "script",
                      cache: !0,
                      success: function() {
                          var i = Date.now();
                          l.default.log("vplayerUI loaded in " + (i - t) + "ms"),
                          c.default.vplayerUI = e.vplayerUI = new VPlayerUI(e,1909271625)
                      }
                      .bind(this)
                  })
              }
          }
      }, {
          key: "setLivingInfo",
          value: function(e) {
              l.default.log("VPlayer.setLivingInfo"),
              P.default.setLivingInfo(e)
          }
      }, {
          key: "setFlvToken",
          value: function(e) {
              P.default.setFlvToken(e)
          }
      }, {
          key: "setFlacFlvToken",
          value: function(e) {
              P.default.setFlacFlvToken(e)
          }
      }, {
          key: "switchLine",
          value: function(e) {
              if (l.default.log("VPlayer.switchLine", e),
              !c.default.livingInfo)
                  return void l.default.error("switchLine G.livingInfo is null.");
              for (var t = c.default.livingInfo.tNotice.vStreamInfo.value, i = 0, s = t.length; i < s; i++) {
                  var a = t[i];
                  if (a.iLineIndex == e) {
                      c.default.streamInfo = a;
                      break
                  }
              }
          }
      }, {
          key: "switchBitrate",
          value: function(e) {
              l.default.log("VPlayer.switchBitrate", e),
              e = Number(e),
              c.default.curBitRate = e
          }
      }, {
          key: "getVolume",
          value: function() {
              return this.vcore.h5player.getVolume()
          }
      }, {
          key: "setVolume",
          value: function(e) {
              this.vcore.h5player.setVolume(e)
          }
      }, {
          key: "setConfig",
          value: function(e, t) {
              this.vcore.h5player.setConfig(e, t)
          }
      }, {
          key: "setTafHandler",
          value: function(e) {
              this.vcore.setTafHandler(e)
          }
      }, {
          key: "getSDKLog",
          value: function() {
              return this.vcore.h5player.getLog()
          }
      }, {
          key: "getMetrics",
          value: function() {
              return this.vcore.h5player.getMetrics()
          }
      }, {
          key: "getCurrentTime",
          value: function() {
              return this.vcore.h5player.getCurrentTime()
          }
      }, {
          key: "showLoading",
          value: function() {
              S.default.showLoading()
          }
      }, {
          key: "hideLoading",
          value: function() {
              S.default.hideLoading()
          }
      }, {
          key: "checkLogin",
          value: function(e) {
              c.default.isLogin = e
          }
      }, {
          key: "callByJs",
          value: function(e, t) {
              c.default.calljsCache[e] = t
          }
      }, {
          key: "userId",
          get: function() {
              return this.vplayerUI.userId
          }
      }, {
          key: "videoStreamType",
          get: function() {
              return c.default.isReplay ? 2 : c.default.isP2pPlayIng ? 1 : 0
          }
      }, {
          key: "videoData",
          get: function() {
              if (!c.default.streamInfo)
                  return null;
              var e = {}
                , t = c.default.getCurBitRate();
              e.video_p2p = c.default.isP2pPlayIng ? 1 : 0,
              e.video_encode = "h264",
              e.video_bitrate = t,
              e.video_line = c.default.streamInfo.sCdnType;
              for (var i = c.default.getBitRateList(), s = 0; s < i.length; s++)
                  i[s].iBitRate == t && (e.video_definition = i[s].sDisplayName);
              return e
          }
      }, {
          key: "videoStatus",
          get: function() {
              return c.default.isPlaying && !c.default.isPause ? 0 : !c.default.isPlaying && c.default.isPause ? 1 : 2
          }
      }, {
          key: "getGiftData",
          get: function() {
              return c.default.roomGiftDict
          }
      }]),
      e
  }();
  t.default = g,
  o.default.mixTo(g),
  window.VPlayer = g
}
, function(e, t, i) {
  "use strict";
  function s() {}
  function a(e, t, i) {
      var s = !0;
      if (e) {
          var a = 0
            , n = e.length
            , r = t[0]
            , o = t[1]
            , u = t[2];
          switch (t.length) {
          case 0:
              for (; a < n; a += 2)
                  s = !1 !== e[a].call(e[a + 1] || i) && s;
              break;
          case 1:
              for (; a < n; a += 2)
                  s = !1 !== e[a].call(e[a + 1] || i, r) && s;
              break;
          case 2:
              for (; a < n; a += 2)
                  s = !1 !== e[a].call(e[a + 1] || i, r, o) && s;
              break;
          case 3:
              for (; a < n; a += 2)
                  s = !1 !== e[a].call(e[a + 1] || i, r, o, u) && s;
              break;
          default:
              for (; a < n; a += 2)
                  s = !1 !== e[a].apply(e[a + 1] || i, t) && s
          }
      }
      return s
  }
  function n(e) {
      return "[object Function]" === Object.prototype.toString.call(e)
  }
  function r(e, t) {
      if (e.forEach)
          return e.forEach(t);
      for (var i = 0; i < e.length; i += 1)
          t(e[i], i, e)
  }
  Object.defineProperty(t, "__esModule", {
      value: !0
  });
  var o = /\s+/;
  s.prototype.on = function(e, t, i) {
      var s, a, n;
      if (!t)
          return this;
      for (s = this.__events || (this.__events = {}),
      e = e.split(o); a = e.shift(); )
          n = s[a] || (s[a] = []),
          n.push(t, i);
      return this
  }
  ,
  s.prototype.once = function(e, t, i) {
      var s = this
        , a = function a() {
          s.off(e, a),
          t.apply(i || s, arguments)
      };
      return this.on(e, a, i)
  }
  ,
  s.prototype.off = function(e, t, i) {
      var s, a, n, r;
      if (!(s = this.__events))
          return this;
      if (!(e || t || i))
          return delete this.__events,
          this;
      for (e = e ? e.split(o) : u(s); a = e.shift(); )
          if (n = s[a])
              if (t || i)
                  for (r = n.length - 2; r >= 0; r -= 2)
                      t && n[r] !== t || i && n[r + 1] !== i || n.splice(r, 2);
              else
                  delete s[a];
      return this
  }
  ,
  s.prototype.trigger = function(e) {
      var t, i, s, n, r, u, l = [], d = !0;
      if (!(t = this.__events))
          return this;
      for (e = e.split(o),
      r = 1,
      u = arguments.length; r < u; r++)
          l[r - 1] = arguments[r];
      for (; i = e.shift(); )
          (s = t.all) && (s = s.slice()),
          (n = t[i]) && (n = n.slice()),
          "all" !== i && (d = a(n, l, this) && d),
          d = a(s, [i].concat(l), this) && d;
      return d
  }
  ,
  s.prototype.emit = s.prototype.trigger;
  var u = Object.keys;
  u || (u = function(e) {
      var t = [];
      for (var i in e)
          e.hasOwnProperty(i) && t.push(i);
      return t
  }
  ),
  s.mixTo = function(e) {
      e = n(e) ? e.prototype : e;
      var t = s.prototype
        , i = new s;
      r(Object.keys(t), function(s) {
          e[s] = function() {
              return t[s].apply(i, Array.prototype.slice.call(arguments)),
              this
          }
      })
  }
  ,
  t.default = s
}
, function(e, t, i) {
  "use strict";
  Object.defineProperty(t, "__esModule", {
      value: !0
  });
  var s = {};
  !function() {
      var e = self.navigator.userAgent.toLowerCase()
        , t = /(edge)\/([\w.]+)/.exec(e) || /(opr)[\/]([\w.]+)/.exec(e) || /(chrome)[ \/]([\w.]+)/.exec(e) || /(iemobile)[\/]([\w.]+)/.exec(e) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+)/.exec(e) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e) || /(msie) ([\w.]+)/.exec(e) || e.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(e) || e.indexOf("compatible") < 0 && /(firefox)[ \/]([\w.]+)/.exec(e) || []
        , i = /(ipad)/.exec(e) || /(ipod)/.exec(e) || /(windows phone)/.exec(e) || /(iphone)/.exec(e) || /(kindle)/.exec(e) || /(android)/.exec(e) || /(windows)/.exec(e) || /(mac)/.exec(e) || /(linux)/.exec(e) || /(cros)/.exec(e) || []
        , a = {
          browser: t[5] || t[3] || t[1] || "",
          version: t[2] || t[4] || "0",
          majorVersion: t[4] || t[2] || "0",
          platform: i[0] || ""
      }
        , n = {};
      if (a.browser) {
          n[a.browser] = !0;
          var r = a.majorVersion.split(".");
          n.version = {
              major: parseInt(a.majorVersion, 10),
              string: a.version
          },
          r.length > 1 && (n.version.minor = parseInt(r[1], 10)),
          r.length > 2 && (n.version.build = parseInt(r[2], 10))
      }
      a.platform && (n[a.platform] = !0),
      (n.chrome || n.opr || n.safari) && (n.webkit = !0),
      (n.rv || n.iemobile) && (n.rv && delete n.rv,
      a.browser = "msie",
      n.msie = !0),
      n.edge && (delete n.edge,
      a.browser = "msedge",
      n.msedge = !0),
      n.opr && (a.browser = "opera",
      n.opera = !0),
      n.safari && n.android && (a.browser = "android",
      n.android = !0),
      n.name = a.browser,
      n.platform = a.platform;
      for (var o in s)
          s.hasOwnProperty(o) && delete s[o];
      Object.assign(s, n)
  }(),
  t.default = s
}
, function(e, t, i) {
  "use strict";
  function s(e) {
      return e && e.__esModule ? e : {
          default: e
      }
  }
  function a(e, t) {
      if (!(e instanceof t))
          throw new TypeError("Cannot call a class as a function")
  }
  Object.defineProperty(t, "__esModule", {
      value: !0
  });
  var n = function() {
      function e(e, t) {
          for (var i = 0; i < t.length; i++) {
              var s = t[i];
              s.enumerable = s.enumerable || !1,
              s.configurable = !0,
              "value"in s && (s.writable = !0),
              Object.defineProperty(e, s.key, s)
          }
      }
      return function(t, i, s) {
          return i && e(t.prototype, i),
          s && e(t, s),
          t
      }
  }()
    , r = i(1)
    , o = (s(r),
  i(3))
    , u = s(o)
    , l = i(0)
    , d = s(l)
    , h = i(2)
    , f = (s(h),
  function() {
      function e(t) {
          a(this, e),
          this.vplayer = t,
          this.h5player = null,
          this.video = null,
          this.container = $("#player-video"),
          this.turnToFlv = !1,
          this.lastGetTime = 0,
          this.drawVideoId = 0,
          this.capture = document.createElement("canvas"),
          this.captureImg = document.getElementById("hy-video-capture"),
          this.v360id = 0,
          this.v360Tmpl = '<a-scene><a-assets></a-assets><a-videosphere src="#hy-video" rotation="0 180 0"></a-videosphere></a-scene>',
          this.isFirstPlay = !0,
          this.isFirstVideo = !0,
          this.cacheMetric = [],
          this.cacheMetric2 = [],
          this.isMeetPlaying = !1,
          this.initH5Player()
      }
      return n(e, [{
          key: "initH5Player",
          value: function() {
              if (!H5Player.isSupported())
                  return console.log("H5Player not support."),
                  void u.default.fireEvent("playerError");
              var e = new H5Player;
              this.h5player = e,
              e.setIDs(d.default.presenterUid, d.default.topsid, d.default.subsid, d.default.yyuid),
              e.on(H5Player.Events.VIDEO_PLAY, this.onPlayVideo.bind(this)),
              e.on(H5Player.Events.VIDEO_STOP, this.onStopVideo.bind(this)),
              e.on(H5Player.Events.ANCHOR_STOP, this.onEndVideo.bind(this)),
              e.on(H5Player.Events.NO_VIDEO, this.onNoVideo.bind(this)),
              e.on(H5Player.Events.FLV_URL_UNAVAILABLE, this.onFlvUrlUnavailable.bind(this)),
              e.on(H5Player.Events.H5_PLAYER_ERROR, this.onH5PlayerError.bind(this)),
              e.on(H5Player.Events.PLAY_STATUS, this.onPlayStatus.bind(this)),
              e.on(H5Player.Events.NO_DATA_RECEIVED, this.onNoDataReceived.bind(this)),
              e.on(H5Player.Events.P2P_REPORT, this.onP2PReport.bind(this)),
              e.on(H5Player.Events.DATA_METRIC, this.onDataMetric.bind(this)),
              e.on(H5Player.Events.DATA_METRIC2, this.onDataMetric2.bind(this)),
              e.on(H5Player.Events.P2P_TIMEOUT, this.onP2pTimeOut.bind(this)),
              e.on(H5Player.Events.FLAC_AUDIO_START, this.onFlacStart.bind(this)),
              e.on(H5Player.Events.FLAC_AUDIO_ERROR, this.onFlacError.bind(this)),
              e.on(H5Player.Events.FLAC_AUDIO_NEED_RETRY, this.reStartFlac.bind(this)),
              e.on(H5Player.Events.FLV_TO_P2P, this.flvToP2P.bind(this)),
              e.on(H5Player.Events.H264_SEI_PLAY, this.seiPlay.bind(this)),
              e.on(H5Player.Events.AUDIO_PLAY, this.onAudioPlay.bind(this)),
              e.on(H5Player.Events.AUDIO_SOUND, this.onAudioSound.bind(this)),
              e.on(H5Player.Events.METADATA, this.onMetaData.bind(this));
              var t = parseInt(localStorage.sdkLogLevel);
              isNaN(t) || e.setLogLevel(t);
              Number(d.default.gameId),
              e.setConfig("jitBufLen", 4e3),
              e.setExtendConfig(d.default.sdkExtendConfig),
              u.default.addEvent(u.default.PAUSE_VIDEO, this.pauseVideo.bind(this)),
              u.default.addEvent(u.default.WEBSOCKET_INITED, this.onWebsocketInited.bind(this)),
              u.default.addEvent(u.default.ENTER_PIP, this.enterPip.bind(this))
          }
      }, {
          key: "onFlacError",
          value: function() {
              u.default.fireEvent(u.default.FLAC_FAIL)
          }
      }, {
          key: "onFlacStart",
          value: function() {
              u.default.fireEvent(u.default.FLAC_SUCCESS)
          }
      }, {
          key: "setTafHandler",
          value: function(e) {
              this.h5player.setTafHandler && this.h5player.setTafHandler(e)
          }
      }, {
          key: "play",
          value: function() {
              if (1 != d.default.paymentStatus && (d.default.isMakeFriend && !this.isMeetPlaying && this.makeFriendPlay(),
              !d.default.isMakeFriend || d.default.hasMFVideo)) {
                  if (d.default.is360Video && !d.default.is360LibLoaded)
                      return void this.load360Lib();
                  this.isFirstPlay && (this.isFirstPlay = !1,
                  window.h5VideoRequest && window.h5VideoRequest()),
                  d.default.isP2pPlayIng = !1,
                  d.default.flvUseHttps && (d.default.flv = d.default.flv.replace("http:", "https:"));
                  var e = this.h5player
                    , t = d.default.streamInfo
                    , i = d.default.getCurBitRate()
                    , s = i == d.default.SrcBitRate ? 0 : 1
                    , a = !0;
                  !d.default.isInP2PBitratePrivilege && d.default.p2pBitrate && parseInt(d.default.p2pBitrate) > 0 && i > d.default.p2pBitrate && (a = !1);
                  var n = -1 != d.default.p2pLineClose.indexOf(d.default.videoLine.toString());
                  e.setConfig(100, t && t.iIsP2PSupport > 0 && t.sP2pUrl),
                  e.setConfig(101, !n && d.default.useP2p);
                  var r = {
                      uid: d.default.yyuid,
                      sid: d.default.topsid,
                      subSid: d.default.subsid,
                      presenterUid: d.default.presenterUid,
                      lineType: d.default.videoLine
                  };
                  if (d.default.useP2p && t && t.iIsP2PSupport > 0 && t.sP2pUrl && e.isSupportP2P && a && !n && 0 == this.turnToFlv && !d.default.hasMFVideo) {
                      if (d.default._sdkExtendConfig.sdk.p2pConfig.swapdomain) {
                          var o = d.default._sdkExtendConfig.sdk.p2pConfig.swapdomain["line_" + d.default.videoLine] || [];
                          if (2 == o.length) {
                              var l = new RegExp(o[0],"g");
                              t.sP2pUrl = t.sP2pUrl.replace(l, o[1])
                          }
                      }
                      var h = d.default.isH265 || i != d.default.SrcBitRate ? i : 0;
                      r.sStreamName = t.sStreamName,
                      r.sFlvUrl = t.sFlvUrl,
                      r.sFlvAntiCode = t.sFlvAntiCode,
                      r.sFlvUrlSuffix = t.sFlvUrlSuffix,
                      r.sP2pUrl = t.sP2pUrl,
                      r.sP2pAntiCode = t.sP2pAntiCode.replace(/&amp;/g, "&"),
                      r.sP2pUrlSuffix = t.sP2pUrlSuffix,
                      r.bitrate = h,
                      r.curBitrate = i,
                      r.originalBitrate = s,
                      r.iIsP2PSupport = t.iIsP2PSupport,
                      r.h5Root = d.default.H5ROOT,
                      r.type = H5Player.P2P,
                      d.default.videoDns && (r.domainList = t.vP2pIPList.value.concat()),
                      e.start(r),
                      d.default.isP2pPlayIng = !0
                  } else
                      r.url = d.default.flv,
                      r.originalBitrate = s,
                      r.curBitrate = i,
                      r.type = H5Player.FLV,
                      d.default.videoDns && (r.domainList = t.vFlvIPList.value.concat()),
                      e.start(r);
                  this.turnToFlv = !1,
                  d.default.isOpenFlac && u.default.fireEvent(u.default.GET_FLAC_TOKEN, !0)
              }
          }
      }, {
          key: "makeFriendPlay",
          value: function() {
              this.isMeetPlaying = !0,
              this.h5player.startLiveMeeting(d.default.presenterUid, d.default.topsid, d.default.subsid, d.default.yyuid),
              this.makeFriendDeal()
          }
      }, {
          key: "isP2PCooling",
          value: function() {
              var e = Number(localStorage.getItem("interval_long_time"));
              if (e > 0) {
                  return !((new Date).getTime() - e > 36e5) || (localStorage.removeItem("interval_long_time"),
                  !1)
              }
              return !1
          }
      }, {
          key: "getP2pInfoList",
          value: function() {
              var e = []
                , t = void 0;
              t = d.default.livingInfo ? d.default.livingInfo.tNotice.vStreamInfo.value : d.default.ENV.stream.data[0].gameStreamInfoList;
              for (var i = 0; i < t.length; i++) {
                  var s = t[i]
                    , a = s.iLineIndex
                    , n = -1 != d.default.p2pLineClose.indexOf(a.toString());
                  if (s.iIsP2PSupport > 0 && s.sP2pUrl && !n) {
                      var r = new Object;
                      r.sP2pUrl = s.sP2pUrl,
                      r.sP2pUrlSuffix = s.sP2pUrlSuffix,
                      r.iLineIndex = a,
                      e.push(r)
                  }
              }
              return e
          }
      }, {
          key: "reStartFlac",
          value: function() {
              var e = Date.now();
              if (e - this.lastGetTime < 2e3)
                  return !1;
              this.lastGetTime = e,
              d.default.isOpenFlac && (this.h5player.stopFlac(),
              u.default.fireEvent(u.default.GET_FLAC_TOKEN, !0))
          }
      }, {
          key: "playFlac",
          value: function() {
              d.default.flvUseHttps && (d.default.flacFlv = d.default.flacFlv.replace("http:", "https:")),
              this.h5player.startFlac(d.default.flacFlv, d.default.H5ROOT)
          }
      }, {
          key: "stopFlac",
          value: function() {
              this.h5player.stopFlac()
          }
      }, {
          key: "playAgain",
          value: function() {
              d.default.hasVideo && u.default.fireEvent(u.default.PLAY_AGAIN)
          }
      }, {
          key: "stop",
          value: function() {
              d.default.isMakeFriend && (this.h5player.stopLiveMeeting(),
              this.isMeetPlaying = !1),
              this.h5player.stop()
          }
      }, {
          key: "onPlayVideo",
          value: function(e, t) {
              if (!t.uid || !d.default.presenterUid || t.uid == d.default.presenterUid) {
                  t.video.autoplay = !0;
                  var i = this.video;
                  if (i && (i.pause(),
                  i.removeEventListener("enterpictureinpicture", this.onEnterPIP),
                  i.removeEventListener("leavepictureinpicture", this.onLeavePIP),
                  i.src = "",
                  d.default.isPip && document.exitPictureInPicture()),
                  this.captureImg.src = "",
                  d.default.hasMFVideo && ($("#make-friend-video-capture").removeAttr("src"),
                  $("#make-friend-video-capture").hide()),
                  i = t.video,
                  this.video = i,
                  this.video.addEventListener("enterpictureinpicture", this.onEnterPIP),
                  this.video.addEventListener("leavepictureinpicture", this.onLeavePIP),
                  d.default.is360Video) {
                      var s = "hy-video-" + ++this.v360id;
                      $(i).attr("id", s),
                      this.clear360Video();
                      var a = $(this.v360Tmpl);
                      if (a.find("a-assets").append(i),
                      a.find("a-videosphere").attr("src", "#" + s),
                      this.container.find(".a-canvas").remove(),
                      this.container.append(a),
                      d.default.isFullSize)
                          var n = 0
                            , r = setInterval(function() {
                              $("#player-video").resize(),
                              n++,
                              ++n > 16 && clearInterval(r)
                          }, 500)
                  } else
                      $("#hy-video").remove(),
                      $(i).attr("id", "hy-video"),
                      this.vplayer.hideLoading(),
                      d.default.isMakeFriend ? $("#make-friend-video-cotainer").append(i) : 2 == d.default.lLiveCompatibleFlag || 4 == d.default.lLiveCompatibleFlag ? this.startDrawVideo() : this.container.append(i);
                  if (d.default.isPause = !1,
                  d.default.isPlaying = !0,
                  u.default.fireEvent(u.default.NEW_VIDEO),
                  this.isFirstVideo) {
                      this.isFirstVideo = !1,
                      d.default.isFirstVideoPlay = !0,
                      setTimeout(function(e) {
                          e.paused && u.default.fireEvent(u.default.PLAY_TIPS)
                      }, 1e3, this.video),
                      u.default.fireEvent("videoOnLoad");
                      var o = Date.now() - d.default.beginTime;
                      d.default.firstVideoTime = o,
                      u.default.fireEvent(u.default.VIDEO_FIRST_PLAY)
                  }
                  d.default.hasMFVideo && setTimeout(function(e) {
                      e.paused && u.default.fireEvent(u.default.PLAY_TIPS)
                  }, 1e3, this.video),
                  d.default.isPip && (d.default.isPip = !1,
                  setTimeout(this.enterPip.bind(this), 1e3))
              }
          }
      }, {
          key: "onAudioPlay",
          value: function(e, t) {
              var i = t.video;
              this.judgPause || (this.judgPause = !0,
              setTimeout(function(e) {
                  e.paused && u.default.fireEvent(u.default.PLAY_TIPS)
              }, 1e3, i))
          }
      }, {
          key: "makeFriendDeal",
          value: function() {
              if (d.default.isPause = !1,
              d.default.isPlaying = !0,
              this.isFirstVideo) {
                  this.isFirstVideo = !1,
                  d.default.isFirstVideoPlay = !0,
                  u.default.fireEvent("videoOnLoad");
                  var e = Date.now() - d.default.beginTime;
                  d.default.firstVideoTime = e,
                  u.default.fireEvent(u.default.VIDEO_FIRST_PLAY)
              } else
                  d.default.hasMFVideo || this.vplayer.hideLoading()
          }
      }, {
          key: "onAudioSound",
          value: function(e, t) {
              u.default.fireEvent(u.default.MAKE_FRIEND_AUDIO_SOUND, t)
          }
      }, {
          key: "onMetaData",
          value: function(e, t) {
              u.default.fireEvent(u.default.META_DATA_UPDATE, t)
          }
      }, {
          key: "onStopVideo",
          value: function(e, t) {}
      }, {
          key: "onEndVideo",
          value: function(e, t) {}
      }, {
          key: "onNoVideo",
          value: function(e, t) {}
      }, {
          key: "onFlvUrlUnavailable",
          value: function(e, t) {
              this.playAgain()
          }
      }, {
          key: "onH5PlayerError",
          value: function(e, t) {
              this.playAgain()
          }
      }, {
          key: "onPlayStatus",
          value: function(e, t) {
              var i = t.status;
              "VIDEO_STOP" == i ? d.default.isPlaying = !1 : "VIDEO_PLAYING" == i && (d.default.isPlaying = !0)
          }
      }, {
          key: "onNoDataReceived",
          value: function(e, t) {
              this.playAgain()
          }
      }, {
          key: "onP2PReport",
          value: function(e, t) {
              u.default.fireEvent(u.default.AUTO_FEEDBACK)
          }
      }, {
          key: "onDataMetric",
          value: function(e, t) {
              d.default.vplayerUI && d.default.vplayerUI.isTafInited ? u.default.fireEvent(u.default.DATA_METRIC, t) : this.cacheMetric.push(t)
          }
      }, {
          key: "onDataMetric2",
          value: function(e, t) {
              d.default.vplayerUI && d.default.vplayerUI.isTafInited ? u.default.fireEvent(u.default.DATA_METRIC2, t) : this.cacheMetric2.push(t)
          }
      }, {
          key: "onP2pTimeOut",
          value: function(e, t) {
              this.turnToFlv = !0,
              d.default.wsconnected ? this.playAgain() : this.play()
          }
      }, {
          key: "onWebsocketInited",
          value: function(e) {
              this.sendMetricCache(),
              this.sendMetric2Cache()
          }
      }, {
          key: "sendMetricCache",
          value: function() {
              if (this.cacheMetric.length > 0) {
                  for (var e = 0, t = this.cacheMetric.length; e < t; e++)
                      this.onDataMetric(H5Player.Events.DATA_METRIC, this.cacheMetric[e]);
                  this.cacheMetric = []
              }
          }
      }, {
          key: "sendMetric2Cache",
          value: function() {
              if (this.cacheMetric2.length > 0) {
                  for (var e = 0, t = this.cacheMetric2.length; e < t; e++)
                      this.onDataMetric2(H5Player.Events.DATA_METRIC2, this.cacheMetric2[e]);
                  this.cacheMetric2 = []
              }
          }
      }, {
          key: "seiPlay",
          value: function(e, t) {
              d.default.danmuMask && u.default.fireEvent(u.default.SET_SEI, t)
          }
      }, {
          key: "load360Lib",
          value: function() {
              var e = (Date.now(),
              d.default.H5ROOT + "aframe.js");
              $.getScript(e, function() {
                  d.default.is360LibLoaded = !0,
                  this.play();
                  Date.now()
              }
              .bind(this))
          }
      }, {
          key: "startDrawVideo",
          value: function() {
              clearInterval(this.drawVideoId);
              var e = this.capture;
              e.style.position = "absolute",
              this.container.append(e),
              e.getContext("2d").clearRect(0, 0, e.width, e.height),
              this.drawVideoId = setInterval(this.drawVideo, 50)
          }
      }, {
          key: "stopDrawVideo",
          value: function() {
              clearInterval(this.drawVideoId)
          }
      }, {
          key: "drawVideo",
          value: function() {
              var e = this.video;
              if (e.videoWidth > 0) {
                  var t = e.videoWidth
                    , i = e.videoHeight
                    , s = $("#player-video").width()
                    , a = $("#player-video").height();
                  capture.width = s,
                  capture.height = a;
                  var n = 2 == d.default.lLiveCompatibleFlag ? t / 2 : t
                    , r = 4 == d.default.lLiveCompatibleFlag ? i / 2 : i
                    , o = n / s >= r / a ? n / s : r / a;
                  capture.width = n / o,
                  capture.height = r / o;
                  var u = (s - capture.width) / 2
                    , l = (a - capture.height) / 2;
                  capture.style.left = u + "px",
                  capture.style.top = l + "px",
                  capture.getContext("2d").drawImage(e, 0, 0, n, r, 0, 0, capture.width, capture.height)
              }
          }
      }, {
          key: "pauseVideo",
          value: function() {
              var e = this.video;
              if (e) {
                  this.stopDrawVideo();
                  var t = this.capture;
                  if (e.videoWidth > 0) {
                      t.width = e.videoWidth,
                      t.height = e.videoHeight,
                      t.getContext("2d").drawImage(e, 0, 0, t.width, t.height);
                      var i = this.captureImg;
                      i.src = t.toDataURL("image/png"),
                      d.default.hasMFVideo && ($("#make-friend-video-capture").attr("src", t.toDataURL("image/png")),
                      $("#make-friend-video-capture").show()),
                      $(i).show(),
                      d.default.is360Video && (i.style.width = "100%")
                  }
                  $(e).unbind(),
                  this.clear360Video(!0),
                  setTimeout(this.stop.bind(this), 0)
              }
          }
      }, {
          key: "clear360Video",
          value: function(e) {
              if (d.default.is360Video) {
                  var t = this.container.find("a-scene");
                  if (e) {
                      var i = t.find(".a-canvas");
                      this.container.prepend(i)
                  }
                  t.find("video").removeAttr("src").removeAttr("id"),
                  t.remove()
              }
          }
      }, {
          key: "showLoading",
          value: function() {
              $(".player-loading").css("display", "block");
              var e = "url(" + d.default.H5ROOT + "images/videoloading.gif?" + Math.random() + ") no-repeat";
              $(".player-loading-progress").css("background", e)
          }
      }, {
          key: "flvToP2P",
          value: function() {
              d.default.isP2pPlayIng = !0
          }
      }, {
          key: "enterPip",
          value: function() {
              d.default.isPip || this.video && this.video.requestPictureInPicture().catch(function(e) {
                  console.log("Video failed to enter Picture-in-Picture mode."),
                  console.log(e.message)
              })
          }
      }, {
          key: "onEnterPIP",
          value: function() {
              d.default.isPip = !0
          }
      }, {
          key: "onLeavePIP",
          value: function() {
              d.default.isPip = !1,
              this.play()
          }
      }]),
      e
  }());
  t.default = f
}
, function(e, t, i) {
  "use strict";
  function s(e) {
      return e && e.__esModule ? e : {
          default: e
      }
  }
  function a(e) {
      if (!e || !e.stream || !e.stream.data || 0 == e.stream.data.length)
          return void C.default.warn("setLiveInfoFromENV NO stream!");
      E.default.addLog(e.stream),
      R = !0;
      var t = [];
      $.extend(t, e.stream.data[0].gameStreamInfoList);
      var i = e.stream.vMultiStreamInfo
        , s = e.stream.iWebDefaultBitRate
        , a = e.stream.data[0].gameLiveInfo
        , n = parseInt(a.liveCompatibleFlag);
      if (_.default.lLiveCompatibleFlag = n,
      _.default.is360Video = 1 == n || 3 == n || 5 == n || 7 == n,
      _.default.liveid = a.liveId,
      _.default.SrcBitRate = a.bitRate,
      _.default.isH265 = 1 == a.codecType || 4 == a.codecType || 6 == a.codecType || 8 == a.codecType,
      _.default.hasVideo = t.length > 0,
      _.default.hasVideo) {
          _.default.streamInfo = null;
          for (var r = [], o = 0, u = -1, f = [], c = 0, p = t.length; c < p; c++) {
              var v = t[c];
              if (v.iWebPriorityRate < 0)
                  f.push(c);
              else {
                  var m = v.iLineIndex;
                  _.default.curBitRate = _.default.SrcBitRate,
                  o += v.iWebPriorityRate,
                  r.push({
                      line: m,
                      rate: v.iWebPriorityRate
                  }),
                  100 == v.iWebPriorityRate && (u = m)
              }
          }
          for (var P = f.length - 1; P >= 0; P--) {
              var T = f[P];
              t.splice(T, 1)
          }
          if (0 == t.length)
              return;
          if (1 == t.length)
              _.default.videoLine = t[0].iLineIndex;
          else if (-1 != u)
              _.default.videoLine = u;
          else
              for (var S = 0, g = Math.random(), I = 0, k = r.length; I < k; I++) {
                  var A = r[I]
                    , U = A.rate / o;
                  if (S += U,
                  g <= S) {
                      _.default.videoLine = A.line;
                      break
                  }
              }
          _.default.videoLine < 0 && (_.default.videoLine = t[0].iLineIndex);
          var L = i;
          h(L, !0);
          if (_.default.videoLine > 0 && d(s, _.default.livingInfoRecorded),
          _.default.videoLine > 0)
              for (var M = 0, b = t.length; M < b; M++) {
                  var w = t[M]
                    , D = w.iLineIndex;
                  D == _.default.videoLine && (_.default.streamInfo = w,
                  y(e),
                  w.newCFlvAntiCode = w.newCFlvAntiCode.replace(/&amp;/g, "&"),
                  l(w.newCFlvAntiCode))
              }
      }
  }
  function n(e) {
      if (_.default.livingInfoRecorded) {
          var t = (_.default.livingInfoRecorded.tNotice.vStreamInfo.value,
          e.tNotice.vStreamInfo.value)
            , i = 0
            , s = _.default.livingInfoRecorded.tNotice.vMultiStreamInfo.value
            , a = e.tNotice.vMultiStreamInfo.value;
          if (_.default.livingInfoRecorded.tNotice.iSourceType != e.tNotice.iSourceType)
              return !1;
          if (s.length != a.length)
              return !1;
          if (_.default.streamInfo && t.length > 0)
              for (i = 0; i < t.length; i++) {
                  if (t[i].sStreamName != _.default.streamInfo.sStreamName && t[i].iLineIndex == _.default.streamInfo.iLineIndex)
                      return !1;
                  if (t[i].iIsP2PSupport != _.default.streamInfo.iIsP2PSupport && t[i].iLineIndex == _.default.streamInfo.iLineIndex)
                      return _.default.streamSetFlag = !0,
                      !1
              }
          if (_.default.livingInfoRecorded.tStreamSettingNotice.iBitRate == _.default.getTrueBitRate() || 0 == _.default.getTrueBitRate())
              return _.default.curBitRate = e.tStreamSettingNotice.iBitRate,
              !0;
          if (e.tNotice.vMultiStreamInfo.value.length > 0)
              for (i = 0; i < e.tNotice.vMultiStreamInfo.value.length; i++)
                  if (e.tNotice.vMultiStreamInfo.value[i].iBitRate == _.default.getTrueBitRate())
                      return !0
      }
      return !1
  }
  function r(e) {
      var t = _.default.ENV
        , i = !1;
      if (A) {
          A = !1,
          window.infoRequestEnd && infoRequestEnd();
          var s = Date.now();
          _.default.livingInfoTime = s - _.default.livingInfoTime,
          R && 0 == (i = o(e)) && g.default.fireEvent(g.default.DATA_METRIC2, [{
              sMetricName: "web.live_info_diff",
              vField: {
                  value: 1
              }
          }])
      } else
          i = n(e);
      console.log("isSame", i),
      E.default.addLog("getLivingInfoRsp"),
      _.default.livingInfo = e;
      var a = e.tNotice
        , r = (a.vCdnList.value,
      a.vStreamInfo.value);
      t.online || _.default.presenterUid == t.eu || (r = []),
      _.default.hasVideo = r.length > 0,
      g.default.fireEvent(g.default.UPDATE_BTS_VISIBLE),
      _.default.isServPlaying = _.default.hasVideo;
      var u = _.default.isMakeFriend && e.bIsLiving;
      _.default.hasVideo || u || (g.default.fireEvent(g.default.SHOW_RECOMMEND),
      _.default.vplayer.hideLoading(),
      _.default.isPlaying = !1,
      _.default.vplayer.stop()),
      _.default.SrcBitRate = e.tStreamSettingNotice.iBitRate,
      _.default.isH265 = 1 == a.iCodecType || 4 == a.iCodecType || 6 == a.iCodecType || 8 == a.iCodecType;
      var c = parseInt(a.lLiveCompatibleFlag);
      if (_.default.lLiveCompatibleFlag = c,
      _.default.is360Video = 1 == c || 3 == c || 5 == c || 7 == c,
      _.default.is360Video && (window.aframe_flag = c),
      g.default.fireEvent(g.default.REFRESH_VISUALANGLE),
      0 == r.length && u && !_.default.isPlaying)
          return void _.default.vplayer.makeFriendPlay();
      if (_.default.hasVideo) {
          _.default.streamInfo = null;
          var p = []
            , v = 0
            , y = -1
            , m = !1
            , P = []
            , T = []
            , S = !1;
          _.default.menuItems = [];
          for (var I = 0, k = r.length; I < k; I++) {
              (function(e, t) {
                  var i = r[e];
                  if (0 == i.iLineIndex)
                      return P.push(e),
                      S = !0,
                      "continue";
                  if (i.iWebPriorityRate < 0)
                      return P.push(e),
                      "continue";
                  if (-1 != i.sFlvUrl.indexOf("yy.com"))
                      return "continue";
                  var s = i.iLineIndex;
                  _.default.videoLine == s && (m = !0);
                  var a = !1;
                  i.iIsP2PSupport > 0 && i.sP2pUrl && (a = !0);
                  var n = {
                      text: "直播线路" + s,
                      p2p: a,
                      func: function() {
                          var e = s;
                          return function() {
                              g.default.fireEvent(g.default.SWITCH_LINE, e)
                          }
                      }()
                  };
                  if (_.default.menuItems[s] = n,
                  m)
                      return "continue";
                  v += i.iWebPriorityRate,
                  p.push({
                      line: s,
                      rate: i.iWebPriorityRate
                  }),
                  100 == i.iWebPriorityRate && (y = s)
              }
              )(I)
          }
          _.default.menuData[1] = _.default.menuItems,
          _.default.is360Video && (_.default.menuData[3] = L);
          for (var I = P.length - 1; I >= 0; I--) {
              var C = P[I];
              T.push(r[C].iLineIndex),
              r.splice(C, 1)
          }
          if (0 == r.length && !u)
              return _.default.hasVideo = !1,
              _.default.vplayer.hideLoading(),
              g.default.fireEvent(g.default.SHOW_RECOMMEND),
              _.default.isPlaying = !1,
              _.default.vplayer.stop(),
              void g.default.fireEvent(g.default.VIDEO_FIRST_PLAY);
          if (g.default.fireEvent(g.default.HIDE_RECOMMEND),
          !m)
              if (1 == r.length)
                  _.default.videoLine = r[0].iLineIndex;
              else if (-1 != y)
                  _.default.videoLine = y;
              else
                  for (var M = 0, b = Math.random(), w = 0, k = p.length; w < k; w++) {
                      var D = p[w]
                        , O = D.rate / v;
                      if (M += O,
                      b <= M) {
                          _.default.videoLine = D.line;
                          break
                      }
                  }
          (_.default.videoLine < 0 || -1 != T.indexOf(_.default.videoLine)) && (_.default.videoLine = r[0].iLineIndex);
          var F = a.vMultiStreamInfo.value
            , N = void 0;
          if (0 == i && (N = h(F)),
          0 == i && (0 == _.default.livingInfo.tNotice.iWebDefaultBitRate ? _.default.curBitRate = _.default.curBitRate && f(_.default.curBitRate) ? _.default.curBitRate : _.default.SrcBitRate : _.default.curBitRate = _.default.SrcBitRate),
          -1 == _.default.specialGameId.indexOf(parseInt(t.gameId)) && (_.default.isCheckDefBit = !1),
          _.default.videoLine > 0) {
              0 == i && d(0, _.default.livingInfoRecorded);
              var V = _.default.getCurBitRate();
              V && (N = V),
              _.default.vplayerUI.setBitRateList({
                  list: _.default.getBitRateList(),
                  default: N
              })
          }
          if (_.default.vplayerUI.setLineList(r),
          _.default.videoLine > 0)
              for (var x = 0, B = r.length; x < B; x++) {
                  var G = r[x]
                    , H = G.iLineIndex;
                  H == _.default.videoLine && (_.default.streamInfo = G,
                  l(G.sFlvAntiCode))
              }
          if ((0 != _.default.videoLine || _.default.isInGopChannel()) && _.default.vplayerUI.vcore.setConfigGopPlay(),
          t.stream && t.stream.data && t.stream.data[0].gameLiveInfo) {
              var q = t.stream.data[0].gameLiveInfo.liveCompatibleFlag
                , j = parseInt(a.lLiveCompatibleFlag);
              _.default.is360Video && q != j && _.default.vplayer.play()
          }
          _.default.isUIPause || (_.default.isPlaying && m ? 0 != _.default.videoLine && (-1 != _.default.specialGameId.indexOf(parseInt(t.gameId)) ? i || _.default.vplayer.play() : _.default.streamSetFlag && (_.default.streamSetFlag = !1,
          i || _.default.vplayer.play())) : _.default.vplayer.play())
      } else
          console.warn("[getLivingInfo]此频道当前无直播！"),
          g.default.fireEvent(g.default.VIDEO_FIRST_PLAY),
          !U && e.bIsLiving && (U = !0,
          g.default.fireEvent(g.default.DATA_METRIC2, [{
              sMetricName: "web.no_video_line",
              vField: {
                  value: 1
              }
          }]));
      _.default.livingInfoRecorded = e
  }
  function o(e) {
      var t = _.default.ENV;
      if (!t.stream || !t.stream.data || 0 == t.stream.data.length)
          return !1;
      var i = e.tNotice
        , s = (i.vCdnList.value,
      i.vStreamInfo.value)
        , a = t.stream.data[0].gameStreamInfoList
        , n = u(s)
        , r = u(a);
      return "" != r && n == r && e.tStreamSettingNotice.iBitRate == t.stream.data[0].gameLiveInfo.bitRate
  }
  function u(e) {
      var t = "";
      for (var i in e)
          _.default.videoLine == e[i].iLineIndex && (e[i].iWebPriorityRate < 0 && (t += e[i].iWebPriorityRate),
          t += e[i].sCdnType,
          t += e[i].sFlvUrl,
          t += e[i].iIsP2PSupport);
      return t
  }
  function l(e) {
      var t = _.default.streamInfo.sStreamName;
      _.default.flvTokenList[t] = e,
      _.default.streamInfo.sFlvAntiCode = e,
      p(),
      clearTimeout(M),
      M = setTimeout(function(e) {
          for (var t in _.default.flvTokenList)
              _.default.flvTokenList[t] = ""
      }, 24e4, t)
  }
  function d(e, t) {
      if (!_.default.isCheckDefBit) {
          if (_.default.isH265 && null == t) {
              var i = _.default.bitRateList1[0].iBitRate;
              _.default.curBitRate = i
          }
          if (_.default.deleteOriginalPainting())
              return _.default.bitRateList1[1] && (_.default.curBitRate = _.default.bitRateList1[1].iBitRate),
              void (_.default.isCheckDefBit = !0);
          var s = 0;
          s = e || _.default.livingInfo.tNotice.iWebDefaultBitRate;
          var a = T.default.getCookie("videoBitRate");
          a = parseInt(a),
          !isNaN(a) && a > 0 && (s = a);
          var n = (_.default.SrcBitRate,
          void 0);
          if (s > 0) {
              n = _.default.bitRateList1;
              for (var r = 0; r < n.length; r++)
                  if (n[r].iBitRate <= s) {
                      _.default.curBitRate = n[r].iBitRate;
                      break
                  }
              _.default.isCheckDefBit = !0
          }
      }
  }
  function h(e, t) {
      for (var i = [], s = {}, a = e, n = _.default.SrcBitRate, r = 0, o = a.length; r < o; r++) {
          var u = a[r];
          if (!(u.iBitRate > 0 && u.iBitRate <= 300) && (1 != u.iCodecType && 4 != u.iCodecType && 6 != u.iCodecType && 8 != u.iCodecType && (1 != t || 0 != u.iBitRate || 1 != _.default.isH265))) {
              var l = c(u);
              0 == l.iBitRate && (l.iBitRate = _.default.SrcBitRate);
              var d = s[l.sDisplayName];
              d ? l.iBitRate > d.iBitRate && (s[l.sDisplayName] = l) : s[l.sDisplayName] = l
          }
      }
      for (var h in s) {
          var f = s[h];
          i.push(f)
      }
      return _.default.bitRateList1 = i,
      n
  }
  function f(e) {
      for (var t = 0; t < _.default.bitRateList1.length; t++)
          if (_.default.bitRateList1[t].iBitRate == e)
              return !0;
      return !1
  }
  function c(e) {
      return {
          iBitRate: e.iBitRate,
          sDisplayName: e.sDisplayName
      }
  }
  function p() {
      var e = _.default.streamInfo.sStreamName
        , t = _.default.streamInfo.sFlvUrl + "/" + e;
      t += ".flv?" + _.default.flvTokenList[e],
      _.default.flv = t;
      var i = _.default.getCurBitRate();
      _.default.isH265 && (_.default.flv += "&codec=264"),
      i && i != _.default.SrcBitRate ? _.default.flv += "&ratio=" + i : i && _.default.isH265 && (_.default.flv += "&ratio=" + i)
  }
  function v(e) {
      var t = _.default.streamInfo.sStreamName
        , i = _.default.streamInfo.sFlvUrl + "/" + t;
      i += "_audio",
      i += ".flv?" + e,
      _.default.flacFlv = i
  }
  function y(e) {
      for (var t = e.domain_list || [], i = [], s = [], a = 0, n = t.length; a < n; a++)
          if (_.default.videoLine == t[a].line_index) {
              t[a].flv_domain_list && (i = t[a].flv_domain_list.concat()),
              t[a].p2p_domain_list && (s = t[a].p2p_domain_list.concat());
              break
          }
      _.default.streamInfo.vFlvIPList = {
          value: i
      },
      _.default.streamInfo.vP2pIPList = {
          value: s
      }
  }
  Object.defineProperty(t, "__esModule", {
      value: !0
  });
  var m = i(0)
    , _ = s(m)
    , P = i(2)
    , T = s(P)
    , S = i(3)
    , g = s(S)
    , I = i(4)
    , E = s(I)
    , k = i(1)
    , C = s(k)
    , R = !1
    , A = !0
    , U = !1
    , L = [{
      text: "关于 A-Frame",
      func: function() {
          window.open("https://aframe.io")
      }
  }]
    , M = 0
    , b = {
      setLiveInfoFromENV: a,
      setLivingInfo: r,
      setFlvToken: l,
      setFlacFlvToken: v
  };
  t.default = b
}
, function(e, t, i) {
  "use strict";
  function s(e) {
      return e && e.__esModule ? e : {
          default: e
      }
  }
  function a() {
      var e = "url(" + d.default.H5ROOT + "images/videoloading.gif?" + Math.random() + ") no-repeat";
      $(".player-loading-progress").css("background", e)
  }
  function n() {
      if (!v) {
          if (v = !0,
          "none" == $(".player-loading").css("display")) {
              $(".player-loading").css("display", "block");
              var e = "url(" + d.default.H5ROOT + "images/videoloading.gif?" + Math.random() + ") no-repeat";
              $(".player-loading-progress").css("background", e)
          }
          o(),
          d.default.isReplay || (clearTimeout(p),
          p = setTimeout(u, 5e3))
      }
  }
  function r() {
      v = !1,
      $(".player-loading").css("display", "none"),
      o(),
      clearTimeout(p)
  }
  function o() {
      $(".player-loading-changeline").hide()
  }
  function u() {
      if (clearTimeout(p),
      d.default.livingInfo) {
          d.default.livingInfo.tNotice.vStreamInfo.value.length < 2 || ($(".player-loading-changeline").show(),
          c.default.fireEvent(c.default.HUYA_REPORT, "pageview/zhibo/breakdown"))
      }
  }
  Object.defineProperty(t, "__esModule", {
      value: !0
  });
  var l = i(0)
    , d = s(l)
    , h = i(1)
    , f = (s(h),
  i(3))
    , c = s(f)
    , p = 0
    , v = !1
    , y = {
      showLoading: n,
      setLoadingGif: a,
      hideLoading: r
  };
  t.default = y
}
, function(e, t, i) {
  "use strict";
  var s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e
  }
  : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
  }
  ;
  !function(e) {
      function t(s) {
          if (i[s])
              return i[s].exports;
          var a = i[s] = {
              i: s,
              l: !1,
              exports: {}
          };
          return e[s].call(a.exports, a, a.exports, t),
          a.l = !0,
          a.exports
      }
      var i = {};
      t.m = e,
      t.c = i,
      t.d = function(e, i, s) {
          t.o(e, i) || Object.defineProperty(e, i, {
              enumerable: !0,
              get: s
          })
      }
      ,
      t.r = function(e) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
              value: "Module"
          }),
          Object.defineProperty(e, "__esModule", {
              value: !0
          })
      }
      ,
      t.t = function(e, i) {
          if (1 & i && (e = t(e)),
          8 & i)
              return e;
          if (4 & i && "object" == (void 0 === e ? "undefined" : s(e)) && e && e.__esModule)
              return e;
          var a = Object.create(null);
          if (t.r(a),
          Object.defineProperty(a, "default", {
              enumerable: !0,
              value: e
          }),
          2 & i && "string" != typeof e)
              for (var n in e)
                  t.d(a, n, function(t) {
                      return e[t]
                  }
                  .bind(null, n));
          return a
      }
      ,
      t.n = function(e) {
          var i = e && e.__esModule ? function() {
              return e.default
          }
          : function() {
              return e
          }
          ;
          return t.d(i, "a", i),
          i
      }
      ,
      t.o = function(e, t) {
          return Object.prototype.hasOwnProperty.call(e, t)
      }
      ,
      t.p = "",
      t(t.s = 214)
  }([function(e, t, i) {
      t.__esModule = !0,
      t.default = function(e, t) {
          if (!(e instanceof t))
              throw new TypeError("Cannot call a class as a function")
      }
  }
  , function(e, t, i) {
      t.__esModule = !0;
      var s, a = i(220), n = (s = a) && s.__esModule ? s : {
          default: s
      };
      t.default = function() {
          function e(e, t) {
              for (var i = 0; i < t.length; i++) {
                  var s = t[i];
                  s.enumerable = s.enumerable || !1,
                  s.configurable = !0,
                  "value"in s && (s.writable = !0),
                  (0,
                  n.default)(e, s.key, s)
              }
          }
          return function(t, i, s) {
              return i && e(t.prototype, i),
              s && e(t, s),
              t
          }
      }()
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var s = {
          PAudienceGetProxyListReq: 530178,
          PAudienceGetProxyListRsp: 530434,
          PNotifyStreamSwitch: 268034,
          PLoginVideoProxyUniformly: 5650690,
          PLoginVideoProxyUniformlyRes: 5650434,
          PNotifyCurrentCdnStream: 2739202,
          PNotifyCurrentStream4: 2675714,
          PSubscribeStream3: 2667266,
          PSubscribeStreamRes3: 2667522,
          PStreamData3: 2666754,
          PStopStream3: 2666498,
          PStopStream: 2560514,
          PPullStreamData: 2694146,
          PResendStreamData4: 2689026,
          PResendStreamDataFailAck: 2694402,
          PVideoSyncSpeakerTime3: 2674690,
          PForceConnectVideoProxy3: 2685442,
          PVideoProxyPing3: 2669570,
          PVideoProxyPingRes4: 2683650,
          PNotifyMultiVideo: 2746370,
          PLoginAndSubscribe: 4097282,
          PLoginAndSubscribeRes: 4097538,
          PNotifyUplinkRecvCount3: 2672642,
          PVideoBroadcast4: 2754050,
          PUpdateVideoConfig2: 2569474,
          PVideoQualityStatistics: 2591746,
          PP2pPing2: 40706,
          PP2pPing3: 41218,
          PP2pVideoPing3: 2671874,
          VIDEOP2P_PFlashP2PKeepAlive: 3072514,
          VIDEOP2P_PFlashP2PKeepAliveRes: 3072770,
          P2PGetNodesProxy3: 2673410,
          P2PGetNodesProxyRes3: 2673666,
          P2PSubscribeStream3: 2673922,
          P2PRemoveSubscribe3: 2674178,
          P2PKeepAlive: 3074562,
          P2PKeepAliveRes: 3074818,
          P2PNotifyNodeLeave: 3075074,
          P2PSyncDepth: 3075330,
          P2PKeepAliveWebrtc: 3075842,
          P2PKeepAliveWebrtcRes: 3076098,
          PP2PWSForward: 2757378,
          PP2PWSForwardReject: 5653506,
          P2PSubStream: 3073026,
          P2PSubStreamRes: 3073282,
          P2PSyncSubTree: 3073538,
          P2PTest: 3073794,
          P2PRemoveSub: 3074306,
          P2PRemoveSubRes: 3075586,
          P2PStreamAlive: 3076354,
          P2POffer: 12316162,
          P2PAnswer: 12316418,
          P2PCandidate: 12316674,
          P2POfferReject: 12316930,
          P2PRequestOffer: 12317186,
          P2PVersionFailed: 12317442,
          P2PPingOverProxy: 12317698,
          P2PPunchBackReq: 12317954,
          P2PPunchBackRsp: 12318210,
          PCDNNotifyUrl: 20740866,
          PCDNStatusReport: 20741122,
          PCDNGetUrl: 20741378,
          PCDNSwitchUrl: 20741634,
          PCdnP2PWSForward: 53283,
          PCdnP2PWSForwardReject: 53539,
          PCdnProxyPing: 26147,
          PCdnProxyPingRes: 26403,
          PCdnP2PStatics: 26659,
          PCdnP2PErrStatics: 26915,
          PCdnP2pGetNode: 51235,
          PCdnP2pGetNodeRes: 51491,
          PCdnP2PNodePingThroughProxy: 52259,
          PCdnP2PNodePunchThroughProxy: 52515,
          PCdnP2PUserRegister: 52771,
          PCdnP2PUserRegisterRes: 53027,
          PCdnP2pReportLog: 54051,
          PCdnForceConnectVideoProxy: 54563,
          PCDNGetProxyListReq: 153635,
          PCDNGetProxyListRsp: 153891,
          PCDNGetSliceStreamInfoReq: 154147,
          PCDNGetSliceStreamInfoRsp: 154403,
          PCDNSubscribeReq: 768547,
          PCDNSubscribeRes: 768803,
          PCDNCompeteSubscribeReq: 769059,
          PCDNCompeteSubscribeRes: 769315,
          PCDNForceSubscribeNotify: 769571,
          PCdnP2pUserUnRegister: 770083,
          PP2pSliceData: 511779,
          PP2pSliceAudioData: 512035,
          PP2pSliceVideoData: 512291,
          PP2pSliceCommonData: 514083,
          PP2pSliceSignalData: 514595,
          PP2pSliceControlData: 1024547,
          PForceConnectCdnVideoProxy3: 2711042
      };
      !function e() {
          if (!e.done) {
              e.done = !0;
              var t = [];
              for (var i in s) {
                  var a = s[i];
                  t.push({
                      uri: a,
                      name: i
                  })
              }
              t.forEach(function(e) {
                  s[e.uri] = e.name
              })
          }
      }(),
      t.default = s
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
              (0,
              a.default)(this, e),
              this.hasHeader = t,
              this.segments = [],
              this.data = null,
              this.totalLen = 0,
              this.uri = 0,
              this.hasHeader && (this.pushUInt32(10),
              this.pushUInt32(this.uri),
              this.pushUInt16(200))
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  if (0 === this.segments.length)
                      return null;
                  this.data = new Uint8Array(this.totalLen);
                  for (var e = 0, t = 0; t < this.segments.length; ++t) {
                      var i = this.segments[t];
                      this.data.set(i, e),
                      e += i.length
                  }
                  return this.hasHeader && (this.replaceUInt32(0, this.totalLen),
                  this.replaceUInt32(4, this.uri)),
                  this.data
              }
          }, {
              key: "setUri",
              value: function(e) {
                  this.uri = e
              }
          }, {
              key: "replaceUInt32",
              value: function(e, t) {
                  new DataView(this.data.buffer).setUint32(e, t, !0)
              }
          }, {
              key: "pushBool",
              value: function(e) {
                  this.pushUInt8(e ? 1 : 0)
              }
          }, {
              key: "pushUInt8",
              value: function(e) {
                  var t = new Uint8Array(1);
                  new DataView(t.buffer).setUint8(0, e),
                  this.segments.push(t),
                  this.totalLen++
              }
          }, {
              key: "pushUInt16",
              value: function(e) {
                  var t = new Uint8Array(2);
                  new DataView(t.buffer).setUint16(0, e, !0),
                  this.segments.push(t),
                  this.totalLen += 2
              }
          }, {
              key: "pushUInt32",
              value: function(e) {
                  var t = new Uint8Array(4);
                  new DataView(t.buffer).setUint32(0, e, !0),
                  this.segments.push(t),
                  this.totalLen += 4
              }
          }, {
              key: "pushUInt64",
              value: function(e) {
                  var t = new Uint8Array(8)
                    , i = new DataView(t.buffer)
                    , s = e % 4294967296
                    , a = e / 4294967296 >> 0;
                  i.setUint32(0, s, !0),
                  i.setUint32(4, a, !0),
                  this.segments.push(t),
                  this.totalLen += 8
              }
          }, {
              key: "pushUint8Array",
              value: function(e) {
                  this.pushUInt16(e.length),
                  this.segments.push(e),
                  this.totalLen += e.length
              }
          }, {
              key: "pushUint8ArrayWithoutLen",
              value: function(e) {
                  this.segments.push(e),
                  this.totalLen += e.length
              }
          }, {
              key: "pushUint8Array32",
              value: function(e) {
                  this.pushUInt32(e.length),
                  this.segments.push(e),
                  this.totalLen += e.length
              }
          }, {
              key: "pushUInt32Vector",
              value: function(e) {
                  this.pushUInt32(e.length);
                  for (var t = 0; t < e.length; t++)
                      this.pushUInt32(e[t])
              }
          }, {
              key: "pushUInt64Vector",
              value: function(e) {
                  this.pushUInt32(e.length);
                  for (var t = 0; t < e.length; t++)
                      this.pushUInt64(e[t])
              }
          }, {
              key: "pushUInt16Vector",
              value: function(e) {
                  this.pushUInt32(e.length);
                  for (var t = 0; t < e.length; t++)
                      this.pushUInt16(e[t])
              }
          }, {
              key: "popObjVector",
              value: function(e) {
                  for (var t = this.popUInt32(), i = [], s = 0; s < t; s++) {
                      var a = new e;
                      i.push(a.unmarshall(this))
                  }
                  return i
              }
          }, {
              key: "pushString",
              value: function(e) {
                  this.pushUInt16(e.length);
                  for (var t = new Uint8Array(e.length), i = new DataView(t.buffer), s = 0; s < e.length; ++s)
                      i.setUint8(s, e.charCodeAt(s));
                  this.segments.push(t),
                  this.totalLen += e.length
              }
          }, {
              key: "pushString32",
              value: function(e) {
                  this.pushUInt32(e.length);
                  for (var t = new Uint8Array(e.length), i = new DataView(t.buffer), s = 0; s < e.length; ++s)
                      i.setUint8(s, e.charCodeAt(s));
                  this.segments.push(t),
                  this.totalLen += e.length
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      function a() {
          return o.default.getDateTimeStr() + " "
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var n = s(i(58))
        , r = s(i(24))
        , o = s(i(6))
        , u = 99
        , l = !1
        , d = {
          _data: [],
          _length: 0,
          debug: function() {
              var e = a()
                , t = Array.apply(null, arguments);
              t[0] = e + t[0],
              u <= -1 && console.log.apply(console, t)
          },
          log: function(e) {
              var t = a()
                , i = Array.apply(null, arguments);
              i[0] = t + i[0],
              u <= 0 && console.log.apply(console, i),
              d.record(i, "log")
          },
          info: function(e) {
              var t = a()
                , i = Array.apply(null, arguments);
              i[0] = t + i[0],
              u <= 1 && console.info.apply(console, i),
              d.record(i, "info")
          },
          warn: function(e) {
              var t = a()
                , i = Array.apply(null, arguments);
              i[0] = t + i[0],
              u <= 2 && console.warn.apply(console, i),
              d.record(i, "warn")
          },
          error: function(e) {
              var t = a()
                , i = Array.apply(null, arguments);
              i[0] = t + i[0],
              u <= 3 && console.error.apply(console, i),
              d.record(i, "error")
          },
          group: function(e) {
              var t = a()
                , i = Array.apply(null, arguments);
              if (i[0] = t + i[0],
              u <= 1) {
                  (console.groupCollapsed || console.group || console.log).apply(console, i)
              }
              d.record(i, "group")
          },
          groupEnd: function() {
              console.groupEnd && console.groupEnd.apply(console)
          },
          setLevel: function(e) {
              e != u && (console.log(a() + " set log level from " + u + " to " + e),
              u = e)
          },
          getLevel: function() {
              return u
          },
          record: function(e, t) {
              1100 === d._length && (d._data.splice(0, 100),
              d._length = 1e3);
              var i = 0
                , s = (e.shift() || "").toString();
              for (s = s.replace(/\%c/gi, function(e, t) {
                  return i++,
                  ""
              }); i-- && e.length; )
                  e.shift();
              for (var a = 0, r = e.length; a < r; a++) {
                  var o = e[a];
                  "object" == (void 0 === o ? "undefined" : (0,
                  n.default)(o)) && (e[a] = "")
              }
              e.unshift(s);
              var u = e.join(" ");
              d._length++,
              d._data.push("[" + t + "]" + u)
          },
          getLog: function() {
              return l || (l = !0,
              d._data.unshift(r.default.platform + " " + r.default.name + " " + r.default.version.string)),
              d._data
          }
      };
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(87))
        , o = s(i(3))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamName = "",
              this.codecType = 0,
              this.cdnBrand = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default(!1);
                  return e.pushString(this.streamName),
                  e.pushUInt16(this.codecType),
                  e.pushUInt16(this.cdnBrand),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  return this.streamName = e.popString(),
                  this.codecType = e.popUInt16(),
                  this.cdnBrand = e.popUInt16(),
                  this
              }
          }, {
              key: "getDefCodecRate",
              value: function() {
                  return this.codecType >= r.default.VIDEO_264_START && this.codecType <= r.default.VIDEO_H264_END ? 100 * (this.codecType - r.default.VIDEO_264_START) : this.codecType >= r.default.VIDEO_265_START && this.codecType <= r.default.VIDEO_H265_END ? 100 * (this.codecType - r.default.VIDEO_265_START) : 128
              }
          }, {
              key: "text",
              value: function() {
                  return this.streamName + "_" + this.codecType + "_" + this.cdnBrand
              }
          }, {
              key: "equal",
              value: function(e) {
                  return !!e && this.streamName == e.streamName && this.codecType == e.codecType && this.cdnBrand == e.cdnBrand
              }
          }, {
              key: "isValidID",
              get: function() {
                  return this.codecType > 0
              }
          }, {
              key: "isH264",
              get: function() {
                  return this.codecType >= r.default.VIDEO_264_START && this.codecType <= r.default.VIDEO_H264_END
              }
          }, {
              key: "isH265",
              get: function() {
                  return this.codecType >= r.default.VIDEO_265_START && this.codecType <= r.default.VIDEO_H265_END
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e, t) {
          var i = e.toString().length;
          return "0".repeat(Math.max(0, t - i)) + e
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = 0
        , n = {
          now: function() {
              0 === a && (a = Date.now() - 1);
              var e = Date.now() - a;
              return e > 4294967295 ? (a += 4294967295,
              e - 4294967295) : e
          },
          utc: function() {
              return Math.round(Date.now() / 1e3)
          },
          getDateStr: function() {
              var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                , t = null;
              return (t = e ? new Date(e) : new Date).getFullYear() + "-" + s(t.getMonth() + 1, 2) + "-" + s(t.getDate(), 2)
          },
          getTimeStr: function() {
              var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                , t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                , i = null
                , a = s((i = e ? new Date(e) : new Date).getHours(), 2)
                , n = s(i.getMinutes(), 2)
                , r = s(i.getSeconds(), 2)
                , o = a + ":" + n + ":" + r;
              if (t) {
                  o += "." + s(i.getMilliseconds(), 3)
              }
              return o
          },
          getDateTimeStr: function() {
              var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                , t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                , i = null
                , a = (i = e ? new Date(e) : new Date).getFullYear()
                , n = s(i.getMonth() + 1, 2)
                , r = s(i.getDate(), 2)
                , o = s(i.getHours(), 2)
                , u = s(i.getMinutes(), 2)
                , l = s(i.getSeconds(), 2)
                , d = a + "-" + n + "-" + r + " " + o + ":" + u + ":" + l;
              if (t) {
                  d += "." + s(i.getMilliseconds(), 3)
              }
              return d
          }
      };
      t.default = n
  }
  , function(e, t, i) {
      e.exports = {
          default: i(249),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e)
          }
          return (0,
          n.default)(e, null, [{
              key: "turnStr",
              value: function(e, t, i) {
                  for (var s = e.toString(t), a = s.length; a < i; a++)
                      s = "0" + s;
                  return s
              }
          }, {
              key: "rotl64",
              value: function(t, i) {
                  var s = e.turnStr(t, 2, 64)
                    , a = s.substr(i, 64 - i) + s.substr(0, i);
                  return parseInt(a, 2)
              }
          }, {
              key: "rotr64",
              value: function(t, i) {
                  var s = e.turnStr(t, 2, 64)
                    , a = s.substr(64 - i, i) + s.substr(0, 64 - i);
                  return parseInt(a, 2)
              }
          }, {
              key: "rotUid",
              value: function(t, i) {
                  return 0 === t && (t = "1234" + e.turnStr(parseInt(9999 * Math.random()), 10, 4)),
                  t = parseFloat(t),
                  i = parseFloat(i),
                  e.rotl64(t ^ i, 8) + i % 256
              }
          }, {
              key: "revertUid",
              value: function(t, i) {
                  var s = (t = parseFloat(t)) - (i = parseFloat(i)) % 256;
                  return s = e.rotr64(s, 8) ^ i
              }
          }, {
              key: "inet_ntoa",
              value: function(e) {
                  var t, i, s, a = new Uint8Array(4), n = new DataView(a.buffer);
                  return n.setUint32(0, e),
                  t = n.getUint8(0),
                  i = n.getUint8(1),
                  s = n.getUint8(2),
                  n.getUint8(3) + "." + s + "." + i + "." + t
              }
          }, {
              key: "ip2uint",
              value: function(e) {
                  for (var t = 0, i = e.split("."), s = 0; s < i.length; s++)
                      t |= Number(i[s]) << 8 * s;
                  return t < 0 && (t += 4294967296),
                  t
              }
          }, {
              key: "isBiggerUint",
              value: function(e, t) {
                  return e !== t && (e > t ? e - t < 2147483647 : !(t - e < 2147483647))
              }
          }, {
              key: "isEqualOrBiggerUint",
              value: function(e, t) {
                  return e === t || (e > t ? e - t < 2147483647 : !(t - e < 2147483647))
              }
          }, {
              key: "isUintMax",
              value: function(e) {
                  return 4294967295 === e
              }
          }, {
              key: "isUint64Max",
              value: function(e) {
                  return 0x10000000000000000 === e
              }
          }, {
              key: "getQueryString",
              value: function(e) {
                  var t = new RegExp("(^|&)" + e + "=([^&]*)(&|$)")
                    , i = window.location.search.substr(1).match(t);
                  return null != i ? unescape(i[2]) : null
              }
          }, {
              key: "printHexBytes",
              value: function(e) {
                  for (var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = new DataView(e.buffer), s = t ? 10 : 0, a = []; s < i.byteLength; ) {
                      var n = i.getUint8(s++);
                      (n = n.toString(16).toUpperCase()).length < 2 && (n = "0" + n),
                      a.push(n, "\t"),
                      s % 10 == 0 && a.push("\n")
                  }
                  console.log(a.join("") + "\tsize:", i.byteLength)
              }
          }, {
              key: "getCookie",
              value: function(e) {
                  for (var t = e + "=", i = document.cookie.split(";"), s = 0, a = i.length; s < a; s++) {
                      var n = i[s].trim();
                      if (0 == n.indexOf(t))
                          return n.substr(t.length)
                  }
                  return ""
              }
          }, {
              key: "formatByteSize",
              value: function(e) {
                  var t = e / 1024;
                  return t = t > 1024 ? (t /= 1024).toFixed(1) + "MB" : t.toFixed(1) + "KB"
              }
          }, {
              key: "padStrLen",
              value: function(e, t) {
                  var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                  if (e.length >= t)
                      return e;
                  var s = " ".repeat(t - e.length);
                  return i ? s + e : e + s
              }
          }, {
              key: "xhr",
              value: function(e, t, i, s, a) {
                  var n = new XMLHttpRequest;
                  n.overrideMimeType("text/plain; charset=x-user-defined"),
                  n.addEventListener("readystatechange", function e() {
                      4 === n.readyState && (200 === n.status || 304 === n.status ? s(n.response) : a(n.status),
                      n.removeEventListener("readystatechange", e),
                      n = void 0)
                  }),
                  n.open(t, e, !0),
                  n.send(i)
              }
          }, {
              key: "loadLib",
              value: function(e, t, i) {
                  var s = "lib_" + t.replace(".js", "");
                  if (!document.getElementById(s)) {
                      var a = document.createElement("script");
                      a.type = "text/javaScript",
                      a.onload = i,
                      a.src = e + t,
                      a.id = s,
                      document.getElementsByTagName("head")[0].appendChild(a)
                  }
              }
          }]),
          e
      }();
      r.IntMax = 2147483647,
      r.IntMin = -2147483647,
      r.UintMax = 4294967295,
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(50))
        , o = s(i(51))
        , u = s(i(3))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.appid = 0,
              this.streamType = 0,
              this.codecType = 0,
              this.sid = 0,
              this.startTs = 0,
              this.serverGenSeq = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new u.default(!1);
                  return e.pushUInt8(this.appid),
                  e.pushUInt8(this.streamType),
                  e.pushUInt16(this.codecType),
                  e.pushUInt64(this.sid),
                  e.pushUInt32(this.startTs),
                  e.pushUInt16(this.serverGenSeq),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  return this.appid = e.popUInt8(),
                  this.streamType = e.popUInt8(),
                  this.codecType = e.popUInt16(),
                  this.sid = e.popUInt64(),
                  this.startTs = e.popUInt32(),
                  this.serverGenSeq = e.popUInt16(),
                  this
              }
          }, {
              key: "text",
              value: function() {
                  return this.appid + "-" + this.streamType + "-" + this.codecType + "-" + this.sid + "-" + this.startTs + "-" + this.serverGenSeq
              }
          }, {
              key: "equal",
              value: function(e) {
                  return null !== e && this.appid === e.appid && this.streamType === e.streamType && this.codecType === e.codecType && this.sid === e.sid && this.startTs === e.startTs && this.serverGenSeq === e.serverGenSeq
              }
          }, {
              key: "isValidID",
              get: function() {
                  return this.appid > 0
              }
          }, {
              key: "isTransStream",
              get: function() {
                  return 1 == (1 & this.streamType)
              }
          }, {
              key: "isAudioStream",
              get: function() {
                  return this.streamType >= r.default.STRAEM_TYPE_AUDIO_START
              }
          }, {
              key: "isVideoStream",
              get: function() {
                  return this.streamType < r.default.STRAEM_TYPE_AUDIO_START
              }
          }, {
              key: "isH264VideoStream",
              get: function() {
                  return this.isVideoStream && this.codecType >= o.default.VIDEO_264_START && this.codecType <= o.default.VIDEO_H264_END
              }
          }, {
              key: "isH265VideoStream",
              get: function() {
                  return this.isVideoStream && this.codecType >= o.default.VIDEO_265_START && this.codecType <= o.default.VIDEO_H265_END
              }
          }, {
              key: "videoTypeId",
              get: function() {
                  return this.appid << 24 | this.streamType << 16 | this.codecType
              }
          }, {
              key: "hashKey",
              get: function() {
                  return 4294967296 * this.sid + (this.codecType << 16 | this.appid << 8 | this.streamType)
              }
          }, {
              key: "streamId",
              get: function() {
                  return 281474976710656 * this.streamType + 4294967296 * this.codecType + this.startTs
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      function a(e, t) {
          for (var i = 0, s = h.length; i < s; i++) {
              var a = h[i];
              if (a.callback == e && a.thisObj == t)
                  return a
          }
          return null
      }
      function n(e, t, i) {
          var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
            , n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
          if ((i = 0 | (Number(i) || 0)) < l || i % l != 0 || !e)
              return o.default.error("Timer.add Invalide interval value or callback function."),
              !1;
          var u = a(e, t);
          return u || (u = {
              callback: e,
              thisObj: t,
              bindCallback: t ? e.bind(t) : e,
              param: s
          },
          h.push(u)),
          u.times = n,
          u.tickCount = 0,
          u.interval = i / l,
          u.delayDel = !1,
          c ? c.postMessage("start") : !f && h.length > 0 && (f = setInterval(r, l)),
          !0
      }
      function r() {
          if (0 != h.length) {
              d = !0;
              for (var e = u.default.now(), t = h.length - 1; t >= 0; t--) {
                  var i = h[t];
                  if (i && !i.delayDel) {
                      if (++i.tickCount % i.interval == 0) {
                          var s = i.bindCallback
                            , a = i.tickCount / i.interval;
                          s(e, a, i.param),
                          i.times > 0 && i.times <= a && i.tickCount > 0 && h.splice(t, 1)
                      }
                  } else
                      h.splice(t, 1)
              }
              d = !1
          } else
              c ? c.postMessage("stop") : (clearInterval(f),
              f = 0)
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var o = s(i(4))
        , u = s(i(6))
        , l = 10
        , d = !1
        , h = []
        , f = 0
        , c = null;
      t.default = {
          has: function(e, t) {
              return !!a(e, t)
          },
          add: n,
          remove: function(e, t) {
              for (var i = 0, s = h.length; i < s; i++) {
                  var a = h[i];
                  if (a.callback == e && a.thisObj == t)
                      return d ? a.delayDel = !0 : h.splice(i, 1),
                      !0
              }
              return !1
          },
          once: function(e, t, i, s) {
              n(e, t, i + l, s, 1)
          },
          getSize: function() {
              return h.length
          }
      }
  }
  , function(e, t) {
      var i = e.exports = {
          version: "2.6.9"
      };
      "number" == typeof __e && (__e = i)
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var s = {
          PLAY_STATUS: "PLAY_STATUS",
          VIDEO_PLAY: "VIDEO_PLAY",
          METADATA: "METADATA",
          VIDEO_STOP: "VIDEO_STOP",
          VIDEO_SEEK: "VIDEO_SEEK",
          AUDIO_PLAY: "AUDIO_PLAY",
          AUDIO_SOUND: "AUDIO_SOUND",
          ANCHOR_STOP: "ANCHOR_STOP",
          NO_VIDEO: "NO_VIDEO",
          FLV_URL_UNAVAILABLE: "FLV_URL_UNAVAILABLE",
          H5_PLAYER_ERROR: "H5_PLAYER_ERROR",
          NO_DATA_RECEIVED: "NO_DATA_RECEIVED",
          P2P_REPORT: "P2P_REPORT",
          DATA_METRIC: "DATA_METRIC",
          DATA_METRIC2: "DATA_METRIC2",
          P2P_TIMEOUT: "P2P_TIMEOUT",
          FLV_TO_P2P: "FLV_TO_P2P",
          FLAC_AUDIO_START: "FLAC_AUDIO_START",
          FLAC_AUDIO_ERROR: "FLAC_AUDIO_ERROR",
          FLAC_AUDIO_NEED_RETRY: "FLAC_AUDIO_NEED_RETRY",
          SIGNAL_PLAY: "SIGNAL_PLAY",
          SIGNAL_DATA: "SIGNAL_DATA",
          SIGNAL_ERROR: "SIGNAL_ERROR",
          H264_SEI_PLAY: "H264_SEI_PLAY",
          UPDATE_INTERSITY: "UPDATE_INTERSITY"
      };
      t.default = s,
      t.Event = s,
      t.Status = {
          VIDEO_PLAYING: "VIDEO_PLAYING",
          VIDEO_STOP: "VIDEO_STOP",
          VIDEO_CACHING: "VIDEO_CACHING",
          AUDIO_START: "AUDIO_START",
          AUDIO_STOP: "AUDIO_STOP"
      }
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          KEY_VALUE: "value",
          KEY_STR: "str",
          KEY_DIM: "dim",
          K: "k",
          LIVE_TYPE: {
              FLV: 0,
              P2P: 1,
              HLS: 2
          },
          HEART_TYPE: {
              START: 0,
              CONTINUS: 1,
              END: 2
          },
          DIM_COM: {
              P2P: "p2p",
              STREAM_URL: "stream_url",
              CDNP_CONNECT_IP: "cdnp_connect_ip",
              CDNP_CONNECTED: "cdnp_connected",
              USER_WAN_IP: "user_wan_ip",
              VIDEO_LOGIN_FAIL: "video_login_fail",
              ORIGINAL_BITRATE: "original_bitrate",
              BROWSER_NAME: "browser_name",
              BROWSER_VERSION: "browser_version",
              SPHD_TYPE: "sphd_type",
              P2P_COOL_FLAG: "p2p_cool_flag"
          },
          DIM_CORE: {
              VIDEO_BAD_QUALITY_OLD: "video_bad_quality_old",
              VIDEO_BAD_QUALITY: "video_bad_quality",
              VIDEO_BAD_REASON: "video_bad_reason",
              USER_PROPERTY: "user_property",
              HEART_TYPE: "heart_type"
          },
          DIM_EXT: {
              CDN_IP: "cdn_ip"
          },
          CORE: {
              name: "yspwl.web.live.user.heart20",
              CDN_TOTAL_BW: "cdn_total_bw",
              CDN_VALID_BW: "cdn_valid_bw",
              CDN_REPEAT_BW: "cdn_repeat_bw",
              P2P_TOTAL_BW: "p2p_total_bw",
              P2P_REPEAT_BW: "p2p_repeat_bw",
              P2P_VALID_BW: "p2p_valid_bw",
              RANGE_TOTAL_BW: "range_total_bw",
              RANGE_VALID_BW: "range_valid_bw",
              DEFAULT_BW: "default_bw",
              FAST_BW: "fast_bw",
              PATCH_BW: "patch_bw",
              COMPETE_BW: "compete_bw",
              FIXED_BW: "fixed_bw",
              FORCE_BW: "force_bw",
              SIGNAL_UP_BW: "signal_up_bw",
              SIGNAL_DOWN_BW: "signal_down_bw",
              HAS_PUNCH_NODES: "has_punch_nodes",
              FORWARD_REJECT_CNT: "forward_reject_cnt"
          },
          UPDOWN_INFO: {
              name: "updown_info",
              UPLINK_BW: "uplink_bw",
              DOWNLINK_BW: "downlink_bw",
              UPLINK_CNT: "uplink_cnt",
              UPLINK_LIMIT_CNT: "uplink_limit_cnt"
          },
          SIGNAL_HEART20: {
              name: "yspwl.web.live.signal.heart20",
              STREAM_NAME: "stream_name",
              STREAM_DELAY: "stream_delay",
              FULL_FRAME_NUM: "full_frame_num",
              LOST_FRAME_NUM: "lost_frame_num",
              P2P_FLOW_DANMU: "p2p_flow_danmu",
              P2P_FLOW_EMPTY: "p2p_flow_empty",
              CDN_FLOW_DANMU_VALID: "cdn_flow_danmu_valid",
              CDN_FLOW_DANMU_TOTAL: "cdn_flow_danmu_total",
              CDN_FLOW_EMPTY_VALID: "cdn_flow_empty_valid",
              CDN_FLOW_EMPTY_TOTAL: "cdn_flow_empty_total"
          },
          FRAME_INFO: {
              name: "frame_info",
              LOSS_FRAMES: "loss_frames",
              PLAY_FRAMES: "play_frames",
              DTS_JUMPPAUSE_CNT: "dts_jumppause_cnt",
              SKIP_PAUSE_CNT: "skip_pause_cnt",
              FULL_RATIO: "full_ratio"
          },
          SUB_INFO: {
              name: "sub_info",
              TOTAL_CNT: "total_cnt",
              SUCC_CNT: "succ_cnt",
              FAIL_CNT: "fail_cnt",
              TIMEOUT_CNT: "timeout_cnt",
              KICK_CNT: "kick_cnt",
              TRY_CNT: "try_cnt",
              CMP_TOTAL_CNT: "cmp_total_cnt",
              CMP_SUCC_CNT: "cmp_succ_cnt",
              CMP_FAIL_CNT: "cmp_fail_cnt",
              CMP_TIMEOUT_CNT: "cmp_timeout_cnt",
              FORCE_CNT: "force_cnt"
          },
          PUNCH_INFO: {
              name: "punch_info",
              TOTAL_CNT: "total_cnt",
              VALID_CNT: "valid_cnt",
              TRY_CNT: "try_cnt",
              SUCC_CNT: "succ_cnt",
              BACK_CNT: "back_cnt",
              BACK_SUCC_CNT: "back_succ_cnt",
              BACK_TRY_CNT: "back_try_cnt"
          },
          PUNCH_BACK_RET: {
              name: "punch_back_ret"
          },
          RESEND_INFO: {
              name: "resend_info",
              RESEND_CNT: "resend_cnt",
              TIMEOUT_CNT: "timeout_cnt",
              ERROR_CNT: "error_cnt",
              SLICE_CNT: "slice_cnt",
              RESPOND_CNT: "respond_cnt",
              LATE_CNT: "late_cnt",
              MISS_CNT: "miss_cnt",
              REPEAT_CNT: "repeat_cnt",
              REPEAT_SUCC_CNT: "repeat_succ_cnt",
              REPEAT_FAIL_CNT: "repeat_fail_cnt",
              LIMIT_CNT: "limit_cnt"
          },
          SUBSTREAM_INFO: {
              name: "substream_info",
              FIXED_CNT: "fixed_cnt",
              FORCE_CNT: "force_cnt",
              COMPETE_CNT: "compete_cnt"
          },
          FORCESUB_REASON: {
              name: "forcesub_reason",
              NOPEER_CNT: "nopeer_cnt",
              SUBEND_CNT: "subend_cnt",
              TIMEOUT_CNT: "timeout_cnt"
          },
          SUB_RETURN: {
              sub_name: "sub_return",
              switch_name: "switch_return",
              last_name: "last_return"
          },
          NONODE_RETURN: {
              name: "nonode_return",
              PRESENTER_CNT: "presenter_cnt",
              UPLINK_LESS_CNT: "uplink_less_cnt",
              PULL_SAME_CNT: "pull_same_cnt",
              SUBED_CNT: "subed_cnt",
              COOL_CNT: "cool_cnt",
              DELAY_CNT: "delay_cnt",
              RTT_CNT: "rtt_cnt",
              LATE_CNT: "late_cnt",
              FAST_CNT: "fast_cnt",
              NONE_CNT: "none_cnt"
          },
          P2P_TCP_TYPE: {
              name: "p2p_tcp_type"
          },
          P2P_TCP_STATE: {
              name: "p2p_tcp_state"
          },
          ACT: {
              name: "yspwl.web.live.user.act",
              field: "act_type",
              NO_PICTURE: "no_picture",
              HLS_PLAY_SUCC: "hls_play_succ",
              HLS_LOAD_SUCC: "hls_load_succ",
              P2P_PLAY_FAIL: "p2p_play_fail",
              P2P_LOAD_VIDEO: "p2p_load_video",
              P2P_RESTART: "p2p_restart",
              TCP_NO_SLICE: "tcp_no_slice",
              TCP_OPEN_TIME: "tcp_open_time",
              HTTP_CODE_: "http_code_",
              TCP_TIMEOUT: "tcp_timeout",
              P2P_COOLING: "p2p_cooling",
              CONNECT_VIDEO_TS: "connect_video_ts",
              FIRST_VIDEO_PKG_TS: "first_video_pkg_ts",
              FIRST_VIDEO_IFRAME_TS: "first_video_iframe_ts",
              VIDEO_IFRAME_TS: "video_iframe_ts",
              FIRST_VIDEO_RENDER_TS: "first_video_render_ts",
              VIDEO_PLAYED_TS: "video_played_ts",
              VIDEO_LOAD_TS: "video_load_ts",
              VIDEO_GET_VP_TS: "video_get_vp_ts",
              VIDEO_LOGIN_TS: "video_login_ts",
              LOAD_M3U8_TS: "load_m3u8_ts",
              FIRST_FRAG_LOAD_TS: "first_frag_load_ts",
              FIRST_FRAG_LOADED_TS: "first_frag_loaded_ts",
              FIRST_FRAG_SIZE: "first_frag_size"
          }
      }
  }
  , function(e, t, i) {
      var s = i(21)
        , a = i(11)
        , n = i(30)
        , r = i(27)
        , o = i(32)
        , u = function e(t, i, u) {
          var l, d, h, f = t & e.F, c = t & e.G, p = t & e.S, v = t & e.P, y = t & e.B, m = t & e.W, _ = c ? a : a[i] || (a[i] = {}), P = _.prototype, T = c ? s : p ? s[i] : (s[i] || {}).prototype;
          for (l in c && (u = i),
          u)
              (d = !f && T && void 0 !== T[l]) && o(_, l) || (h = d ? T[l] : u[l],
              _[l] = c && "function" != typeof T[l] ? u[l] : y && d ? n(h, s) : m && T[l] == h ? function(e) {
                  var t = function(t, i, s) {
                      if (this instanceof e) {
                          switch (arguments.length) {
                          case 0:
                              return new e;
                          case 1:
                              return new e(t);
                          case 2:
                              return new e(t,i)
                          }
                          return new e(t,i,s)
                      }
                      return e.apply(this, arguments)
                  };
                  return t.prototype = e.prototype,
                  t
              }(h) : v && "function" == typeof h ? n(Function.call, h) : h,
              v && ((_.virtual || (_.virtual = {}))[l] = h,
              t & e.R && P && !P[l] && r(P, l, h)))
      };
      u.F = 1,
      u.G = 2,
      u.S = 4,
      u.P = 8,
      u.B = 16,
      u.W = 32,
      u.U = 64,
      u.R = 128,
      e.exports = u
  }
  , function(e, t, i) {
      var s = i(74)("wks")
        , a = i(56)
        , n = i(21).Symbol
        , r = "function" == typeof n;
      (e.exports = function(e) {
          return s[e] || (s[e] = r && n[e] || (r ? n : a)("Symbol." + e))
      }
      ).store = s
  }
  , function(e, t, i) {
      e.exports = {
          default: i(259),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      function a(e, t, i) {
          var s = h[e];
          if (!s)
              return !1;
          for (var a = 0, n = s.length; a < n; a++) {
              var r = s[a];
              if (r.callback == t && r.thisObj == i)
                  return !0
          }
          return !1
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var n = s(i(318))
        , r = s(i(4))
        , o = s(i(203))
        , u = s(i(320))
        , l = {
          extendConfig: {
              useWssAudio: !1
          },
          isHuya: !0,
          isH265: !1,
          isPull: !1,
          isLiveMeeting: !1,
          presenterUid: 0,
          uid: 0,
          uuid: 0,
          convertUid: 0,
          getUid: function() {
              return l.uuid
          },
          sid: 0,
          subSid: 0,
          appid: 66,
          codeRate: 0,
          curBitrate: 0,
          userArea: 0,
          proxyAreaType: 0,
          clientAreaType: 0,
          isFirstViewer: !1,
          videoStreamId: null,
          audioStreamId: null,
          videoMetaData: null,
          audioMetaData: null,
          videoNtp: new o.default,
          downlinkRTOCalculator: new u.default,
          proxyLink: null,
          videoLink: null,
          initTafTime: 0,
          getVPTime: 0,
          startTime: 0,
          connectVideoTime: 0,
          firstVideoPkgTime: 0,
          firstIFrameTime: 0,
          firstRenderTime: 0,
          onPlayTime: 0,
          initUseTime: function(e) {
              l.startTime = e,
              l.connectVideoTime = 0,
              l.loginTime = 0,
              l.firstVideoPkgTime = 0,
              l.firstIFrameTime = 0,
              l.firstRenderTime = 0,
              l.onPlayTime = 0
          },
          printUseTime: function() {
              for (var e = ["\n%c" + ".".repeat(28), " getVPTime            = " + (l.getVPTime - l.startTime), " connectVideoTime     = " + (l.connectVideoTime - l.getVPTime), " loginTime            = " + (l.loginTime - l.connectVideoTime), " firstVideoPkgTime    = " + (l.firstVideoPkgTime - l.loginTime), " firstIFrameTime      = " + (l.firstIFrameTime - l.firstVideoPkgTime), " firstRenderTime      = " + (l.firstRenderTime - l.firstIFrameTime), " onPlayTime           = " + (l.onPlayTime - l.firstRenderTime), " totalTime            = " + (l.onPlayTime - l.startTime), ".".repeat(28)], t = 0; t < e.length; t++) {
                  var i = e[t];
                  i.length < 28 && (i += " ".repeat(28 - i.length),
                  e[t] = i)
              }
              var s = e.join("\n");
              r.default.log(s, "color:#007500;background:#FFF5C2")
          },
          getConfig: function(e) {
              return d.getConfig(e)
          },
          setConfig: function(e, t) {
              r.default.log("G.setConfig key=" + e + " val=" + t),
              d.setConfig(e, t)
          },
          hasListener: a,
          addListener: function(e, t, i) {
              if (!a(e, t, i)) {
                  var s = h[e] || [];
                  s.push({
                      callback: t,
                      thisObj: i,
                      bindCallback: i ? t.bind(i) : t
                  }),
                  h[e] = s
              }
          },
          removeListener: function(e, t, i) {
              var s = h[e];
              if (s)
                  for (var a = s.length - 1; a >= 0; a--) {
                      var n = s[a];
                      if (n.callback == t && n.thisObj == i)
                          return void s.splice(a, 1)
                  }
          },
          _onYYData: function(e, t) {
              var i = h[e];
              i && i.forEach(function(e) {
                  (0,
                  e.bindCallback)(t)
              })
          },
          send: function(e) {
              return !!l.videoLink && l.videoLink.send(e)
          },
          sendWup: function(e, t, i) {
              var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                , a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
              if (!l.proxyLink)
                  return void r.default.error("G.sendWup proxyLink=null");
              l.proxyLink.sendWup(e, t, i, s, a)
          },
          sendYY: function(e, t) {
              if (!l.proxyLink)
                  return void r.default.error("G.sendYY proxyLink=null");
              l.proxyLink.sendYY(e, t, l.getUid())
          }
      };
      t.default = l;
      var d = new n.default
        , h = {}
  }
  , function(e, t, i) {
      var s = i(28)
        , a = i(112)
        , n = i(68)
        , r = Object.defineProperty;
      t.f = i(19) ? Object.defineProperty : function(e, t, i) {
          if (s(e),
          t = n(t, !0),
          s(i),
          a)
              try {
                  return r(e, t, i)
              } catch (e) {}
          if ("get"in i || "set"in i)
              throw TypeError("Accessors not supported!");
          return "value"in i && (e[t] = i.value),
          e
      }
  }
  , function(e, t, i) {
      e.exports = !i(31)(function() {
          return 7 != Object.defineProperty({}, "a", {
              get: function() {
                  return 7
              }
          }).a
      })
  }
  , function(e, t, i) {
      e.exports = {
          default: i(215),
          __esModule: !0
      }
  }
  , function(e, t) {
      var i = e.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
      "number" == typeof __g && (__g = i)
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(12))
        , o = (s(i(6)),
      s(i(13)))
        , u = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.hyPlayer = t,
              this.stat = t.stat,
              this.isSendLoadTime = !1,
              this.isSendH265 = !1,
              this.hasP2P = 0,
              this.restartReason = -1,
              this.restartTimes = 0,
              this.turnToFlvReason = -1,
              this.turnToFlvTimes = 0,
              this.httpError = !1
          }
          return (0,
          n.default)(e, [{
              key: "sendCdnTime",
              value: function(e, t) {
                  if (!this.isSendLoadTime)
                      if (this.isSendLoadTime = !0,
                      t) {
                          var i = e.connectVideoTime - e.startTime
                            , s = e.firstVideoPkgTime - e.connectVideoTime
                            , a = e.firstIFrameTime1 - e.connectVideoTime
                            , n = e.firstIFrameTime2 - e.firstIFrameTime1
                            , r = e.firstRenderTime - e.firstIFrameTime2
                            , u = e.onPlayTime - e.firstRenderTime
                            , l = e.onPlayTime - e.startTime
                            , d = [{
                              sMetricName: "video.connect_video_time",
                              vField: {
                                  value: i
                              }
                          }, {
                              sMetricName: "video.first_video_pkg_time",
                              vField: {
                                  value: s
                              }
                          }, {
                              sMetricName: "video.first_iframe_time",
                              vField: {
                                  value: a
                              }
                          }, {
                              sMetricName: "video.iframe_time",
                              vField: {
                                  value: n
                              }
                          }, {
                              sMetricName: "video.first_render_time",
                              vField: {
                                  value: r
                              }
                          }, {
                              sMetricName: "video.video_played_time",
                              vField: {
                                  value: u
                              }
                          }, {
                              sMetricName: "video.video_load_time",
                              vField: {
                                  value: l
                              },
                              vDimension: {
                                  p2p: 1
                              }
                          }, this.stat.createAct(o.default.ACT.CONNECT_VIDEO_TS, {
                              value: [i]
                          }), this.stat.createAct(o.default.ACT.FIRST_VIDEO_PKG_TS, {
                              value: [s]
                          }), this.stat.createAct(o.default.ACT.FIRST_VIDEO_IFRAME_TS, {
                              value: [a]
                          }), this.stat.createAct(o.default.ACT.VIDEO_IFRAME_TS, {
                              value: [n]
                          }), this.stat.createAct(o.default.ACT.FIRST_VIDEO_RENDER_TS, {
                              value: [r]
                          }), this.stat.createAct(o.default.ACT.VIDEO_PLAYED_TS, {
                              value: [u]
                          }), this.stat.createAct(o.default.ACT.VIDEO_LOAD_TS, {
                              value: [l]
                          })];
                          this.sendMetrics(d)
                      } else {
                          var h = e.getVPTime - e.startTime
                            , f = e.connectVideoTime - e.getVPTime
                            , c = e.loginTime - e.connectVideoTime
                            , p = e.firstVideoPkgTime - e.loginTime
                            , v = e.firstIFrameTime - e.firstVideoPkgTime
                            , y = e.firstRenderTime - e.firstIFrameTime
                            , m = e.onPlayTime - e.firstRenderTime
                            , _ = e.onPlayTime - e.startTime
                            , P = [{
                              sMetricName: "video.get_vp_time",
                              vField: {
                                  value: h
                              }
                          }, {
                              sMetricName: "video.connect_video_time",
                              vField: {
                                  value: f
                              }
                          }, {
                              sMetricName: "video.login_time",
                              vField: {
                                  value: c
                              }
                          }, {
                              sMetricName: "video.first_video_pkg_time",
                              vField: {
                                  value: p
                              }
                          }, {
                              sMetricName: "video.first_iframe_time",
                              vField: {
                                  value: v
                              }
                          }, {
                              sMetricName: "video.first_render_time",
                              vField: {
                                  value: y
                              }
                          }, {
                              sMetricName: "video.video_played_time",
                              vField: {
                                  value: m
                              }
                          }, {
                              sMetricName: "video.video_load_time",
                              vField: {
                                  value: _
                              },
                              vDimension: {
                                  p2p: 1
                              }
                          }, this.stat.createAct(o.default.ACT.VIDEO_GET_VP_TS, {
                              value: [h]
                          }), this.stat.createAct(o.default.ACT.CONNECT_VIDEO_TS, {
                              value: [f]
                          }), this.stat.createAct(o.default.ACT.VIDEO_LOGIN_TS, {
                              value: [c]
                          }), this.stat.createAct(o.default.ACT.FIRST_VIDEO_PKG_TS, {
                              value: [p]
                          }), this.stat.createAct(o.default.ACT.FIRST_VIDEO_IFRAME_TS, {
                              value: [v]
                          }), this.stat.createAct(o.default.ACT.FIRST_VIDEO_RENDER_TS, {
                              value: [y]
                          }), this.stat.createAct(o.default.ACT.VIDEO_PLAYED_TS, {
                              value: [m]
                          }), this.stat.createAct(o.default.ACT.VIDEO_LOAD_TS, {
                              value: [_]
                          })];
                          this.sendMetrics(P)
                      }
              }
          }, {
              key: "sendFlvTime",
              value: function(e, t) {
                  if (!(this.isSendLoadTime || (this.isSendLoadTime = !0,
                  e > 1e4 || t > 1e4))) {
                      var i = [{
                          sMetricName: "video.video_load_time_flv",
                          vField: {
                              value: e
                          },
                          vDimension: {
                              p2p: 0
                          }
                      }, {
                          sMetricName: "video.video_load_time",
                          vField: {
                              value: e
                          },
                          vDimension: {
                              p2p: 0
                          }
                      }, {
                          sMetricName: "video.video_connect_time_flv",
                          vField: {
                              value: t
                          },
                          vDimension: {
                              p2p: 0
                          }
                      }, this.stat.createAct(o.default.ACT.VIDEO_LOAD_TS, {
                          value: [e]
                      }), this.stat.createAct(o.default.ACT.CONNECT_VIDEO_TS, {
                          value: [t]
                      })];
                      this.sendMetrics(i)
                  }
              }
          }, {
              key: "sendHlsTime",
              value: function(e, t, i, s, a) {
                  if (!(this.isSendLoadTime || (this.isSendLoadTime = !0,
                  e > 1e4 || t > 1e4 || s > 1e4))) {
                      var n = [{
                          sMetricName: "video.video_load_time",
                          vField: {
                              value: e
                          },
                          vDimension: {
                              p2p: 2
                          }
                      }, {
                          sMetricName: "video.video_load_time_hls",
                          vField: {
                              loadTime: e,
                              loadM3u8Time: t,
                              firstFragLoadTs: i,
                              firstFragLoadedTs: s,
                              firstFragSize: a
                          }
                      }, this.stat.createAct(o.default.ACT.VIDEO_LOAD_TS, {
                          value: [e]
                      }), this.stat.createAct(o.default.ACT.LOAD_M3U8_TS, {
                          value: [t]
                      }), this.stat.createAct(o.default.ACT.FIRST_FRAG_LOAD_TS, {
                          value: [i]
                      }), this.stat.createAct(o.default.ACT.FIRST_FRAG_LOADED_TS, {
                          value: [s]
                      }), this.stat.createAct(o.default.ACT.FIRST_FRAG_SIZE, {
                          value: [a]
                      })];
                      this.sendMetrics(n)
                  }
              }
          }, {
              key: "sendMetrics",
              value: function(e) {
                  this.hyPlayer.trigger(r.default.DATA_METRIC2, e)
              }
          }, {
              key: "sendOldMetrics",
              value: function(e) {
                  this.hyPlayer.trigger(r.default.DATA_METRIC, e)
              }
          }]),
          e
      }();
      u.METRIC = {
          VIDEO_FLOW_LINE: "video.flow.line",
          VIDEO_FLOW_P2P: "video.flow.p2p",
          VIDEO_BAD_QUALITY_RATIO: "video.video_bad_quality_ratio",
          WEB_HLS_PLAY_VIDEO_RATIO: "web.hls.play_video_ratio",
          WEB_HLS_PLAY_SUC_RATIO: "web.hls.play_suc_ratio",
          WEB_P2P_PLAY_RATIO: "web.p2p.play_ratio",
          WEB_P2P_PUNCH: "web.p2p.punch",
          WEB_P2P_BW_P2P_VALID: "web.p2p.bw_p2p_valid",
          WEB_P2P_BW_P2P_REPEAT: "web.p2p.bw_p2p_repeat",
          WEB_P2P_BW_P2P_TOTAL: "web.p2p.bw_p2p_total",
          WEB_P2P_BW_CDN_VALID: "web.p2p.bw_cdn_valid",
          WEB_P2P_BW_CDN_REPEAT: "web.p2p.bw_cdn_repeat",
          WEB_P2P_BW_CDN_TOTAL: "web.p2p.bw_cdn_total",
          WEB_P2P_BW_RANGE_VALID: "web.p2p.bw_range_valid",
          WEB_P2P_BW_RANGE_TOTAL: "web.p2p.bw_range_total",
          WEB_P2P_PLAY_FAIL: "web.p2p.play_fail",
          WEB_P2P_LOAD_RATIO: "web.p2p.load_ratio",
          WEB_P2P_CDN_RESTART: "web.p2p.cdn_restart",
          WEB_P2P_TCP_NO_SLICE: "web.p2p.tcp_no_slice",
          WEB_P2P_TCP_OPEN_TIME: "web.p2p.tcp_open_time",
          WEB_P2P_HTTP_CODE: "web.p2p.http_code_",
          WEB_P2P_TCP_TIMEOUT: "web.p2p.tcp_timeout",
          WEB_H265: "web.h265",
          SDK_P2P_TCP: "sdk.p2p.tcp",
          SDK_VIDEO_LOGIN_SUC: "sdk.video.login_suc",
          SDK_P2P_COOLING: "sdk.p2p.cooling",
          SDK_P2P_SERVER_OPEN: "sdk.p2p.server_open",
          SDK_P2P_USER_PROPERTY: "sdk.p2p.user_property",
          VIDEO_VIDEO_BAD_QUALITY_5M_RATIO: "video.video_bad_quality_5m_ratio",
          SDK_P2P_DETAILS: "sdk.p2p.details",
          SDK_P2P_FORCE_REASON: "sdk.p2p.force_reason",
          SDK_P2P_DEFAULT_REASON: "sdk.p2p.default_reason",
          SDK_P2P_VALID_RET: "sdk.p2p.valid_ret",
          SDK_P2P_GET_NODE: "sdk.p2p.get_node",
          WEB_USER: "web.user"
      },
      u.INTERVAL = {
          SDK_VIDEO_QUALITY: "sdk.video.quality",
          SDK_VIDEO_QUALITY_5M: "sdk.video.quality_5m",
          SDK_CALC_FLOW: "sdk.calc.flow",
          SDK_P2P_TCP: "sdk.p2p.tcp",
          SDK_P2P_FLOW: "sdk.p2p.flow",
          SDK_P2P_PUNCH: "sdk.p2p.punch",
          SDK_P2P_SUB: "sdk.p2p.sub",
          SDK_P2P_RESEND: "sdk.p2p.resend",
          SDK_P2P_DELAY: "sdk.p2p.resend",
          SDK_P2P_OTHER: "sdk.p2p.other"
      },
      u.TRIGGER = {
          SDK_HLS_PLAY: "sdk.hls.play",
          SDK_HLS_LOAD: "sdk.hls.load",
          SDK_MSE_ERROR: "sdk.mse.error",
          SDK_P2P_LOAD: "sdk.p2p.load",
          SDK_P2P_LOAD_SAMPLE: "sdk.p2p.load_sample",
          SDK_P2P_RESTART: "sdk.p2p.restart",
          SDK_WEB_H265: "sdk.web.h265"
      },
      t.default = u
  }
  , function(e, t) {
      e.exports = function(e) {
          return "object" == (void 0 === e ? "undefined" : s(e)) ? null !== e : "function" == typeof e
      }
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var s, a = i(20), n = (s = a) && s.__esModule ? s : {
          default: s
      }, r = {};
      !function() {
          var e = self.navigator.userAgent.toLowerCase()
            , t = /(edge)\/([\w.]+)/.exec(e) || /(opr)[\/]([\w.]+)/.exec(e) || /(chrome)[ \/]([\w.]+)/.exec(e) || /(iemobile)[\/]([\w.]+)/.exec(e) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+)/.exec(e) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e) || /(msie) ([\w.]+)/.exec(e) || e.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(e) || e.indexOf("compatible") < 0 && /(firefox)[ \/]([\w.]+)/.exec(e) || []
            , i = /(ipad)/.exec(e) || /(ipod)/.exec(e) || /(windows phone)/.exec(e) || /(iphone)/.exec(e) || /(kindle)/.exec(e) || /(android)/.exec(e) || /(windows)/.exec(e) || /(mac)/.exec(e) || /(linux)/.exec(e) || /(cros)/.exec(e) || []
            , s = {
              browser: t[5] || t[3] || t[1] || "",
              version: t[2] || t[4] || "0",
              majorVersion: t[4] || t[2] || "0",
              platform: i[0] || ""
          }
            , a = {};
          if (s.browser) {
              a[s.browser] = !0;
              var o = s.majorVersion.split(".");
              a.version = {
                  major: parseInt(s.majorVersion, 10),
                  string: s.version
              },
              o.length > 1 && (a.version.minor = parseInt(o[1], 10)),
              o.length > 2 && (a.version.build = parseInt(o[2], 10))
          }
          s.platform && (a[s.platform] = !0),
          (a.chrome || a.opr || a.safari) && (a.webkit = !0),
          (a.rv || a.iemobile) && (a.rv && delete a.rv,
          s.browser = "msie",
          a.msie = !0),
          a.edge && (delete a.edge,
          s.browser = "msedge",
          a.msedge = !0),
          a.opr && (s.browser = "opera",
          a.opera = !0),
          a.safari && a.android && (s.browser = "android",
          a.android = !0);
          for (var u in a.name = s.browser,
          a.platform = s.platform,
          r)
              r.hasOwnProperty(u) && delete r[u];
          (0,
          n.default)(r, a)
      }(),
      r.version || (r.version = {
          major: 0,
          minor: 0,
          build: 0,
          string: "0.0.0"
      }),
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(16))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(8))
        , u = function() {
          function e() {
              var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10;
              (0,
              n.default)(this, e),
              this.maxSize = t,
              this.sum = 0,
              this.list = [],
              this.idx = 0,
              this.cur = 0
          }
          return (0,
          r.default)(e, [{
              key: "reset",
              value: function() {
                  this.sum = 0,
                  this.list = [],
                  this.idx = 0,
                  this.cur = 0
              }
          }, {
              key: "addCur",
              value: function(e) {
                  this.cur += e
              }
          }, {
              key: "calculate",
              value: function() {
                  this.add(this.cur);
                  var e = this.cur;
                  return this.cur = 0,
                  e
              }
          }, {
              key: "add",
              value: function(e) {
                  this.sum += e,
                  this.list.length < this.maxSize ? this.list.push(e) : (this.sum -= this.list[this.idx],
                  this.list[this.idx] = e),
                  ++this.idx >= this.maxSize && (this.idx = 0)
              }
          }, {
              key: "average",
              value: function() {
                  return 0 === this.list.length ? o.default.UintMax : Math.round(this.sum / this.list.length)
              }
          }, {
              key: "getSamples",
              value: function() {
                  return this.list
              }
          }, {
              key: "max",
              value: function() {
                  if (0 === this.list.length)
                      return o.default.UintMax;
                  var e = 0
                    , t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var n, r = (0,
                      a.default)(this.list); !(t = (n = r.next()).done); t = !0) {
                          var u = n.value;
                          u > e && (e = u)
                      }
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
                  return e
              }
          }, {
              key: "min",
              value: function() {
                  var e = 0
                    , t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var n, r = (0,
                      a.default)(this.list); !(t = (n = r.next()).done); t = !0) {
                          var o = n.value;
                          o < e && (e = o)
                      }
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
                  return e
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = new (function() {
          function e() {
              (0,
              a.default)(this, e),
              this.version = 1100,
              this.baseSubs = 10,
              this.uid = 0,
              this.uuid = 0,
              this.convertUid = 0,
              this.appId = 66,
              this.appid = 66
          }
          return (0,
          n.default)(e, [{
              key: "initUUId",
              value: function() {
                  0 === this.uuid && (this.uuid = Number((Date.now() % 1e10 * 1e3 + (1e3 * Math.random() | 0)) % 4294967295));
                  var e = Number(localStorage.appid);
                  e && (this.appid = e,
                  r.default.warn("--- test appid " + e + " ---", this))
              }
          }]),
          e
      }());
      t.default = o
  }
  , function(e, t, i) {
      var s = i(18)
        , a = i(45);
      e.exports = i(19) ? function(e, t, i) {
          return s.f(e, t, a(1, i))
      }
      : function(e, t, i) {
          return e[t] = i,
          e
      }
  }
  , function(e, t, i) {
      var s = i(23);
      e.exports = function(e) {
          if (!s(e))
              throw TypeError(e + " is not an object!");
          return e
      }
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var s, a = i(26), n = (s = a) && s.__esModule ? s : {
          default: s
      }, r = {
          SLICE_SPEED: 12.5,
          MAX_PACKET_CNT: 1e4,
          SWITCH_INTERVAL: 10,
          MAX_DELAY: 66e4,
          DEFAULT_DELAY: 65535,
          SUBSCRIBE_TIMEOUT: 1e4,
          PUNCH_BACK_COOLING: 2e4,
          PUNCH_IGNORE_TIME: 3e5,
          SUB_TIMEOUT: 5e3,
          RESUB_TIMEOUT: 3e4,
          STREAM_DELAY: 2e3,
          EMULATE_DELAY: 1800,
          MAX_DEPTH: 1,
          PROXY_NUM: 3,
          MAX_PEER_STREAM_NUM: 8,
          MAX_PUSH_NUM: 3,
          MAX_PULL_NUM: 3,
          SLICE_DELAY: 100,
          SLICE_LATE: 50,
          SLICE_FAST: 50,
          SLICE_TIMEOUT: 2e3,
          SWITCH_DELAY: 500,
          StreamType: {
              NONE: 0,
              FORCE: 1,
              FIXED: 2,
              COMPETE: 3,
              PEER: 4
          },
          LeaveReason: {
              PING_DIF: 1,
              RESET: 2
          },
          DEL_REASON: {
              CHANNEL_CLOSE: 1,
              CHANNEL_ERROR: 2,
              NODE_LEAVE: 3,
              SERVER_REJECT: 5,
              PEER_ERROR: 6,
              PEER_TIMEOUT: 7,
              PING_TIMEOUT: 8,
              OTHER_SID: 9,
              EMPTY_SLICE: 10,
              SUB_TIMEOUT: 11,
              SUB_FAIL_TIMES: 12,
              NODE_REJECT: 13,
              DIF_CDNP: 14,
              PEER_HANDLER_ERR: 15
          },
          PERIOD: {
              UPLINK_CALC: 10,
              CHECK_SEED: 20,
              GET_NODE: 5
          },
          SubType: {
              SUBSCRIBE_FORCE: 0,
              SUBSCRIBE_NORMAL: 1
          },
          SubResCode: {
              ACCEPT_SUBSCRIBE: 0,
              EMPTY_UPLOAD_NUM: 1,
              DETECT_SUBSCRIBE_CYCLE: 2,
              EMPTY_PEER_INFO: 3,
              SUBSCRIBE_UPLINK_NOT_ENOUGH: 4,
              PUBLISHER_KICK_OFF: 5,
              NOT_SUBSCRIBER: 6,
              INVALID_SUB_STREAM: 7,
              ACCEPT_BY_SUBSCRIBER_UPLINK: 9,
              INVALID_STREAMID: 10,
              SERVER_EMPTY_BW: 11,
              PUBLISHER_LEAVE: 12,
              DIFFERENT_VIDEO_PROXY: 13,
              OLD_VERSION_REQ: 14,
              INVALID_TREE_DEPTH: 15,
              INVALID_MAX_SUBSTREAM_NUM: 16,
              STREAM_LATE: 17,
              DEPTH_LARGE: 18,
              STREAM_LIMIT: 19,
              SLICE_LARGE: 20,
              NOT_FOUND_PKG: 21,
              KICK_OUT: 22,
              SELF_WORST: 23,
              SLICE_LATE: 24,
              SLICE_FAST: 25,
              RESTART: 26,
              RESET: 27,
              DIF_BASE_SUBS: 28
          },
          VIDEO_COMPETE_UID: 4294967295,
          VIDEO_FORCE_UID: 0,
          VIDEO_FIXED_UID: -1,
          VIDEO_DEFAULT_UID: -2,
          isProxyUid: function(e) {
              return e === r.VIDEO_COMPETE_UID || e === r.VIDEO_FORCE_UID || e === r.VIDEO_FIXED_UID || e === r.VIDEO_DEFAULT_UID
          },
          isCompete: function(e) {
              return e === r.VIDEO_COMPETE_UID
          },
          isForce: function(e) {
              return e === r.VIDEO_FORCE_UID
          },
          isFixed: function(e) {
              return e === r.VIDEO_FIXED_UID
          },
          isDefault: function(e) {
              return e === r.VIDEO_DEFAULT_UID
          },
          isSliceJumpFromPeer: function(e, t) {
              return t.isFromPeer && e > 0 && t.seq - e > 10 * r.LOST_SEQ_NUM
          },
          offerReject: {
              REASON_NOTSTART: 1,
              REASON_PUNCHFAILED_CD: 2,
              REASON_PUNCHED_FULL: 3,
              REASON_QUOTA_EXHAUST: 4,
              REASON_VERSION: 5,
              REASON_DIF_LINE: 6,
              REASON_FAIL: 7,
              REASON_IGNORE: 8,
              REASON_HAS_NODE: 9,
              REASON_WAITING: 10,
              REASON_OTHER: 100
          },
          offerRejectTime: 12e4,
          punchBackRet: {
              SUC: 0,
              DIF_STREAM: 1,
              CLOSING: 2,
              COOLING: 3,
              REQUEST: 4,
              REJECT: 5
          },
          restartReason: {
              RANGE_SEQ_MAX: 1,
              RANGE_SEQ_LARGE: 2,
              CDN_JUMP: 3,
              PLAYER_NO_DATA: 4,
              LOST_SEQ: 5,
              CONNECT: 6,
              WORKER_ERROR: 7,
              MULTI_CDN: 8,
              FLV_TO_P2P: 9,
              PLAYER_ERROR: 10,
              PLAYER_DISPOSE: 11,
              LOST_SEQ_JUMP: 12
          },
          turnToFlvReason: {
              FULL_PLAY_FAIL: 1,
              FULL_CONNECT_TIMEOUT: 2,
              SUB_CONNECT_TIMEOUT: 3,
              FULL_NO_DATA: 4,
              SUB_NO_DATA: 5,
              P2P_ARGS_ERROR: 6,
              P2P_COOLING: 7,
              FLV_TO_P2P_FAIL: 8,
              FLV_TO_P2P_FULL_STREAM_COMPLETE: 9,
              FULL_ERROR: 10,
              FULL_CLOSE: 11,
              SUB_ERROR: 12,
              SUB_CLOSE: 13,
              RESTART_TIMES: 14,
              SIGNAL_TIMEOUT: 15,
              PROBE_TIMEOUT: 16,
              PROBE_ERROR: 17
          },
          userProperty: {
              SERVER_CLOSE: 1,
              CLIENT_CLOSE: 2,
              BROWSER_UN_SUPPORT: 3,
              FLASH: 4,
              UNKNOW: 5,
              P2P: 6,
              FIRST_FULL_CONNECT_TIMEOUT: 7,
              FIRST_FULL_PLAY_FAIL: 8,
              FIRST_FULL_NO_DATA: 17,
              RESTART_RANGE_MAX: 9,
              RESTART_RANGE_LARGE: 10,
              RESTART_CONNECT: 11,
              RESTART_MUTI_CDN: 12,
              RESTART_PLAYER_NO_DATA: 13,
              RESTART_PLAYER_ERROR: 14,
              SUB_NO_DATA: 15,
              SUB_CONNECT_TIMEOUT: 16,
              P2P_ARGS_ERROR: 18,
              FLV_TO_P2P: 19,
              LOST_SEQ: 20,
              P2P_COOLING: 21
          },
          pauseReason: {
              FLV_NO_BUFF: 1,
              FLV_UNKNOW_PAUSE: 2,
              FLV_NET_SLOW: 3,
              P2P_NO_BUFF: 4,
              P2P_UNKNOW_PAUSE: 5,
              P2P_FULL_LOADER_NO_DATA: 10,
              P2P_FULL_LOADER_CONNECT_FAIL: 11,
              P2P_SUB_LOADER_NO_DATA: 12,
              P2P_SUB_LOADER_CONNECT_FAIL: 13,
              FLV_NO_DATA: 14,
              P2P_NO_SLICE: 15,
              P2P_RESEND_SKIP_FRAME: 20,
              P2P_RESEND_TOOLATE: 21,
              P2P_RESEND_TIMEOUT: 22,
              P2P_RESEND_ERROR: 23,
              P2P_RESEND_MISSING: 24,
              P2P_DTS_JUMP: 25,
              P2P_NET_SLOW: 26
          },
          DataType: {
              SIGNALLING: 0,
              PING: 1,
              SLICE: 2
          },
          LOST_SEQ_NUM: 4e3,
          initConfig: function(e, t) {
              for (var i = t.coderates, s = null, a = 0; a < i.length; a++)
                  if (s = i[a],
                  e > Number(s[0])) {
                      r.PROXY_NUM = Number(s[1]),
                      r.SLICE_DELAY = Number(s[2]),
                      r.MAX_PUSH_NUM = Number(s[3]),
                      r.MAX_PULL_NUM = Number(s[4]),
                      r.SLICE_LARGE = Number(s[5]);
                      break
                  }
              r.MAX_PEER_STREAM_NUM = Number(t.maxPeerStreamNum) || 8;
              var o = r.SLICE_SPEED * n.default.baseSubs * (e / 1e3);
              r.SLICE_LATE = parseInt(o * ((Number(t.sliceLate) || 1e3) / 1e3)),
              r.SLICE_FAST = parseInt(o * ((Number(t.sliceFast) || 2e3) / 1e3)),
              r.STREAM_DELAY = Number(t.badDelay) || 2e3,
              r.EMULATE_DELAY = Number(t.emuteDelay) || 1800,
              r.RESUB_TIMEOUT = Number(t.resubTime) || 3e4,
              r.SLICE_TIMEOUT = Number(t.sliceTimeout) || 2e3,
              r.SWITCH_DELAY = Number(t.switchDelay) || 500
          }
      };
      t.default = r
  }
  , function(e, t, i) {
      var s = i(111);
      e.exports = function(e, t, i) {
          if (s(e),
          void 0 === t)
              return e;
          switch (i) {
          case 1:
              return function(i) {
                  return e.call(t, i)
              }
              ;
          case 2:
              return function(i, s) {
                  return e.call(t, i, s)
              }
              ;
          case 3:
              return function(i, s, a) {
                  return e.call(t, i, s, a)
              }
          }
          return function() {
              return e.apply(t, arguments)
          }
      }
  }
  , function(e, t) {
      e.exports = function(e) {
          try {
              return !!e()
          } catch (e) {
              return !0
          }
      }
  }
  , function(e, t) {
      var i = {}.hasOwnProperty;
      e.exports = function(e, t) {
          return i.call(e, t)
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(46))
        , n = s(i(58))
        , r = s(i(20))
        , o = s(i(0))
        , u = s(i(1))
        , l = s(i(8))
        , d = s(i(4))
        , h = new (function() {
          function e() {
              (0,
              o.default)(this, e),
              this.pushGop = !1,
              this.jitBufLen = 4e3,
              this.jitMaxBufLen = 8e3,
              this.jitMinBufLen = 1e3,
              this.baseSubs = 10,
              this.urgentResend = 1,
              this.crossCdn = 0,
              this.p2pWssLines = "all",
              this.connectTotalTime = 6e3,
              this.connectTimeout = 2e3,
              this.flowTimeout = 2e3,
              this.flowRetryTimes = 3,
              this.renderTimeout = 4e3,
              this.noDataTimeout = 3e3,
              this.testResender = 0,
              this.maxResendTs = 3e3,
              this.minResendTs = 200,
              this.maxResendTimes = 2,
              this.resendGapTs = 400,
              this.resendMinCnt = 10,
              this.resendDelayTs = 400,
              this.patchSubTs = 250,
              this.http2Channel = "",
              this.deleteH264Aud = [],
              this.useChangeRate = [],
              this.needCooling = 1,
              this.needQueue = 1,
              this.queueTime = 3e3,
              this.punchedCoolingTime = 3e4,
              this.delayCloseNum = 200,
              this.punchTimeout = 1e6,
              this.maxPunchedCnt = 15,
              this.maxPunchedCntMore = 30,
              this.maxNodeCnt = 30,
              this.punchBackCooling = 2e4,
              this.punchIgnoreTime = 3e5,
              this.coefficient = 8,
              this.trySubNum = 5,
              this.trySubTime = 5e3,
              this.fastTime = 5e3,
              this.sliceLate = 500,
              this.sliceFast = 2e3,
              this.badDelay = 2e3,
              this.emuteDelay = 1800,
              this.switchDelay = 500,
              this.aliveTimeout = 1e3,
              this.resubTime = 3e4,
              this.sliceTimeout = 2e3,
              this.maxPeerStreamNum = 8,
              this.maxUplinkBw = 2e3,
              this.closeUids = [],
              this.coderates = [[8e3, 0, 4e3, 5, 5, 250], [5e3, 0, 4e3, 5, 5, 200], [4e3, 0, 4e3, 5, 5, 150], [3e3, 0, 4e3, 5, 5, 100], [0, 0, 4e3, 5, 5, 50]],
              this.swapdomain = {}
          }
          return (0,
          u.default)(e, [{
              key: "init",
              value: function(e) {
                  if (e) {
                      (0,
                      r.default)(this, e),
                      d.default.group("Configs");
                      var t = ["Configs:"];
                      for (var i in this) {
                          var s = this[i];
                          "string" == typeof s && ("pushGop" == i ? s = !!Number(s) : "coderates" == i || "testCoderates" == i || "swapdomain" == i ? (s = s.replace(/[↵\s+\n]/gm, ""),
                          s = JSON.parse(s)) : "p2pWssLines" != i && "http2Channel" != i && (s = Number(s))),
                          this[i] = s,
                          "object" == (void 0 === s ? "undefined" : (0,
                          n.default)(s)) && (s = (0,
                          a.default)(s)),
                          i = l.default.padStrLen(i, 18, !1),
                          t.push("\t" + i + " => " + s)
                      }
                      d.default.log(t.join("\n")),
                      d.default.groupEnd(),
                      d.default.log("Config", this)
                  }
              }
          }]),
          e
      }());
      t.default = h
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(94))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.sid = 0,
              this.fuzzyParam = new o.default
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default(!1);
                  return e.pushUInt64(this.sid),
                  e.pushUint8ArrayWithoutLen(this.fuzzyParam.marshall()),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      var s = i(69)
        , a = i(71);
      e.exports = function(e) {
          return s(a(e))
      }
  }
  , function(e, t, i) {
      var s = i(71);
      e.exports = function(e) {
          return Object(s(e))
      }
  }
  , function(e, t, i) {
      var s = i(226)(!0);
      i(77)(String, "String", function(e) {
          this._t = String(e),
          this._i = 0
      }, function() {
          var e, t = this._t, i = this._i;
          return i >= t.length ? {
              value: void 0,
              done: !0
          } : (e = s(t, i),
          this._i += e.length,
          {
              value: e,
              done: !1
          })
      })
  }
  , function(e, t) {
      e.exports = {}
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      function a(e, t, i) {
          var s = "font-weight:900";
          return e && (s += ";color:" + e),
          t && (s += ";background:" + t),
          i && (s += ";border:3px solid " + i),
          s
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var n = s(i(20))
        , r = s(i(40))
        , o = s(i(0))
        , u = s(i(1))
        , l = s(i(41))
        , d = s(i(42))
        , h = i(121)
        , f = s(i(10))
        , c = s(i(6))
        , p = s(i(4))
        , v = s(i(82))
        , y = s(i(2))
        , m = s(i(48))
        , _ = !!Number(localStorage._printProtocol)
        , P = !!Number(localStorage._printGateway)
        , T = function(e) {
          function t() {
              (0,
              o.default)(this, t);
              var e = (0,
              l.default)(this, (t.__proto__ || (0,
              r.default)(t)).call(this));
              return e.WEBSOCKET_CONNECTED = "WEBSOCKET_CONNECTED",
              e.WEBSOCKET_CLOSED = "WEBSOCKET_CLOSED",
              e.WEBSOCKET_ERROR = "WEBSOCKET_ERROR",
              e.TAFLINK_INITED = "TAFLINK_INITED",
              e._taf = null,
              e.delayWup = [],
              e.delayListener = [],
              e.streamName = null,
              e.requestId = 1,
              e
          }
          return (0,
          d.default)(t, e),
          (0,
          u.default)(t, [{
              key: "getRequestId",
              value: function() {
                  return this.requestId++,
                  1e5 === this.requestId && (this.requestId = 1),
                  this.requestId
              }
          }, {
              key: "setTafHandler",
              value: function(e) {
                  var t = c.default.now();
                  p.default.log("%c[TIME] initTafTime=" + t, "color:#A23400;background:#FFF5C2"),
                  this._taf = e,
                  this._taf.connected ? this._onConnected() : this._taf.addListener(this.WEBSOCKET_CONNECTED, this._onConnected.bind(this)),
                  this.emit(this.TAFLINK_INITED)
              }
          }, {
              key: "_onConnected",
              value: function() {
                  this._ping(),
                  f.default.add(this._ping, this, 1e4);
                  var e = this;
                  this.delayWup.forEach(function(t) {
                      var i = t.servantName
                        , s = t.funcName
                        , a = t.data
                        , n = t.callback
                        , r = t.once
                        , o = t.iRequestId;
                      e.sendWup(i, s, a, n, r, o)
                  }),
                  this.delayWup = [],
                  this.delayListener.forEach(function(t) {
                      var i = t.p0
                        , s = t.p1
                        , a = t.p2;
                      switch (i) {
                      case "add":
                          e.addListener(s, a);
                          break;
                      case "remove":
                          e.removeListener(s, a);
                          break;
                      case "dispatch":
                          e.dispatch(s, a)
                      }
                  }),
                  this.delayListener = []
              }
          }, {
              key: "_ping",
              value: function(e, t) {
                  if (this.connected) {
                      var i = new v.default.VideoGatewayProxy2VGPingReq;
                      i.lLocalTime = .001 * Date.now() >> 0,
                      this._taf.sendWup("videogateway", "videoGatewayProxy2VGPing", i)
                  }
              }
          }, {
              key: "getUserId",
              value: function() {
                  return this._taf.getUserId()
              }
          }, {
              key: "sendWup",
              value: function(e, t, i) {
                  var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                    , a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4]
                    , n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : -1;
                  this.connected ? this._taf.sendWup2 ? this._taf.sendWup2(e, t, i, s, a, n) : this._taf.sendWup(e, t, i, s, a, n) : this.delayWup.push({
                      servantName: e,
                      funcName: t,
                      data: i,
                      callback: s,
                      once: a,
                      iRequestId: n
                  })
              }
          }, {
              key: "sendYY",
              value: function(e, t) {
                  var s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                    , n = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3]
                    , r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4]
                    , o = e.constructor.name
                    , u = y.default[o];
                  u || "function" != typeof e.marshall || (u = new DataView(e.marshall().buffer).getUint32(4, !0)),
                  _ && p.default.log("%c>>>>>>> " + o, a("#009100"), "uri=" + u, e);
                  var l = null
                    , d = "mediaui"
                    , h = "getInfoFromVGM";
                  "function" == typeof this._taf.packVGInfo ? l = this._taf.packVGInfo(u, e, this.streamName) : (d = "videogateway",
                  h = r ? "getInfoFromCdnVG" : "getInfoFromVG",
                  (l = new v.default.GetInfoFromVGReq).lUid = s || 0,
                  l.sMsg = new window.Taf.BinBuffer(e.marshall().buffer),
                  l.sProtoName = "yy",
                  l.iUri = u || 0,
                  l.lSid = 0,
                  l.tId = this.getUserId()),
                  this.sendWup(d, h, l, function(s) {
                      if (0 != s.sMsg.len) {
                          if (!s.lUid || !l.lUid || s.lUid == l.lUid) {
                              var n = new DataView(s.sMsg.buffer)
                                , u = new m.default(n);
                              if (!(o = y.default[u.uri]))
                                  throw P || p.default.log("%c<<<<<<< %crspWup:%c GetInfoFromVG", a("#0000E3"), a("black"), a("#0000E3"), "videogateway", s),
                                  new Error("[x] Unmatched protocol, uri=" + (u.uri >> 8) + " resCode=" + u.resCode + " len=" + u.len);
                              var d = u
                                , h = null;
                              try {
                                  h = r ? i(131)("./" + o).default : i(91)("./" + o).default
                              } catch (e) {
                                  p.default.warn("[x] Unmatched protocol", u.uri >> 8, o)
                              }
                              h && (d = new h).unmarshall(u),
                              _ && p.default.log("%c<<<<<<< " + o, a("#0000E3"), d),
                              "function" == typeof t ? t(d) : this.dispatch(u.uri, d)
                          }
                      } else
                          p.default.warn("GetInfoFromVG response an empty pkg.", e, l, s)
                  }
                  .bind(this), n)
              }
          }, {
              key: "addListener",
              value: function(e, t) {
                  this.connected ? this._taf.addListener(e, t) : this.delayListener.push({
                      p0: "add",
                      p1: e,
                      p2: t
                  })
              }
          }, {
              key: "removeListener",
              value: function(e, t) {
                  this.connected ? this._taf.removeListener(e, t) : this.delayListener.push({
                      p0: "remove",
                      p1: e,
                      p2: t
                  })
              }
          }, {
              key: "dispatch",
              value: function(e, t) {
                  this.connected ? this._taf.dispatch(e, t) : this.delayListener.push({
                      p0: "dispatch",
                      p1: e,
                      p2: t
                  })
              }
          }, {
              key: "inited",
              get: function() {
                  return !!this._taf
              }
          }, {
              key: "connected",
              get: function() {
                  return this._taf && this._taf.connected
              }
          }]),
          t
      }(h.EventEmitter)
        , S = window.TafMx || {};
      window.TafMx = S,
      S.UriMapping = S.UriMapping || {},
      S.WupMapping = S.WupMapping || {},
      S.NoLog = S.NoLog || {},
      (0,
      n.default)(S.UriMapping, {
          8102: v.default.LivingStreamInfoNotice,
          8103: v.default.LivingStreamEndNotice,
          1025601: v.default.LiveMeetingSyncNotice
      }),
      (0,
      n.default)(S.WupMapping, {
          getInfoFromVG: v.default.GetInfoFromVGRsp,
          GetInfoFromVG: v.default.GetInfoFromVGRsp,
          getInfoFromCdnVG: v.default.GetInfoFromVGRsp,
          VideoGatewayProxy2VGPing: v.default.VideoGatewayProxy2VGPingRsp,
          doLaunch: v.default.LiveLaunchRsp,
          getLivingInfo: v.default.GetLivingInfoRsp,
          getCdnTokenInfoEx: v.default.GetCdnTokenExRsp,
          getLivingStreamInfo: v.default.GetLivingStreamInfoRsp,
          getP2PStreamInfo: v.default.GetP2PStreamInfoRsp,
          getP2PStreamTokenInfoEx: v.default.GetP2PStreamTokenExRsp
      }),
      (0,
      n.default)(S.NoLog, {
          8102: 1,
          8103: 1,
          1025601: 1,
          getInfoFromVG: 1,
          GetInfoFromVG: 1,
          getInfoFromCdnVG: 1,
          getInfoFromVGM: 1,
          getCdnTokenInfoEx: 1,
          videoClientReport: 1
      });
      var g = new T;
      t.default = g
  }
  , function(e, t, i) {
      e.exports = {
          default: i(239),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      t.__esModule = !0;
      var s, a = i(58), n = (s = a) && s.__esModule ? s : {
          default: s
      };
      t.default = function(e, t) {
          if (!e)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !t || "object" !== (void 0 === t ? "undefined" : (0,
          n.default)(t)) && "function" != typeof t ? e : t
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      t.__esModule = !0;
      var a = s(i(242))
        , n = s(i(246))
        , r = s(i(58));
      t.default = function(e, t) {
          if ("function" != typeof t && null !== t)
              throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : (0,
              r.default)(t)));
          e.prototype = (0,
          n.default)(t && t.prototype, {
              constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
              }
          }),
          t && (a.default ? (0,
          a.default)(e, t) : e.__proto__ = t)
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = (s(i(34)),
      s(i(93)))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.version = 0,
              this.streamNames = [],
              this.fuzzyQueryKeys = [],
              this.currentInfo = new u.default,
              this.appid = 0,
              this.clientAppid = 0,
              this.clientType = 0,
              this.ip = 0,
              this.sendTime = 0,
              this.sdkVersion = 0,
              this.imsi = 0,
              this.useCase = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PAudienceGetProxyListReq),
                  e.pushUInt64(this.uid),
                  e.pushUInt8(this.version),
                  e.pushUInt32(this.streamNames.length),
                  this.streamNames.forEach(function(t) {
                      e.pushString(t)
                  }),
                  e.pushUInt32(this.fuzzyQueryKeys.length),
                  this.fuzzyQueryKeys.forEach(function(t) {
                      e.pushUint8ArrayWithoutLen(t.marshall())
                  }),
                  e.pushUint8ArrayWithoutLen(this.currentInfo.marshall()),
                  e.pushUInt8(this.appid),
                  e.pushUInt32(this.clientAppid),
                  e.pushUInt32(this.clientType),
                  e.pushUInt32(this.ip),
                  e.pushUInt32(this.sendTime),
                  e.pushUInt32(this.sdkVersion),
                  e.pushUInt64(this.imsi),
                  e.pushUInt8(this.useCase),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          VIDEO_ACCESS_MODE: 0,
          AUDIO_ACCESS_MODE: 1,
          VIDEO_JIT_BUFLEN: 2,
          AUDIO_JIT_BUFLEN: 3,
          VIDEO_P2P_MODE: 4,
          AUDIO_PUSH_LEN: 5,
          VIDEO_JIT_MAX_BUFLEN: 6,
          JIT_DOWN_MODE: 7,
          JIT_UP_MODE: 8,
          PUSH_GOP: 9,
          JIT_ADJUST_MODE: 10,
          P2P_MAX_SUB_NUM: 50
      }
  }
  , function(e, t) {
      e.exports = function(e, t) {
          return {
              enumerable: !(1 & e),
              configurable: !(2 & e),
              writable: !(4 & e),
              value: t
          }
      }
  }
  , function(e, t, i) {
      e.exports = {
          default: i(223),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      i(230);
      for (var s = i(21), a = i(27), n = i(38), r = i(15)("toStringTag"), o = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","), u = 0; u < o.length; u++) {
          var l = o[u]
            , d = s[l]
            , h = d && d.prototype;
          h && !h[r] && a(h, r, l),
          n[l] = n.Array
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = function() {
          function e(t) {
              var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
              (0,
              n.default)(this, e),
              this.view = t,
              this.pos = 0,
              this.len = 0,
              this.uri = 0,
              this.resCode = 0,
              !0 === i && (this.len = this.popUInt32(),
              this.uri = this.popUInt32(),
              this.resCode = this.popUInt16())
          }
          return (0,
          r.default)(e, [{
              key: "bytesAvailable",
              value: function() {
                  return this.view.byteLength - this.pos
              }
          }, {
              key: "popBool",
              value: function() {
                  return 1 == this.popUInt8()
              }
          }, {
              key: "popUInt8",
              value: function() {
                  if (this.pos + 1 > this.view.byteLength)
                      return 0;
                  var e = this.view.getUint8(this.pos);
                  return this.pos++,
                  e
              }
          }, {
              key: "popUInt16",
              value: function() {
                  if (this.pos + 2 > this.view.byteLength)
                      return 0;
                  var e = this.view.getUint16(this.pos, !0);
                  return this.pos += 2,
                  e
              }
          }, {
              key: "popUInt32",
              value: function() {
                  if (this.pos + 4 > this.view.byteLength)
                      return 0;
                  var e = this.view.getUint32(this.pos, !0);
                  return this.pos += 4,
                  e
              }
          }, {
              key: "popUInt64",
              value: function() {
                  if (this.pos + 8 > this.view.byteLength)
                      return 0;
                  var e = this.view.getUint32(this.pos, !0);
                  this.pos += 4;
                  var t = this.view.getUint32(this.pos, !0);
                  return this.pos += 4,
                  4294967296 * t + e
              }
          }, {
              key: "popUint8Array",
              value: function() {
                  var e = this.popUInt16();
                  if (this.pos + e > this.view.byteLength)
                      return null;
                  var t = new Uint8Array(this.view.buffer,this.pos,e);
                  return this.pos += e,
                  t.slice()
              }
          }, {
              key: "popUint8Array32",
              value: function() {
                  var e = this.popUInt32();
                  if (this.pos + e > this.view.byteLength)
                      return null;
                  var t = new Uint8Array(this.view.buffer,this.pos,e);
                  return this.pos += e,
                  t.slice()
              }
          }, {
              key: "popUInt64Vector",
              value: function() {
                  var e = this.popUInt32();
                  if (this.pos + 8 * e > this.view.byteLength)
                      return null;
                  for (var t = [], i = 0; i < e; i++)
                      t.push(this.popUInt64());
                  return t
              }
          }, {
              key: "popUInt32Vector",
              value: function() {
                  var e = this.popUInt32();
                  if (this.pos + 4 * e > this.view.byteLength)
                      return null;
                  for (var t = [], i = 0; i < e; i++)
                      t.push(this.popUInt32());
                  return t
              }
          }, {
              key: "popUInt16Vector",
              value: function() {
                  var e = this.popUInt32();
                  if (this.pos + 2 * e > this.view.byteLength)
                      return null;
                  for (var t = [], i = 0; i < e; i++)
                      t.push(this.popUInt16());
                  return t
              }
          }, {
              key: "popString",
              value: function() {
                  var e = this.popUInt16();
                  if (this.pos + e > this.view.byteLength)
                      return null;
                  for (var t = [], i = 0; i < e; ++i)
                      t[i] = String.fromCharCode(this.popUInt8());
                  return t.join("")
              }
          }, {
              key: "popMapKey8Val32",
              value: function() {
                  for (var e = this.popUInt32(), t = new a.default, i = 0; i < e; i++) {
                      var s = this.popUInt8()
                        , n = this.popUInt32();
                      t.set(s, n)
                  }
                  return t
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(3))
        , u = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.ip = 0,
              this.tcpPorts = [],
              this.udpPorts = [],
              this.videoProxyInfo = new a.default
          }
          return (0,
          r.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default(!1);
                  return "number" == typeof this.ip ? e.pushUInt32(this.ip) : e.pushUInt32(this.ip2uint(this.ip)),
                  e.pushUInt16Vector(this.tcpPorts),
                  e.pushUInt16Vector(this.udpPorts),
                  e.pushUInt32(this.videoProxyInfo.size),
                  this.videoProxyInfo.forEach(function(t, i) {
                      e.pushUInt8(i),
                      e.pushUInt32(t)
                  }),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.ip = this.uint2ip(e.popUInt32()),
                  this.tcpPorts = e.popUInt16Vector(),
                  this.udpPorts = e.popUInt16Vector(),
                  this.videoProxyInfo.clear();
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = e.popUInt8()
                        , a = e.popUInt32();
                      this.videoProxyInfo.set(s, a)
                  }
                  return this
              }
          }, {
              key: "ip2uint",
              value: function(e) {
                  for (var t = 0, i = e.split("."), s = 0; s < i.length; s++)
                      t |= Number(i[s]) << 8 * s;
                  return t < 0 && (t += 4294967296),
                  t
              }
          }, {
              key: "uint2ip",
              value: function(e) {
                  return (255 & e) + "." + (e >> 8 & 255) + "." + (e >> 16 & 255) + "." + (e >> 24 & 255)
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          STREAM_VIDEO_RAW: 0,
          STREAM_VIDEO_TRANSCODE: 1,
          STREAM_VIDEO_RTMP_RAW: 2,
          STREAM_VIDEO_RTMP_TRANSCODE: 3,
          STRAEM_TYPE_AUDIO_START: 32,
          STREAM_AUDIO_RAW: 32,
          STREAM_AUDIO_TRANSCODE: 33,
          STREAM_AUDIO_FLV_RAW: 34,
          STREAM_AUDIO_FLV_TRANSCODE: 35,
          STREAM_AUDIO_RTMP_RAW: 36,
          STREAM_AUDIO_RTMP_TRANSCODE: 37,
          STREAM_AUDIO_ALL_SID: 39,
          STREAM_TYPE_UNKNOWN: 255
      }
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          STREAM_UNKNOWN: 0,
          AUDIO_SPEEX: 0,
          AUDIO_AACPLUS: 1,
          AUDIO_SILK: 2,
          AUDIO_AAC_44100HZ_STEREO_128KBPS: 35,
          AUDIO_AAC_44100HZ_STEREO_160KBPS: 36,
          AUDIO_AAC_44100HZ_STEREO_192KBPS: 37,
          AUDIO_ELD_AAC_44100HZ_STEREO: 38,
          AUDIO_ELD_AAC_SBR_44100HZ_STEREO: 39,
          AUDIO_MP3: 50,
          AUDIO_NELLYMOSER: 54,
          VIDEO_264_START: 401,
          VIDEO_H264_100K: 401,
          VIDEO_H264_500K: 405,
          VIDEO_H264_800K: 408,
          VIDEO_H264_1200K: 412,
          VIDEO_H264_1500K: 415,
          VIDEO_H264_2000K: 420,
          VIDEO_H264_3000K: 430,
          VIDEO_H264_4000K: 440,
          VIDEO_H264_6000K: 460,
          VIDEO_H264_8000K: 480,
          VIDEO_H264_END: 480,
          VIDEO_265_START: 503,
          VIDEO_H265_300K: 503,
          VIDEO_H265_500K: 505,
          VIDEO_H265_800K: 508,
          VIDEO_H265_1200K: 512,
          VIDEO_H265_1500K: 515,
          VIDEO_H265_2000K: 520,
          VIDEO_H265_3000K: 530,
          VIDEO_H265_4000K: 540,
          VIDEO_H265_6000K: 560,
          VIDEO_H265_8000K: 580,
          VIDEO_H265_END: 580
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(3))
        , u = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.ip = 0,
              this.tcpPorts = [],
              this.udpPorts = [],
              this.videoProxyInfo = new a.default
          }
          return (0,
          r.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default(!1);
                  return "number" == typeof this.ip ? e.pushUInt32(this.ip) : e.pushUInt32(this.ip2uint(this.ip)),
                  e.pushUInt16Vector(this.tcpPorts),
                  e.pushUInt16Vector(this.udpPorts),
                  e.pushUInt32(this.videoProxyInfo.size),
                  this.videoProxyInfo.forEach(function(t, i) {
                      e.pushUInt8(i),
                      e.pushUInt32(t)
                  }),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.ip = this.uint2ip(e.popUInt32()),
                  this.tcpPorts = e.popUInt16Vector(),
                  this.udpPorts = e.popUInt16Vector(),
                  this.videoProxyInfo.clear();
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = e.popUInt8()
                        , a = e.popUInt32();
                      this.videoProxyInfo.set(s, a)
                  }
                  return this
              }
          }, {
              key: "ip2uint",
              value: function(e) {
                  for (var t = 0, i = e.split("."), s = 0; s < i.length; s++)
                      t |= Number(i[s]) << 8 * s;
                  return t < 0 && (t += 4294967296),
                  t
              }
          }, {
              key: "uint2ip",
              value: function(e) {
                  return (255 & e) + "." + (e >> 8 & 255) + "." + (e >> 16 & 255) + "." + (e >> 24 & 255)
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      var s = i(114)
        , a = i(75);
      e.exports = Object.keys || function(e) {
          return s(e, a)
      }
  }
  , function(e, t, i) {
      var s = i(72)
        , a = Math.min;
      e.exports = function(e) {
          return e > 0 ? a(s(e), 9007199254740991) : 0
      }
  }
  , function(e, t) {
      e.exports = !0
  }
  , function(e, t) {
      var i = 0
        , s = Math.random();
      e.exports = function(e) {
          return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++i + s).toString(36))
      }
  }
  , function(e, t) {
      t.f = {}.propertyIsEnumerable
  }
  , function(e, t, i) {
      function a(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      t.__esModule = !0;
      var n = a(i(224))
        , r = a(i(232))
        , o = "function" == typeof r.default && "symbol" == s(n.default) ? function(e) {
          return void 0 === e ? "undefined" : s(e)
      }
      : function(e) {
          return e && "function" == typeof r.default && e.constructor === r.default && e !== r.default.prototype ? "symbol" : void 0 === e ? "undefined" : s(e)
      }
      ;
      t.default = "function" == typeof r.default && "symbol" === o(n.default) ? function(e) {
          return void 0 === e ? "undefined" : o(e)
      }
      : function(e) {
          return e && "function" == typeof r.default && e.constructor === r.default && e !== r.default.prototype ? "symbol" : void 0 === e ? "undefined" : o(e)
      }
  }
  , function(e, t, i) {
      var s = i(28)
        , a = i(228)
        , n = i(75)
        , r = i(73)("IE_PROTO")
        , o = function() {}
        , u = function() {
          var e, t = i(113)("iframe"), s = n.length;
          for (t.style.display = "none",
          i(229).appendChild(t),
          t.src = "javascript:",
          (e = t.contentWindow.document).open(),
          e.write("<script>document.F=Object<\/script>"),
          e.close(),
          u = e.F; s--; )
              delete u.prototype[n[s]];
          return u()
      };
      e.exports = Object.create || function(e, t) {
          var i;
          return null !== e ? (o.prototype = s(e),
          i = new o,
          o.prototype = null,
          i[r] = e) : i = u(),
          void 0 === t ? i : a(i, t)
      }
  }
  , function(e, t, i) {
      var s = i(18).f
        , a = i(32)
        , n = i(15)("toStringTag");
      e.exports = function(e, t, i) {
          e && !a(e = i ? e : e.prototype, n) && s(e, n, {
              configurable: !0,
              value: t
          })
      }
  }
  , function(e, t, i) {
      var s = i(30)
        , a = i(125)
        , n = i(126)
        , r = i(28)
        , o = i(54)
        , u = i(83)
        , l = {}
        , d = {};
      (t = e.exports = function(e, t, i, h, f) {
          var c, p, v, y, m = f ? function() {
              return e
          }
          : u(e), _ = s(i, h, t ? 2 : 1), P = 0;
          if ("function" != typeof m)
              throw TypeError(e + " is not iterable!");
          if (n(m)) {
              for (c = o(e.length); c > P; P++)
                  if ((y = t ? _(r(p = e[P])[0], p[1]) : _(e[P])) === l || y === d)
                      return y
          } else
              for (v = m.call(e); !(p = v.next()).done; )
                  if ((y = a(v, _, p.value, t)) === l || y === d)
                      return y
      }
      ).BREAK = l,
      t.RETURN = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.subNum = 0,
              this.maxSeqs = [],
              this.streamDelays = []
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function(e) {
                  e.pushUInt8(this.subNum),
                  e.pushUInt64Vector(this.maxSeqs),
                  e.pushUInt16Vector(this.streamDelays)
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.subNum = e.popUInt8(),
                  this.maxSeqs = e.popUInt64Vector(),
                  this.streamDelays = e.popUInt16Vector()
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(2))
        , u = s(i(3))
        , l = (s(i(9)),
      s(i(99)))
        , d = s(i(92))
        , h = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.version = 0,
              this.uid = 0,
              this.streamGroupIds = [],
              this.clientAppid = 0,
              this.clientType = 0,
              this.loginStamp = 0,
              this.videoGroupId = 0,
              this.tcpId = 0,
              this.commandType = 0,
              this.fastAccessInterval = 0,
              this.cookie = "",
              this.localIps = [],
              this.localPort = 0,
              this.vpToken = new l.default,
              this.apToken = new d.default,
              this.token = "",
              this.sdkVersion = 0,
              this.tokenVersion = 0,
              this.tokens = new a.default,
              this.audioCodecType = [],
              this.serviceType = 0
          }
          return (0,
          r.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new u.default;
                  return e.setUri(o.default.PLoginVideoProxyUniformly),
                  e.pushUInt8(this.version),
                  e.pushUInt64(this.uid),
                  e.pushUInt32(this.streamGroupIds.length),
                  this.streamGroupIds.forEach(function(t) {
                      e.pushUint8ArrayWithoutLen(t.marshall())
                  }),
                  e.pushUInt32(this.clientAppid),
                  e.pushUInt8(this.clientType),
                  e.pushUInt32(this.loginStamp),
                  e.pushUInt32(this.videoGroupId),
                  e.pushUInt8(this.tcpId),
                  e.pushUInt8(this.commandType),
                  e.pushUInt32(this.fastAccessInterval),
                  e.pushString(this.cookie),
                  e.pushUInt32Vector(this.localIps),
                  e.pushUInt16(this.localPort),
                  e.pushUint8ArrayWithoutLen(this.vpToken.marshall()),
                  e.pushUint8ArrayWithoutLen(this.apToken.marshall()),
                  e.pushString(this.token),
                  e.pushUInt32(this.sdkVersion),
                  e.pushUInt32(this.tokenVersion),
                  e.pushUInt32(this.tokens.size),
                  this.tokens.forEach(function(t, i) {
                      e.pushUint8ArrayWithoutLen(i.marshall()),
                      e.pushString(t)
                  }),
                  e.pushUInt32Vector(this.audioCodecType),
                  e.pushUInt32(this.serviceType),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = h
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = s(i(9))
        , l = s(i(8))
        , d = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupId = new u.default,
              this.uid = 0,
              this.seqNum = 0,
              this.priority = 0,
              this.lastKeyFrame = 0,
              this.playTime = 0,
              this.frameNum = 0,
              this.stampc = 0,
              this.ext = 0,
              this.checkSum = 0,
              this.streamData = null,
              this.dts = l.default.UintMax,
              this.uplinkResendTimes = 0,
              this.isDownlinkResend = !1,
              this.fromPeer = !1,
              this.recvOsTime = 0
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.streamGroupId = new u.default,
                  this.uid = 0,
                  this.seqNum = 0,
                  this.priority = 0,
                  this.lastKeyFrame = 0,
                  this.playTime = 0,
                  this.frameNum = 0,
                  this.stampc = 0,
                  this.ext = 0,
                  this.checkSum = 0,
                  this.streamData = null,
                  this.uplinkResendTimes = 0,
                  this.dts = l.default.UintMax,
                  this.isDownlinkResend = !1,
                  this.fromPeer = !1,
                  this.recvOsTime = 0
              }
          }, {
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PStreamData3),
                  e.pushUint8ArrayWithoutLen(this.streamGroupId.marshall()),
                  e.pushUInt64(this.uid),
                  e.pushUInt32(this.seqNum),
                  e.pushUInt8(this.priority),
                  e.pushUInt32(this.lastKeyFrame),
                  e.pushUInt16(this.playTime),
                  e.pushUInt16(this.frameNum),
                  e.pushUInt32(this.stampc),
                  e.pushUInt32(this.ext),
                  e.pushUInt8(this.checkSum),
                  e.pushUint8Array32(this.streamData),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  return this.streamGroupId.unmarshall(e),
                  this.uid = e.popUInt64(),
                  this.seqNum = e.popUInt32(),
                  this.priority = e.popUInt8(),
                  this.lastKeyFrame = e.popUInt32(),
                  this.playTime = e.popUInt16(),
                  this.frameNum = e.popUInt16(),
                  this.stampc = e.popUInt32(),
                  this.ext = e.popUInt32(),
                  this.checkSum = e.popUInt8(),
                  this.streamData = e.popUint8Array32(),
                  this
              }
          }, {
              key: "getFrameTime",
              value: function() {
                  if (this.dts !== l.default.UintMax)
                      return this.dts;
                  if (!this.isFirstSeq)
                      return l.default.UintMax;
                  var e = 0;
                  0 === this.frameType && (e = this.streamData[0],
                  e += this.streamData[1] << 8,
                  e += this.streamData[2] << 16,
                  e += this.streamData[3] << 24 >>> 0,
                  e += 4);
                  var t = (255 & this.streamData[e + 7]) << 24 >>> 0
                    , i = (255 & this.streamData[e + 4]) << 16
                    , s = (255 & this.streamData[e + 5]) << 8
                    , a = 255 & this.streamData[e + 6];
                  return this.dts = t + i + s + a,
                  this.dts
              }
          }, {
              key: "isVideo",
              get: function() {
                  return this.streamGroupId.isVideoStream
              }
          }, {
              key: "isAudio",
              get: function() {
                  return this.streamGroupId.isAudioStream
              }
          }, {
              key: "frameType",
              get: function() {
                  return 3 & this.priority
              }
          }, {
              key: "isFirstSeq",
              get: function() {
                  return 0 != (4096 & this.playTime)
              }
          }, {
              key: "isUplinkResend",
              get: function() {
                  return 0 != (32768 & this.playTime)
              }
          }, {
              key: "isFastAccessPacket",
              get: function() {
                  return 0 != (512 & this.playTime)
              }
          }, {
              key: "isForceSubscribePacket",
              get: function() {
                  return 0 != (1024 & this.playTime)
              }
          }, {
              key: "isRawStreamInput",
              get: function() {
                  return 0 != (16384 & this.playTime)
              }
          }, {
              key: "isServerResend",
              get: function() {
                  return 0 != (8192 & this.playTime)
              }
          }, {
              key: "hasCheckSum",
              get: function() {
                  return 0 != (2048 & this.playTime)
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.stampc = 0,
              this.loginStamp = 0,
              this.uplinkBw = 0,
              this.availPeers = 0,
              this.bPunched = !1,
              this.tcpEstableIds = 0,
              this.tcpId = 0,
              this.vipUser = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PVideoProxyPing3),
                  e.pushUInt64(this.uid),
                  e.pushUInt32(this.stampc),
                  e.pushUInt32(this.loginStamp),
                  e.pushUInt32(this.uplinkBw),
                  e.pushUInt16(this.availPeers),
                  e.pushBool(this.bPunched),
                  e.pushUInt32(this.tcpEstableIds),
                  e.pushUInt8(this.tcpId),
                  e.pushUInt8(this.vipUser),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = (s(i(10)),
      s(i(6)))
        , u = s(i(267))
        , l = s(i(198))
        , d = s(i(196))
        , h = s(i(272))
        , f = s(i(273))
        , c = 0
        , p = function() {
          function e(t) {
              var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "flv"
                , s = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2]
                , n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
              (0,
              a.default)(this, e),
              this.handler = t,
              this.videoType = i,
              this.isLive = s,
              this.isPureAudio = n,
              this._num_ = ++c,
              this.remuxer = new d.default(this),
              this.parser = "ts" === i ? new u.default(this,this.remuxer) : new l.default(this,this.remuxer),
              this.JITTER_BUFMIN = 1e3,
              this.JITTER_BUFLEN = 4e3,
              this.JITTER_BUFMAX = 8e3,
              this.userPaused = !1,
              this.playing = !1,
              this.lastPlayTime = 0,
              this.lastCheckPlayTime = 0,
              this.paused = !1,
              this.pausedTs = 0,
              this.maxGop = 0,
              this.playStartTime = 0,
              this.delayReset = !1,
              this.isPlayerError = !1,
              this.isErrorEvent = !1,
              this.metadata = {},
              this.tryPlayAgainTimout = 0,
              this.onUpdateErrorBind = this.onUpdateError.bind(this),
              this.onAudioUpdateEndBind = this.onAudioUpdateEnd.bind(this),
              this.onVideoUpdateEndBind = this.onVideoUpdateEnd.bind(this),
              this.onMediaSourceOpenBind = this.onMediaSourceOpen.bind(this),
              this.onVideoErrorBind = this.onVideoError.bind(this),
              this.mediaSource = new MediaSource,
              this.mediaSource.addEventListener("sourceopen", this.onMediaSourceOpenBind),
              this.h264SeiInfos = new h.default(this),
              this.scriptVolumeInfos = new f.default(this),
              this.video = document.createElement("video"),
              this.video.src = URL.createObjectURL(this.mediaSource),
              this.video.addEventListener("error", this.onVideoErrorBind),
              this.audioSourceBuffer = null,
              this.videoSourceBuffer = null,
              this.audioCodec = null,
              this.videoCodec = null,
              this.audioSegments = [],
              this.videoSegments = [],
              this.width = 1280,
              this.height = 720,
              this.playbackrateChangeAccess = !0,
              this.enableLowLatency = !1,
              this.printJitter = !!Number(localStorage._printJitter);
              var o = navigator.userAgent.toLowerCase();
              this.isAndroid = -1 !== o.indexOf("Android"),
              -1 == r.default.getLevel() && window.chrome && (window.chrome.mse = this)
          }
          return (0,
          n.default)(e, [{
              key: "destroy",
              value: function() {
                  if (r.default.log("MSEPlayer.destroy"),
                  this.playing = !1,
                  this.lastPlayTime = 0,
                  this.playStartTime = 0,
                  this.lastCheckPlayTime = 0,
                  this.handler && (this.handler.onVideoStop(this.video, !!this.videoSourceBuffer),
                  this.handler = null),
                  this.remuxer.destroy(),
                  this.parser.destroy(),
                  this.audioCodec = null,
                  this.videoCodec = null,
                  this.audioSegments = [],
                  this.videoSegments = [],
                  this.audioSourceBuffer && (this.audioSourceBuffer.removeEventListener("updateend", this.onAudioUpdateEndBind),
                  this.audioSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                  this.audioSourceBuffer = null),
                  this.videoSourceBuffer && (this.videoSourceBuffer.removeEventListener("updateend", this.onVideoUpdateEndBind),
                  this.videoSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                  this.videoSourceBuffer = null),
                  this.mediaSource) {
                      this.mediaSource.removeEventListener("sourceopen", this.onMediaSourceOpenBind);
                      for (var e = this.mediaSource.sourceBuffers; e.length; )
                          this.mediaSource.removeSourceBuffer(e[0]);
                      this.mediaSource = this.onMediaSourceOpenBind = null
                  }
                  this.onAudioUpdateEndBind = this.onVideoUpdateEndBind = this.onUpdateErrorBind = null,
                  this.video && (this.video.removeEventListener("error", this.onVideoErrorBind),
                  this.video.pause(),
                  this.video.src = "",
                  this.video = null),
                  this.playbackrateChangeAccess = !0
              }
          }, {
              key: "reset",
              value: function() {
                  if (r.default.log("MSEPlayer.reset"),
                  this.handler.onVideoStop(this.video, !!this.videoSourceBuffer),
                  this.JITTER_BUFMIN = 1e3,
                  this.JITTER_BUFLEN = 4e3,
                  this.JITTER_BUFMAX = 8e3,
                  this.userPaused = !1,
                  this.playing = !1,
                  this.lastPlayTime = 0,
                  this.playStartTime = 0,
                  this.lastCheckPlayTime = 0,
                  this.audioCodec = null,
                  this.videoCodec = null,
                  this.audioSegments = [],
                  this.videoSegments = [],
                  this.metadata = {},
                  this.paused && this.handler.onPlayResume(o.default.now()),
                  this.paused = !1,
                  this.pausedTs = 0,
                  this.maxGop = 0,
                  clearTimeout(this.tryPlayAgainTimout),
                  this.audioSourceBuffer && (this.audioSourceBuffer.removeEventListener("updateend", this.onAudioUpdateEndBind),
                  this.audioSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                  this.audioSourceBuffer = null),
                  this.videoSourceBuffer && (this.videoSourceBuffer.removeEventListener("updateend", this.onVideoUpdateEndBind),
                  this.videoSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                  this.videoSourceBuffer = null),
                  this.mediaSource) {
                      this.mediaSource.removeEventListener("sourceopen", this.onMediaSourceOpenBind);
                      for (var e = this.mediaSource.sourceBuffers; e.length; )
                          this.mediaSource.removeSourceBuffer(e[0])
                  }
                  this.mediaSource = new MediaSource,
                  this.mediaSource.addEventListener("sourceopen", this.onMediaSourceOpenBind),
                  this.video && (this.video.removeEventListener("error", this.onVideoErrorBind),
                  this.video.pause(),
                  this.video.src = "",
                  this.video = null),
                  this.video = document.createElement("video"),
                  this.video.src = URL.createObjectURL(this.mediaSource),
                  this.video.addEventListener("error", this.onVideoErrorBind),
                  this.playbackrateChangeAccess = !0
              }
          }, {
              key: "setPushGop",
              value: function(e) {
                  this.parser.setPushGop(e)
              }
          }, {
              key: "setDeleteH264Aud",
              value: function(e) {
                  this.parser.setDeleteH264Aud(e)
              }
          }, {
              key: "getPlayStat",
              value: function() {
                  return this.parser.getPlayStat()
              }
          }, {
              key: "getPlayVideo",
              value: function() {
                  return this.video
              }
          }, {
              key: "getBufferLen",
              value: function() {
                  var e = 0;
                  if (this.video) {
                      var t = this.video.buffered;
                      t.length > 0 && (e = 1e3 * (t.end(t.length - 1) - this.video.currentTime) >> 0)
                  }
                  return e
              }
          }, {
              key: "getParserBufLen",
              value: function() {
                  return this.parser.getParserBufLen()
              }
          }, {
              key: "getCurrentDts",
              value: function() {
                  return this.remuxer.getInitDts() < 0 ? 0 : Math.round(1e3 * this.video.currentTime) + this.remuxer.getInitDts()
              }
          }, {
              key: "getCurrentTime",
              value: function() {
                  return Math.round(1e3 * this.video.currentTime)
              }
          }, {
              key: "getCurrentRealTime",
              value: function() {
                  return this.video ? Math.round(1e3 * this.video.currentTime) + this.remuxer.getInitDts() : 0
              }
          }, {
              key: "appendFlv",
              value: function(e) {
                  this.parser.parseFlv(e)
              }
          }, {
              key: "appendTs",
              value: function(e) {
                  this.parser.parseTs(e)
              }
          }, {
              key: "saveH264SeiData",
              value: function(e, t) {
                  this.h264SeiInfos.add(e, t)
              }
          }, {
              key: "saveScriptVolumeData",
              value: function(e, t) {
                  this.scriptVolumeInfos.add(e, t)
              }
          }, {
              key: "setPlaybackrateAccess",
              value: function(e) {
                  this.playbackrateChangeAccess = e
              }
          }, {
              key: "checkBuffer",
              value: function() {
                  if (!this.video.paused) {
                      var e = o.default.now()
                        , t = this.video.buffered
                        , i = t.length
                        , s = this.getBufferLen();
                      if (0 === this.video.currentTime && 0 !== this.lastPlayTime)
                          return r.default.warn("MSEPlayer.checkBuffer onPlayerError(false) lastPlayTime=" + this.lastPlayTime + " bufLen=" + s),
                          this._onPlayerError(!1),
                          void (this.lastPlayTime = 0);
                      if (this.lastPlayTime = this.video.currentTime,
                      0 !== this.playStartTime && e > this.playStartTime + 5e3 && (s > 5e3 || 0 === s))
                          if (0 == this.video.currentTime && s > 1e3)
                              r.default.log("####### currentTime=0 ++ bufLen=" + s),
                              this.video.play();
                          else if (this.playStartTime = 0,
                          0 === this.video.currentTime && !this.isAndroid)
                              return r.default.warn("MSEPlayer.checkBuffer onPlayerError(true) playTime=" + this.video.currentTime + " bufLen=" + s),
                              this._onErrorEvent(6),
                              void this._onPlayerError(!0);
                      i && this.video.currentTime - t.start(0) > 20 && (this.audioSourceBuffer && !this.audioSourceBuffer.updating && this.audioSourceBuffer.remove(0, this.video.currentTime - 10),
                      this.videoSourceBuffer && !this.videoSourceBuffer.updating && this.videoSourceBuffer.remove(0, this.video.currentTime - 10))
                  }
              }
          }, {
              key: "_onPlayerError",
              value: function(e) {
                  this.isPlayerError || (this.isPlayerError = !0,
                  this.handler.onPlayerError(e))
              }
          }, {
              key: "_onErrorEvent",
              value: function(e) {
                  this.isErrorEvent || (this.isErrorEvent = !0,
                  this.handler.onErrorEvent && this.handler.onErrorEvent({
                      type: e
                  }))
              }
          }, {
              key: "onAvcCfgChange",
              value: function() {
                  return r.default.log("MSEPlayer.onAvcCfgChange"),
                  this.getBufferLen() < 500 ? (r.default.log("MSEPlayer.onAvcCfgChange reset player"),
                  this.reset(),
                  this.delayReset = !1,
                  !1) : (this.delayReset = !0,
                  !0)
              }
          }, {
              key: "onRestart",
              value: function() {
                  r.default.log("MSEPlayer.onRestart"),
                  this.reset()
              }
          }, {
              key: "onGop",
              value: function(e) {
                  this.handler.onGop && this.handler.onGop(e),
                  e > this.maxGop && (this.maxGop = e,
                  r.default.log("MSEPlayer.onGop update maxGop=" + this.maxGop))
              }
          }, {
              key: "getMaxGop",
              value: function() {
                  return this.maxGop
              }
          }, {
              key: "setVolume",
              value: function(e) {
                  this.video && (this.video.volume = e)
              }
          }, {
              key: "setEnableLowLatency",
              value: function(e) {
                  this.enableLowLatency = e
              }
          }, {
              key: "getVolume",
              value: function() {
                  return this.video ? this.video.volume : -1
              }
          }, {
              key: "setMuted",
              value: function(e) {
                  this.video && (this.video.muted = e,
                  r.default.log("MSEPlayer.setMuted " + e + " hasVideo=" + !!this.videoSourceBuffer + " hasAudio=" + !!this.audioSourceBuffer))
              }
          }, {
              key: "getMuted",
              value: function() {
                  return this.video ? this.video.muted : -1
              }
          }, {
              key: "setResolution",
              value: function(e, t) {
                  r.default.log("MSEPlayer.setResolution w/h=" + e + "/" + t),
                  this.width = e,
                  this.height = t
              }
          }, {
              key: "getWidth",
              value: function() {
                  return this.width
              }
          }, {
              key: "getHeight",
              value: function() {
                  return this.height
              }
          }, {
              key: "onInitSegment",
              value: function(e) {
                  e.audioCodec && (this.audioCodec = e.audioCodec),
                  e.videoCodec && (this.videoCodec = e.videoCodec),
                  this.isMediaSourceOpen && this.initSourceBuffer(),
                  e.audioMoov && this.audioSegments.push(e.audioMoov),
                  e.videoMoov && this.videoSegments.push(e.videoMoov),
                  this.playStartTime = 0
              }
          }, {
              key: "onFragParsing",
              value: function(e) {
                  "audio" === e.type ? this.audioSegments.push(e.data) : "video" === e.type && this.videoSegments.push(e.data)
              }
          }, {
              key: "onFragParsed",
              value: function() {
                  this.audioSourceBuffer && this.appendBuffer("audio"),
                  this.videoSourceBuffer && this.appendBuffer("video"),
                  this.triggerPlay()
              }
          }, {
              key: "initSourceBuffer",
              value: function() {
                  if (this.audioCodec && !this.audioSourceBuffer) {
                      r.default.log("MSEPlayer.initSourceBuffer audio codec=" + this.audioCodec);
                      try {
                          this.audioSourceBuffer = this.mediaSource.addSourceBuffer("video/mp4;codecs=" + this.audioCodec),
                          this.audioSourceBuffer.addEventListener("updateend", this.onAudioUpdateEndBind),
                          this.audioSourceBuffer.addEventListener("error", this.onUpdateErrorBind)
                      } catch (e) {
                          return r.default.warn("MSEPlayer.initSourceBuffer audio err=" + e.message),
                          this._onErrorEvent(4),
                          void this._onPlayerError(!0)
                      }
                  }
                  if (this.videoCodec && !this.videoSourceBuffer) {
                      r.default.log("MSEPlayer.initSourceBuffer video codec=" + this.videoCodec);
                      try {
                          this.videoSourceBuffer = this.mediaSource.addSourceBuffer("video/mp4;codecs=" + this.videoCodec),
                          this.videoSourceBuffer.addEventListener("updateend", this.onVideoUpdateEndBind),
                          this.videoSourceBuffer.addEventListener("error", this.onUpdateErrorBind)
                      } catch (e) {
                          r.default.warn("MSEPlayer.initSourceBuffer video err=" + e.message),
                          this._onErrorEvent(5),
                          this._onPlayerError(!0)
                      }
                  }
              }
          }, {
              key: "appendBuffer",
              value: function(e) {
                  if (0 != this.mediaSource.sourceBuffers.length && !this.isPlayerError)
                      if ("audio" == e) {
                          if (this.audioSegments.length > 0 && this.audioSourceBuffer && !this.audioSourceBuffer.updating) {
                              var t = this.audioSegments.shift();
                              try {
                                  this.audioSourceBuffer.appendBuffer(t)
                              } catch (e) {
                                  r.default.warn("MSEPlayer.appendBuffer audio err=" + e.message),
                                  this._onErrorEvent(7),
                                  this._onPlayerError(!0)
                              }
                          }
                      } else {
                          if ("video" != e)
                              throw new Error("MSEPlayer.appendBuffer type error! Valide type is audio or video.");
                          if (this.videoSegments.length > 0 && this.videoSourceBuffer && !this.videoSourceBuffer.updating) {
                              var i = this.videoSegments.shift();
                              try {
                                  this.videoSourceBuffer.appendBuffer(i)
                              } catch (e) {
                                  r.default.warn("MSEPlayer.appendBuffer video err=" + e.message),
                                  this._onErrorEvent(8),
                                  this._onPlayerError(!0)
                              }
                          }
                      }
              }
          }, {
              key: "triggerPlay",
              value: function() {
                  if (!this.playing && this.isMediaSourceOpen) {
                      this.playing = !0,
                      this.playStartTime = o.default.now();
                      var e = !!this.videoSourceBuffer;
                      this.video.play(),
                      this.handler.onPlayVideo(this.video, this.width, this.height, e),
                      clearTimeout(this.tryPlayAgainTimout),
                      this.tryPlayAgainTimout = setTimeout(this.setPlayAgain.bind(this), 100)
                  }
              }
          }, {
              key: "setPlayAgain",
              value: function() {
                  this.video && this.video.play()
              }
          }, {
              key: "onH264Sei",
              value: function(e, t) {
                  this.handler.onSendSeiData(e, t, this.video.currentTime)
              }
          }, {
              key: "onScriptVolumeInfo",
              value: function(e, t) {
                  this.handler.onSendScriptVolumeInfo(e, t)
              }
          }, {
              key: "onMediaSourceOpen",
              value: function() {
                  this.mediaSource.removeEventListener("sourceopen", this.onMediaSourceOpenBind),
                  (this.audioSegments.length > 0 || this.videoSegments.length > 0) && (this.initSourceBuffer(),
                  this.appendBuffer("audio"),
                  this.appendBuffer("video"),
                  this.triggerPlay())
              }
          }, {
              key: "onAudioUpdateEnd",
              value: function() {
                  this.appendBuffer("audio"),
                  this.checkAppendOver()
              }
          }, {
              key: "onVideoUpdateEnd",
              value: function() {
                  this.appendBuffer("video"),
                  this.checkAppendOver()
              }
          }, {
              key: "checkAppendOver",
              value: function() {
                  0 === this.videoSegments.length && 0 === this.audioSegments.length && (this.videoSourceBuffer && this.videoSourceBuffer.updating || this.audioSourceBuffer && this.audioSourceBuffer.updating || this.handler.onSBUpdateEnd && this.handler.onSBUpdateEnd())
              }
          }, {
              key: "onUpdateError",
              value: function(e) {
                  r.default.warn("MSEPlayer.onUpdateError", e)
              }
          }, {
              key: "onVideoError",
              value: function(e) {
                  var t = "";
                  if (this.video.error) {
                      var i = this.video.error.code;
                      t = " errCode=" + i + " " + ["Unknow", "用户终止", "网络错误", "解码错误", "格式不支持"][i],
                      3 != i && 4 != i || (this._onErrorEvent(3 == i ? 1 : 2),
                      this._onPlayerError(!0),
                      localStorage.decodeabnormal = "abnormal_" + (new Date).getTime())
                  }
                  r.default.warn("MSEPlayer.onVideoError" + t)
              }
          }, {
              key: "pause",
              value: function() {
                  r.default.info("MSEPlayer.pause"),
                  this.userPaused = !0,
                  this.video && this.video.pause()
              }
          }, {
              key: "play",
              value: function() {
                  r.default.info("MSEPlayer.play"),
                  this.userPaused = !1,
                  this.video && this.video.play()
              }
          }, {
              key: "seek",
              value: function(e) {
                  this.video && (r.default.info("MSEPlayer.seek seekTime=" + e, "currentTime=" + this.video.currentTime),
                  this.video.currentTime = e)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  if (this.playing && this.isMediaSourceOpen) {
                      this.metadata.fps = this.parser.getFps();
                      var i = this.getBufferLen()
                        , s = Number(localStorage._printBufferLen);
                      if (-1 == s || s > 0 && s == this._num_) {
                          var a = Math.max(0, i / 100);
                          r.default.debug(this._getTag(), "bufLen", "-".repeat(a), i)
                      }
                      if (Number(localStorage._printMseLog) && this.audioSegments && this.videoSegments && r.default.debug("MSE aSegments=" + this.audioSegments.length + " vSegments=" + this.videoSegments.length + " bufLen=" + this.getBufferLen()),
                      !this.video.paused && !this.userPaused) {
                          if (this.isLive && t % 4 == 0 && i > 2e4 && !Number(localStorage._localFlvTest)) {
                              var n = .001 * (i - 8e3);
                              this.video.currentTime += n,
                              r.default.warn("MSEPlayer.onCheckTimer jumpTs=" + n + " bufLen=" + this.getBufferLen())
                          }
                          this.checkBuffer(),
                          this.onJitterTimer();
                          var o = this.handler.lastEmptySliceTs || 0
                            , u = o > 0 && e - o < 3e3;
                          !!this.videoSourceBuffer && this.pausedTs > 0 && e - this.pausedTs > 5e3 && !u && (r.default.warn("MSEPlayer.onCheckTimer paused 5 sec."),
                          this._onErrorEvent(3),
                          this._onPlayerError(!0))
                      }
                  }
              }
          }, {
              key: "onCheckFastTimer",
              value: function(e, t) {
                  if (this.playing && this.isMediaSourceOpen && !this.video.paused && !this.userPaused) {
                      this.checkEmptyFrames(),
                      this.checkDelayReset(),
                      this.checkSensePause(e);
                      var i = (this.handler ? this.handler.lastEmptySliceTs : 0) || 0
                        , s = i > 0 && e - i < 3e3
                        , a = !!this.videoSourceBuffer;
                      if (!this.pause500checked && a && this.pausedTs > 0 && e - this.pausedTs > 500 && !s) {
                          this.pause500checked = !0;
                          var n = this.bufferedInfo()
                            , o = n.bufferLen.toFixed(2)
                            , u = (n.nextStart - n.end).toFixed(2);
                          if (r.default.info("MSEPlayer.onCheckFastTimer paused", "bufferLen=" + o, "hole=" + u, "nextStart=" + n.nextStart.toFixed(2), "currentTime=" + this.video.currentTime),
                          this.isLive && "ts" != this.videoType) {
                              var l = Number(n.nextStart);
                              this.video && l && u > 0 && u < 3 && l - this.video.currentTime > .5 && (this.video.currentTime = l,
                              r.default.log("MSEPlayer.onCheckFastTimer try jump currentTime=" + this.video.currentTime))
                          }
                      }
                  }
              }
          }, {
              key: "checkEmptyFrames",
              value: function() {
                  this.handler.hasOwnProperty("hasEmptyFrames") && this.parser.hasEmptyFrames && (this.handler.hasEmptyFrames = this.parser.hasEmptyFrames)
              }
          }, {
              key: "checkDelayReset",
              value: function() {
                  this.delayReset && this.getBufferLen() < 500 && (r.default.log("MSEPlayer.checkDelayReset reset player"),
                  this.reset(),
                  this.parser.setPaused(!1),
                  this.delayReset = !1)
              }
          }, {
              key: "checkSensePause",
              value: function(e) {
                  var t = this.video
                    , i = t.currentTime;
                  if (0 !== this.lastCheckPlayTime)
                      if (i === this.lastCheckPlayTime) {
                          var s = this.getBufferLen();
                          this.paused ? s > 1e3 && e - this.pausedTs > 500 && (r.default.log("####### readyState=" + t.readyState + " bufLen=" + s + " rate=" + t.playbackRate),
                          t.currentTime += 1) : (this.paused = !0,
                          this.pausedTs = e,
                          r.default.log("MSEPlayer.checkSensePause readyState=" + t.readyState + " currentTime=" + i + " bufLen=" + s),
                          this.handler.onPlayPause(e, !!this.videoSourceBuffer))
                      } else
                          this.paused && (this.paused = !1,
                          this.pausedTs = 0,
                          this.pause500checked = !1,
                          this.handler.onPlayResume(e, !!this.videoSourceBuffer));
                  this.lastCheckPlayTime = i
              }
          }, {
              key: "bufferedInfo",
              value: function() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : .2
                    , t = []
                    , i = []
                    , s = void 0
                    , a = void 0
                    , n = void 0
                    , r = void 0
                    , o = void 0
                    , u = this.video.buffered;
                  for (o = 0; o < u.length; o++)
                      t.push({
                          start: u.start(o),
                          end: u.end(o)
                      });
                  for (t.sort(function(e, t) {
                      return e.start - t.start || t.end - e.end
                  }),
                  o = 0; o < t.length; o++) {
                      var l = i.length;
                      if (l) {
                          var d = i[l - 1].end;
                          t[o].start - d < e ? t[o].end > d && (i[l - 1].end = t[o].end) : i.push(t[o])
                      } else
                          i.push(t[o])
                  }
                  var h = this.video.currentTime;
                  for (o = 0,
                  s = 0,
                  a = n = h; o < i.length; o++) {
                      var f = i[o].start
                        , c = i[o].end;
                      if (h + e >= f && h < c)
                          a = f,
                          s = (n = c) - h;
                      else if (h + e < f) {
                          r = f;
                          break
                      }
                  }
                  return r || (r = n),
                  {
                      bufferLen: s,
                      start: a,
                      end: n,
                      nextStart: r
                  }
              }
          }, {
              key: "printBuffer",
              value: function(e) {
                  if (this.video) {
                      var t = this.video.buffered
                        , i = "buffered=[" + (1e3 * t.start(0) | 0) + "," + (1e3 * t.end(0) | 0) + "]"
                        , s = 1e3 * this.video.currentTime >> 0
                        , a = this.getBufferLen();
                      r.default.log("MSEPlayer.printBuffer " + e + " currentTime=" + s + " bufLen=" + a + " " + i)
                  }
              }
          }, {
              key: "onJitterTimer",
              value: function(e, t) {
                  if (this.playing && ("ts" != this.videoType || this.isLive)) {
                      var i = this.getPlayVideo();
                      if (i) {
                          var s = this.getBufferLen()
                            , a = i.playbackRate
                            , n = 0;
                          if (s < this.JITTER_BUFMIN ? n = s - this.JITTER_BUFLEN : s > this.JITTER_BUFMAX && (n = s - this.JITTER_BUFMAX),
                          this.enableLowLatency && s > 2e3)
                              i.playbackRate = 1.1;
                          else if (this.playbackrateChangeAccess)
                              if (0 == n) {
                                  if (1 != a) {
                                      if (a < 1 && s < this.JITTER_BUFLEN)
                                          return;
                                      if (a > 1 && s > this.JITTER_BUFLEN)
                                          return;
                                      i.playbackRate = 1,
                                      this.printJitter && r.default.log(this._getTag(), "JitterBuffer reset rate=1 bufLen=" + s)
                                  }
                              } else {
                                  var o = 1 + n / 1e4;
                                  if (o = Number(o.toFixed(3)),
                                  o = Math.min(o, 1.1),
                                  o = Math.max(o, .9),
                                  Math.abs(1 - o) < .03)
                                      return;
                                  if (1 != a && Math.abs(a - o) < .03)
                                      return;
                                  i.playbackRate = o > 1 ? 1 : o,
                                  this.printJitter && r.default.log(this._getTag(), "JitterBuffer adjust=" + n + " " + a + "->" + o + " bufLen=" + s)
                              }
                          else
                              i.playbackRate = 1
                      }
                  }
              }
          }, {
              key: "setJitter",
              value: function() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3e3
                    , t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e3
                    , i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5e3;
                  e < t && (e = t + 1e3),
                  i < e && (i = e + 2e3),
                  this.JITTER_BUFLEN = e,
                  this.JITTER_BUFMIN = t,
                  this.JITTER_BUFMAX = i,
                  r.default.info(this._getTag() + " MSEPlayer.setJitter bufMin=" + t + " bufLen=" + e + " bufMax=" + i)
              }
          }, {
              key: "_getTag",
              value: function() {
                  var e = this.handler.constructor.name;
                  return this._num_ + " " + e
              }
          }, {
              key: "isMediaSourceOpen",
              get: function() {
                  return this.mediaSource && "open" === this.mediaSource.readyState
              }
          }]),
          e
      }();
      t.default = p
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(10))
        , o = s(i(4))
        , u = s(i(25))
        , l = function() {
          function e(t) {
              var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                , s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10;
              (0,
              a.default)(this, e),
              this.linkHandler = t,
              this.ws = null,
              this.connected = !1,
              this.isYY = i,
              this.url = null,
              this.avgSpeed = new u.default(s)
          }
          return (0,
          n.default)(e, [{
              key: "destroy",
              value: function() {
                  this.linkHandler = null,
                  this.reset(),
                  r.default.remove(this.onCheckTimer, this)
              }
          }, {
              key: "connect",
              value: function(e) {
                  this.reset(),
                  r.default.add(this.onCheckTimer, this, 1e3),
                  this.url = e,
                  this.ws = new WebSocket(e),
                  this.ws.binaryType = "arraybuffer",
                  this.ws.onopen = this.onopen.bind(this),
                  this.ws.onerror = this.onerror.bind(this),
                  this.ws.onclose = this.onclose.bind(this),
                  this.ws.onmessage = this.onmessage.bind(this)
              }
          }, {
              key: "reset",
              value: function() {
                  this.ws && (this.connected = !1,
                  this.ws.onopen = null,
                  this.ws.onerror = null,
                  this.ws.onclose = null,
                  this.ws.onmessage = null,
                  this.ws.close(),
                  this.ws = null),
                  this.url = null,
                  this.avgSpeed.reset()
              }
          }, {
              key: "send",
              value: function(e) {
                  this.ws && this.connected && this.ws.send(e)
              }
          }, {
              key: "onopen",
              value: function() {
                  this.connected = !0,
                  this.linkHandler && this.linkHandler.onopen()
              }
          }, {
              key: "onerror",
              value: function(e) {
                  o.default.log("ProtoLink.onerror event=" + e),
                  this.connected = !1,
                  this.ws = null,
                  this.linkHandler && (this.linkHandler.onerror(e),
                  this.linkHandler = null)
              }
          }, {
              key: "onclose",
              value: function() {
                  this.connected = !1,
                  this.ws = null,
                  this.linkHandler && (this.linkHandler.onclose(),
                  this.linkHandler = null)
              }
          }, {
              key: "onmessage",
              value: function(e) {
                  this.avgSpeed.addCur(e.data.byteLength),
                  e.data instanceof ArrayBuffer ? this.processArrayBuffer(e.data) : this.processText(e.data)
              }
          }, {
              key: "processText",
              value: function(e) {
                  o.default.log("ProtoLink.processText data=" + e)
              }
          }, {
              key: "processArrayBuffer",
              value: function(e) {
                  if (this.isYY)
                      for (var t = new DataView(e), i = 0, s = 0, a = 0; i + 10 < e.byteLength; ) {
                          if (i + (s = t.getUint32(i, !0)) > e.byteLength || s < 10)
                              return void o.default.error("ProtoLink.processArrayBuffer length error pktLen=" + s + " bufferLen=" + e.byteLength);
                          a = t.getUint32(i + 4, !0);
                          var n = new DataView(e,i,s);
                          this.linkHandler && this.linkHandler.onData(a, n),
                          i += s
                      }
                  else
                      this.linkHandler && this.linkHandler.onData(e)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  this.connected && this.avgSpeed.calculate()
              }
          }, {
              key: "speed",
              get: function() {
                  return this.avgSpeed.average()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      var s = i(23);
      e.exports = function(e, t) {
          if (!s(e))
              return e;
          var i, a;
          if (t && "function" == typeof (i = e.toString) && !s(a = i.call(e)))
              return a;
          if ("function" == typeof (i = e.valueOf) && !s(a = i.call(e)))
              return a;
          if (!t && "function" == typeof (i = e.toString) && !s(a = i.call(e)))
              return a;
          throw TypeError("Can't convert object to primitive value")
      }
  }
  , function(e, t, i) {
      var s = i(70);
      e.exports = Object("z").propertyIsEnumerable(0) ? Object : function(e) {
          return "String" == s(e) ? e.split("") : Object(e)
      }
  }
  , function(e, t) {
      var i = {}.toString;
      e.exports = function(e) {
          return i.call(e).slice(8, -1)
      }
  }
  , function(e, t) {
      e.exports = function(e) {
          if (null == e)
              throw TypeError("Can't call method on  " + e);
          return e
      }
  }
  , function(e, t) {
      var i = Math.ceil
        , s = Math.floor;
      e.exports = function(e) {
          return isNaN(e = +e) ? 0 : (e > 0 ? s : i)(e)
      }
  }
  , function(e, t, i) {
      var s = i(74)("keys")
        , a = i(56);
      e.exports = function(e) {
          return s[e] || (s[e] = a(e))
      }
  }
  , function(e, t, i) {
      var s = i(11)
        , a = i(21)
        , n = a["__core-js_shared__"] || (a["__core-js_shared__"] = {});
      (e.exports = function(e, t) {
          return n[e] || (n[e] = void 0 !== t ? t : {})
      }
      )("versions", []).push({
          version: s.version,
          mode: i(55) ? "pure" : "global",
          copyright: "© 2019 Denis Pushkarev (zloirock.ru)"
      })
  }
  , function(e, t) {
      e.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")
  }
  , function(e, t) {
      t.f = Object.getOwnPropertySymbols
  }
  , function(e, t, i) {
      var s = i(55)
        , a = i(14)
        , n = i(115)
        , r = i(27)
        , o = i(38)
        , u = i(227)
        , l = i(60)
        , d = i(116)
        , h = i(15)("iterator")
        , f = !([].keys && "next"in [].keys())
        , c = function() {
          return this
      };
      e.exports = function(e, t, i, p, v, y, m) {
          u(i, t, p);
          var _, P, T, S = function(e) {
              if (!f && e in k)
                  return k[e];
              switch (e) {
              case "keys":
              case "values":
                  return function() {
                      return new i(this,e)
                  }
              }
              return function() {
                  return new i(this,e)
              }
          }, g = t + " Iterator", I = "values" == v, E = !1, k = e.prototype, C = k[h] || k["@@iterator"] || v && k[v], R = C || S(v), A = v ? I ? S("entries") : R : void 0, U = "Array" == t && k.entries || C;
          if (U && (T = d(U.call(new e))) !== Object.prototype && T.next && (l(T, g, !0),
          s || "function" == typeof T[h] || r(T, h, c)),
          I && C && "values" !== C.name && (E = !0,
          R = function() {
              return C.call(this)
          }
          ),
          s && !m || !f && !E && k[h] || r(k, h, R),
          o[t] = R,
          o[g] = c,
          v)
              if (_ = {
                  values: I ? R : S("values"),
                  keys: y ? R : S("keys"),
                  entries: A
              },
              m)
                  for (P in _)
                      P in k || n(k, P, _[P]);
              else
                  a(a.P + a.F * (f || E), t, _);
          return _
      }
  }
  , function(e, t, i) {
      t.f = i(15)
  }
  , function(e, t, i) {
      var a = i(56)("meta")
        , n = i(23)
        , r = i(32)
        , o = i(18).f
        , u = 0
        , l = Object.isExtensible || function() {
          return !0
      }
        , d = !i(31)(function() {
          return l(Object.preventExtensions({}))
      })
        , h = function(e) {
          o(e, a, {
              value: {
                  i: "O" + ++u,
                  w: {}
              }
          })
      }
        , f = e.exports = {
          KEY: a,
          NEED: !1,
          fastKey: function(e, t) {
              if (!n(e))
                  return "symbol" == (void 0 === e ? "undefined" : s(e)) ? e : ("string" == typeof e ? "S" : "P") + e;
              if (!r(e, a)) {
                  if (!l(e))
                      return "F";
                  if (!t)
                      return "E";
                  h(e)
              }
              return e[a].i
          },
          getWeak: function(e, t) {
              if (!r(e, a)) {
                  if (!l(e))
                      return !0;
                  if (!t)
                      return !1;
                  h(e)
              }
              return e[a].w
          },
          onFreeze: function(e) {
              return d && f.NEED && l(e) && !r(e, a) && h(e),
              e
          }
      }
  }
  , function(e, t, i) {
      var s = i(21)
        , a = i(11)
        , n = i(55)
        , r = i(78)
        , o = i(18).f;
      e.exports = function(e) {
          var t = a.Symbol || (a.Symbol = n ? {} : s.Symbol || {});
          "_" == e.charAt(0) || e in t || o(t, e, {
              value: r.f(e)
          })
      }
  }
  , function(e, t) {}
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var s = window.HUYA || {};
      window.HUYA = s,
      t.default = s,
      s.VideoGatewayProxy2VGPingReq = function() {
          this.lLocalTime = 0
      }
      ,
      s.VideoGatewayProxy2VGPingReq.prototype._clone = function() {
          return new s.VideoGatewayProxy2VGPingReq
      }
      ,
      s.VideoGatewayProxy2VGPingReq.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.VideoGatewayProxy2VGPingReq.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.VideoGatewayProxy2VGPingReq.prototype.writeTo = function(e) {
          e.writeInt64(0, this.lLocalTime)
      }
      ,
      s.VideoGatewayProxy2VGPingReq.prototype.readFrom = function(e) {
          this.lLocalTime = e.readInt64(0, !1, this.lLocalTime)
      }
      ,
      s.VideoGatewayProxy2VGPingRsp = function() {
          this.lLocalTime = 0
      }
      ,
      s.VideoGatewayProxy2VGPingRsp.prototype._clone = function() {
          return new s.VideoGatewayProxy2VGPingRsp
      }
      ,
      s.VideoGatewayProxy2VGPingRsp.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.VideoGatewayProxy2VGPingRsp.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.VideoGatewayProxy2VGPingRsp.prototype.writeTo = function(e) {
          e.writeInt64(0, this.lLocalTime)
      }
      ,
      s.VideoGatewayProxy2VGPingRsp.prototype.readFrom = function(e) {
          this.lLocalTime = e.readInt64(0, !1, this.lLocalTime)
      }
      ,
      s.GetInfoFromVGReq = function() {
          this.lUid = 0,
          this.iServiceType = 0,
          this.iClientType = 0,
          this.iClientIp = 0,
          this.iTerminalType = 0,
          this.iRequestVPType = 0,
          this.sMsg = new Taf.BinBuffer,
          this.iUri = 0,
          this.sProtoName = "",
          this.lSid = 0,
          this.vStreamName = new Taf.Vector(new Taf.STRING),
          this.tId = new s.UserId
      }
      ,
      s.GetInfoFromVGReq.prototype._clone = function() {
          return new s.GetInfoFromVGReq
      }
      ,
      s.GetInfoFromVGReq.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.GetInfoFromVGReq.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.GetInfoFromVGReq.prototype.writeTo = function(e) {
          e.writeInt64(0, this.lUid),
          e.writeInt32(1, this.iServiceType),
          e.writeInt32(2, this.iClientType),
          e.writeInt64(3, this.iClientIp),
          e.writeInt32(4, this.iTerminalType),
          e.writeInt32(5, this.iRequestVPType),
          e.writeBytes(6, this.sMsg),
          e.writeInt64(7, this.iUri),
          e.writeString(8, this.sProtoName),
          e.writeInt64(9, this.lSid),
          e.writeVector(10, this.vStreamName),
          e.writeStruct(11, this.tId)
      }
      ,
      s.GetInfoFromVGReq.prototype.readFrom = function(e) {
          this.lUid = e.readInt64(0, !1, this.lUid),
          this.iServiceType = e.readInt32(1, !1, this.iServiceType),
          this.iClientType = e.readInt32(2, !1, this.iClientType),
          this.iClientIp = e.readInt64(3, !1, this.iClientIp),
          this.iTerminalType = e.readInt32(4, !1, this.iTerminalType),
          this.iRequestVPType = e.readInt32(5, !1, this.iRequestVPType),
          this.sMsg = e.readBytes(6, !1, this.sMsg),
          this.iUri = e.readInt64(7, !1, this.iUri),
          this.sProtoName = e.readString(8, !1, this.sProtoName),
          this.lSid = e.readInt64(9, !1, this.lSid),
          this.vStreamName = e.readVector(10, !1, this.vStreamName),
          this.tId = e.readStruct(11, !1, this.tId)
      }
      ,
      s.GetInfoFromVGRsp = function() {
          this.lUid = 0,
          this.ServerId = 0,
          this.sMsg = new Taf.BinBuffer,
          this.iUri = 0,
          this.sProtoName = ""
      }
      ,
      s.GetInfoFromVGRsp.prototype._clone = function() {
          return new s.GetInfoFromVGRsp
      }
      ,
      s.GetInfoFromVGRsp.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.GetInfoFromVGRsp.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.GetInfoFromVGRsp.prototype.writeTo = function(e) {
          e.writeInt64(0, this.lUid),
          e.writeInt64(1, this.ServerId),
          e.writeBytes(2, this.sMsg),
          e.writeInt64(3, this.iUri),
          e.writeString(4, this.sProtoName)
      }
      ,
      s.GetInfoFromVGRsp.prototype.readFrom = function(e) {
          this.lUid = e.readInt64(0, !1, this.lUid),
          this.ServerId = e.readInt64(1, !1, this.ServerId),
          this.sMsg = e.readBytes(2, !1, this.sMsg),
          this.iUri = e.readInt64(3, !1, this.iUri),
          this.sProtoName = e.readString(4, !1, this.sProtoName)
      }
      ,
      s.GetCdnTokenExReq = function() {
          this.sFlvUrl = "",
          this.sStreamName = ""
      }
      ,
      s.GetCdnTokenExReq.prototype._clone = function() {
          return new s.GetCdnTokenExReq
      }
      ,
      s.GetCdnTokenExReq.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.GetCdnTokenExReq.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.GetCdnTokenExReq.prototype.writeTo = function(e) {
          e.writeString(0, this.sFlvUrl),
          e.writeString(1, this.sStreamName)
      }
      ,
      s.GetCdnTokenExReq.prototype.readFrom = function(e) {
          this.sFlvUrl = e.readString(0, !1, this.sFlvUrl),
          this.sStreamName = e.readString(1, !1, this.sStreamName)
      }
      ,
      s.GetCdnTokenExRsp = function() {
          this.sFlvToken = "",
          this.iExpireTime = 0
      }
      ,
      s.GetCdnTokenExRsp.prototype._clone = function() {
          return new s.GetCdnTokenExRsp
      }
      ,
      s.GetCdnTokenExRsp.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.GetCdnTokenExRsp.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.GetCdnTokenExRsp.prototype.writeTo = function(e) {
          e.writeString(0, this.sFlvToken),
          e.writeInt32(1, this.iExpireTime)
      }
      ,
      s.GetCdnTokenExRsp.prototype.readFrom = function(e) {
          this.sFlvToken = e.readString(0, !1, this.sFlvToken),
          this.iExpireTime = e.readInt32(1, !1, this.iExpireTime)
      }
      ,
      s.LiveScenarioType = {
          ECommon_Live: 0,
          EAudio_Only: 1,
          EVideo_Only: 2,
          ELink_Live: 3
      },
      s.LimitedStreamInfo = function() {
          this.iVerMin = 0,
          this.iVerMax = 0,
          this.sCdnType = "",
          this.iIsMaster = 0,
          this.lChannelId = 0,
          this.lSubChannelId = 0,
          this.lPresenterUid = 0,
          this.sStreamName = "",
          this.sFlvUrl = "",
          this.sFlvUrlSuffix = "",
          this.sFlvAntiCode = "",
          this.sHlsUrl = "",
          this.sHlsUrlSuffix = "",
          this.sHlsAntiCode = "",
          this.iLineIndex = 0,
          this.iIsMultiStream = 0,
          this.iPCPriorityRate = 0,
          this.iWebPriorityRate = 0,
          this.iMobilePriorityRate = 0,
          this.vFlvIPList = new Taf.Vector(new Taf.STRING),
          this.iIsP2PSupport = 0,
          this.sP2pUrl = "",
          this.sP2pUrlSuffix = "",
          this.sP2pAntiCode = "",
          this.lFreeFlag = 0
      }
      ,
      s.LimitedStreamInfo.prototype._clone = function() {
          return new s.LimitedStreamInfo
      }
      ,
      s.LimitedStreamInfo.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.LimitedStreamInfo.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.LimitedStreamInfo.prototype.writeTo = function(e) {
          e.writeInt32(0, this.iVerMin),
          e.writeInt32(1, this.iVerMax),
          e.writeString(2, this.sCdnType),
          e.writeInt32(3, this.iIsMaster),
          e.writeInt64(4, this.lChannelId),
          e.writeInt64(5, this.lSubChannelId),
          e.writeInt64(6, this.lPresenterUid),
          e.writeString(7, this.sStreamName),
          e.writeString(8, this.sFlvUrl),
          e.writeString(9, this.sFlvUrlSuffix),
          e.writeString(10, this.sFlvAntiCode),
          e.writeString(11, this.sHlsUrl),
          e.writeString(12, this.sHlsUrlSuffix),
          e.writeString(13, this.sHlsAntiCode),
          e.writeInt32(14, this.iLineIndex),
          e.writeInt32(15, this.iIsMultiStream),
          e.writeInt32(16, this.iPCPriorityRate),
          e.writeInt32(17, this.iWebPriorityRate),
          e.writeInt32(18, this.iMobilePriorityRate),
          e.writeVector(19, this.vFlvIPList),
          e.writeInt32(20, this.iIsP2PSupport),
          e.writeString(21, this.sP2pUrl),
          e.writeString(22, this.sP2pUrlSuffix),
          e.writeString(23, this.sP2pAntiCode),
          e.writeInt64(24, this.lFreeFlag)
      }
      ,
      s.LimitedStreamInfo.prototype.readFrom = function(e) {
          this.iVerMin = e.readInt32(0, !1, this.iVerMin),
          this.iVerMax = e.readInt32(1, !1, this.iVerMax),
          this.sCdnType = e.readString(2, !1, this.sCdnType),
          this.iIsMaster = e.readInt32(3, !1, this.iIsMaster),
          this.lChannelId = e.readInt64(4, !1, this.lChannelId),
          this.lSubChannelId = e.readInt64(5, !1, this.lSubChannelId),
          this.lPresenterUid = e.readInt64(6, !1, this.lPresenterUid),
          this.sStreamName = e.readString(7, !1, this.sStreamName),
          this.sFlvUrl = e.readString(8, !1, this.sFlvUrl),
          this.sFlvUrlSuffix = e.readString(9, !1, this.sFlvUrlSuffix),
          this.sFlvAntiCode = e.readString(10, !1, this.sFlvAntiCode),
          this.sHlsUrl = e.readString(11, !1, this.sHlsUrl),
          this.sHlsUrlSuffix = e.readString(12, !1, this.sHlsUrlSuffix),
          this.sHlsAntiCode = e.readString(13, !1, this.sHlsAntiCode),
          this.iLineIndex = e.readInt32(14, !1, this.iLineIndex),
          this.iIsMultiStream = e.readInt32(15, !1, this.iIsMultiStream),
          this.iPCPriorityRate = e.readInt32(16, !1, this.iPCPriorityRate),
          this.iWebPriorityRate = e.readInt32(17, !1, this.iWebPriorityRate),
          this.iMobilePriorityRate = e.readInt32(18, !1, this.iMobilePriorityRate),
          this.vFlvIPList = e.readVector(19, !1, this.vFlvIPList),
          this.iIsP2PSupport = e.readInt32(20, !1, this.iIsP2PSupport),
          this.sP2pUrl = e.readString(21, !1, this.sP2pUrl),
          this.sP2pUrlSuffix = e.readString(22, !1, this.sP2pUrlSuffix),
          this.sP2pAntiCode = e.readString(23, !1, this.sP2pAntiCode),
          this.lFreeFlag = e.readInt64(24, !1, this.lFreeFlag)
      }
      ,
      s.ClassifiedStreamInfoPack = function() {
          this.iLiveScenarioType = 0,
          this.vStreamInfo = new Taf.Vector(new s.LimitedStreamInfo),
          this.vCdnList = new Taf.Vector(new Taf.STRING),
          this.lLiveId = 0,
          this.sLinkGroupId = "",
          this.mStreamRatioWeb = new Taf.Map(new Taf.STRING,new Taf.INT32),
          this.mStreamRatioPC = new Taf.Map(new Taf.STRING,new Taf.INT32),
          this.mStreamRatioMobile = new Taf.Map(new Taf.STRING,new Taf.INT32)
      }
      ,
      s.ClassifiedStreamInfoPack.prototype._clone = function() {
          return new s.ClassifiedStreamInfoPack
      }
      ,
      s.ClassifiedStreamInfoPack.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.ClassifiedStreamInfoPack.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.ClassifiedStreamInfoPack.prototype.writeTo = function(e) {
          e.writeInt32(0, this.iLiveScenarioType),
          e.writeVector(1, this.vStreamInfo),
          e.writeVector(2, this.vCdnList),
          e.writeInt64(3, this.lLiveId),
          e.writeString(4, this.sLinkGroupId),
          e.writeMap(5, this.mStreamRatioWeb),
          e.writeMap(6, this.mStreamRatioPC),
          e.writeMap(7, this.mStreamRatioMobile)
      }
      ,
      s.ClassifiedStreamInfoPack.prototype.readFrom = function(e) {
          this.iLiveScenarioType = e.readInt32(0, !1, this.iLiveScenarioType),
          this.vStreamInfo = e.readVector(1, !1, this.vStreamInfo),
          this.vCdnList = e.readVector(2, !1, this.vCdnList),
          this.lLiveId = e.readInt64(3, !1, this.lLiveId),
          this.sLinkGroupId = e.readString(4, !1, this.sLinkGroupId),
          this.mStreamRatioWeb = e.readMap(5, !1, this.mStreamRatioWeb),
          this.mStreamRatioPC = e.readMap(6, !1, this.mStreamRatioPC),
          this.mStreamRatioMobile = e.readMap(7, !1, this.mStreamRatioMobile)
      }
      ,
      s.LivingStreamInfoNotice = function() {
          this.lPresenterUid = 0,
          this.lLiveId = 0,
          this.mStreamInfo = new Taf.Map(new Taf.INT32,new s.ClassifiedStreamInfoPack)
      }
      ,
      s.LivingStreamInfoNotice.prototype._clone = function() {
          return new s.LivingStreamInfoNotice
      }
      ,
      s.LivingStreamInfoNotice.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.LivingStreamInfoNotice.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.LivingStreamInfoNotice.prototype.writeTo = function(e) {
          e.writeInt64(0, this.lPresenterUid),
          e.writeInt64(1, this.lLiveId),
          e.writeMap(2, this.mStreamInfo)
      }
      ,
      s.LivingStreamInfoNotice.prototype.readFrom = function(e) {
          this.lPresenterUid = e.readInt64(0, !1, this.lPresenterUid),
          this.lLiveId = e.readInt64(1, !1, this.lLiveId),
          this.mStreamInfo = e.readMap(2, !1, this.mStreamInfo)
      }
      ,
      s.LivingStreamEndNotice = function() {
          this.sStreamName = "",
          this.sCdnType = "",
          this.iLineIndex = 0,
          this.lLiveId = 0,
          this.iLiveScenarioType = 0
      }
      ,
      s.LivingStreamEndNotice.prototype._clone = function() {
          return new s.LivingStreamEndNotice
      }
      ,
      s.LivingStreamEndNotice.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.LivingStreamEndNotice.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.LivingStreamEndNotice.prototype.writeTo = function(e) {
          e.writeString(0, this.sStreamName),
          e.writeString(1, this.sCdnType),
          e.writeInt32(2, this.iLineIndex),
          e.writeInt64(3, this.lLiveId),
          e.writeInt32(4, this.iLiveScenarioType)
      }
      ,
      s.LivingStreamEndNotice.prototype.readFrom = function(e) {
          this.sStreamName = e.readString(0, !1, this.sStreamName),
          this.sCdnType = e.readString(1, !1, this.sCdnType),
          this.iLineIndex = e.readInt32(2, !1, this.iLineIndex),
          this.lLiveId = e.readInt64(3, !1, this.lLiveId),
          this.iLiveScenarioType = e.readInt32(4, !1, this.iLiveScenarioType)
      }
      ,
      s.GetLivingStreamInfoReq = function() {
          this.tId = new s.UserId,
          this.lTopSid = 0,
          this.lSubSid = 0,
          this.lPresenterUid = 0,
          this.sTraceSource = ""
      }
      ,
      s.GetLivingStreamInfoReq.prototype._clone = function() {
          return new s.GetLivingStreamInfoReq
      }
      ,
      s.GetLivingStreamInfoReq.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.GetLivingStreamInfoReq.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.GetLivingStreamInfoReq.prototype.writeTo = function(e) {
          e.writeStruct(0, this.tId),
          e.writeInt64(1, this.lTopSid),
          e.writeInt64(2, this.lSubSid),
          e.writeInt64(3, this.lPresenterUid),
          e.writeString(4, this.sTraceSource)
      }
      ,
      s.GetLivingStreamInfoReq.prototype.readFrom = function(e) {
          this.tId = e.readStruct(0, !1, this.tId),
          this.lTopSid = e.readInt64(1, !1, this.lTopSid),
          this.lSubSid = e.readInt64(2, !1, this.lSubSid),
          this.lPresenterUid = e.readInt64(3, !1, this.lPresenterUid),
          this.sTraceSource = e.readString(4, !1, this.sTraceSource)
      }
      ,
      s.GetLivingStreamInfoRsp = function() {
          this.bIsLiving = 0,
          this.tNotice = new s.LivingStreamInfoNotice,
          this.bIsSelfLiving = 0
      }
      ,
      s.GetLivingStreamInfoRsp.prototype._clone = function() {
          return new s.GetLivingStreamInfoRsp
      }
      ,
      s.GetLivingStreamInfoRsp.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.GetLivingStreamInfoRsp.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.GetLivingStreamInfoRsp.prototype.writeTo = function(e) {
          e.writeInt32(0, this.bIsLiving),
          e.writeStruct(1, this.tNotice),
          e.writeInt32(2, this.bIsSelfLiving)
      }
      ,
      s.GetLivingStreamInfoRsp.prototype.readFrom = function(e) {
          this.bIsLiving = e.readInt32(0, !1, this.bIsLiving),
          this.tNotice = e.readStruct(1, !1, this.tNotice),
          this.bIsSelfLiving = e.readInt32(2, !1, this.bIsSelfLiving)
      }
      ,
      s.VideoClientReportReq = function() {
          this.iReportType = 0,
          this.sReportString = "",
          this.sMsg = new Taf.BinBuffer,
          this.lUid = 0
      }
      ,
      s.VideoClientReportReq.prototype._clone = function() {
          return new s.VideoClientReportReq
      }
      ,
      s.VideoClientReportReq.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.VideoClientReportReq.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.VideoClientReportReq.prototype.writeTo = function(e) {
          e.writeInt32(0, this.iReportType),
          e.writeString(1, this.sReportString),
          e.writeBytes(2, this.sMsg),
          e.writeInt64(3, this.lUid)
      }
      ,
      s.VideoClientReportReq.prototype.readFrom = function(e) {
          this.iReportType = e.readInt32(0, !1, this.iReportType),
          this.sReportString = e.readString(1, !1, this.sReportString),
          this.sMsg = e.readBytes(2, !1, this.sMsg),
          this.lUid = e.readInt64(3, !1, this.lUid)
      }
      ,
      s.LiveMeetingSyncNotice = function() {
          this.tStat = new s.MeetingStat,
          this.vSeats = new Taf.Vector(new s.MeetingSeat),
          this.iVersion = 0,
          this.sMessage = ""
      }
      ,
      s.LiveMeetingSyncNotice.prototype._clone = function() {
          return new s.LiveMeetingSyncNotice
      }
      ,
      s.LiveMeetingSyncNotice.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.LiveMeetingSyncNotice.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.LiveMeetingSyncNotice.prototype.writeTo = function(e) {
          e.writeStruct(0, this.tStat),
          e.writeVector(1, this.vSeats),
          e.writeInt32(2, this.iVersion),
          e.writeString(3, this.sMessage)
      }
      ,
      s.LiveMeetingSyncNotice.prototype.readFrom = function(e) {
          this.tStat = e.readStruct(0, !1, this.tStat),
          this.vSeats = e.readVector(1, !1, this.vSeats),
          this.iVersion = e.readInt32(2, !1, this.iVersion),
          this.sMessage = e.readString(3, !1, this.sMessage)
      }
      ,
      s.MeetingStat = function() {
          this.lPresenterUid = 0,
          this.sPresenterNick = "",
          this.sPresenterAvatarUrl = "",
          this.mpContext = new Taf.Map(new Taf.STRING,new Taf.STRING),
          this.iVersion = 0,
          this.iCurAction = 0,
          this.sPassword = "",
          this.lSessionId = 0,
          this.vApplyList = new Taf.Vector(new s.ApplyUser),
          this.iState = 0,
          this.iSilence = 0,
          this.iActiveTime = 0,
          this.iLastSyncTime = 0,
          this.mpUserSession = new Taf.Map(new Taf.INT64,new Taf.STRING),
          this.iBeginTime = 0,
          this.iPresenterGender = 0
      }
      ,
      s.MeetingStat.prototype._clone = function() {
          return new s.MeetingStat
      }
      ,
      s.MeetingStat.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.MeetingStat.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.MeetingStat.prototype.writeTo = function(e) {
          e.writeInt64(0, this.lPresenterUid),
          e.writeString(1, this.sPresenterNick),
          e.writeString(2, this.sPresenterAvatarUrl),
          e.writeMap(4, this.mpContext),
          e.writeInt32(5, this.iVersion),
          e.writeInt32(6, this.iCurAction),
          e.writeString(7, this.sPassword),
          e.writeInt64(8, this.lSessionId),
          e.writeVector(9, this.vApplyList),
          e.writeInt32(10, this.iState),
          e.writeInt32(11, this.iSilence),
          e.writeInt32(12, this.iActiveTime),
          e.writeInt32(13, this.iLastSyncTime),
          e.writeMap(14, this.mpUserSession),
          e.writeInt32(15, this.iBeginTime),
          e.writeInt32(16, this.iPresenterGender)
      }
      ,
      s.MeetingStat.prototype.readFrom = function(e) {
          this.lPresenterUid = e.readInt64(0, !1, this.lPresenterUid),
          this.sPresenterNick = e.readString(1, !1, this.sPresenterNick),
          this.sPresenterAvatarUrl = e.readString(2, !1, this.sPresenterAvatarUrl),
          this.mpContext = e.readMap(4, !1, this.mpContext),
          this.iVersion = e.readInt32(5, !1, this.iVersion),
          this.iCurAction = e.readInt32(6, !1, this.iCurAction),
          this.sPassword = e.readString(7, !1, this.sPassword),
          this.lSessionId = e.readInt64(8, !1, this.lSessionId),
          this.vApplyList = e.readVector(9, !1, this.vApplyList),
          this.iState = e.readInt32(10, !1, this.iState),
          this.iSilence = e.readInt32(11, !1, this.iSilence),
          this.iActiveTime = e.readInt32(12, !1, this.iActiveTime),
          this.iLastSyncTime = e.readInt32(13, !1, this.iLastSyncTime),
          this.mpUserSession = e.readMap(14, !1, this.mpUserSession),
          this.iBeginTime = e.readInt32(15, !1, this.iBeginTime),
          this.iPresenterGender = e.readInt32(16, !1, this.iPresenterGender)
      }
      ,
      s.MeetingSeat = function() {
          this.mpContext = new Taf.Map(new Taf.STRING,new Taf.STRING),
          this.iPos = 0,
          this.iLocked = 0,
          this.lUid = 0,
          this.sNick = "",
          this.sAvatarUrl = "",
          this.iMute = 0,
          this.iVersion = 0,
          this.iCurAction = 0,
          this.iActiveTime = 0,
          this.iSilence = 0,
          this.iGender = 0
      }
      ,
      s.MeetingSeat.prototype._clone = function() {
          return new s.MeetingSeat
      }
      ,
      s.MeetingSeat.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.MeetingSeat.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.MeetingSeat.prototype.writeTo = function(e) {
          e.writeMap(0, this.mpContext),
          e.writeInt32(1, this.iPos),
          e.writeInt32(2, this.iLocked),
          e.writeInt64(3, this.lUid),
          e.writeString(4, this.sNick),
          e.writeString(5, this.sAvatarUrl),
          e.writeInt32(7, this.iMute),
          e.writeInt32(8, this.iVersion),
          e.writeInt32(9, this.iCurAction),
          e.writeInt32(10, this.iActiveTime),
          e.writeInt32(11, this.iSilence),
          e.writeInt32(12, this.iGender)
      }
      ,
      s.MeetingSeat.prototype.readFrom = function(e) {
          this.mpContext = e.readMap(0, !1, this.mpContext),
          this.iPos = e.readInt32(1, !1, this.iPos),
          this.iLocked = e.readInt32(2, !1, this.iLocked),
          this.lUid = e.readInt64(3, !1, this.lUid),
          this.sNick = e.readString(4, !1, this.sNick),
          this.sAvatarUrl = e.readString(5, !1, this.sAvatarUrl),
          this.iMute = e.readInt32(7, !1, this.iMute),
          this.iVersion = e.readInt32(8, !1, this.iVersion),
          this.iCurAction = e.readInt32(9, !1, this.iCurAction),
          this.iActiveTime = e.readInt32(10, !1, this.iActiveTime),
          this.iSilence = e.readInt32(11, !1, this.iSilence),
          this.iGender = e.readInt32(12, !1, this.iGender)
      }
      ,
      s.ApplyUser = function() {
          this.lUid = 0,
          this.sNick = "",
          this.sAvatarUrl = "",
          this.lActiveTime = 0,
          this.mpContext = new Taf.Map(new Taf.STRING,new Taf.STRING),
          this.iGender = 0
      }
      ,
      s.ApplyUser.prototype._clone = function() {
          return new s.ApplyUser
      }
      ,
      s.ApplyUser.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.ApplyUser.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.ApplyUser.prototype.writeTo = function(e) {
          e.writeInt64(0, this.lUid),
          e.writeString(1, this.sNick),
          e.writeString(2, this.sAvatarUrl),
          e.writeInt64(3, this.lActiveTime),
          e.writeMap(4, this.mpContext),
          e.writeInt32(5, this.iGender)
      }
      ,
      s.ApplyUser.prototype.readFrom = function(e) {
          this.lUid = e.readInt64(0, !1, this.lUid),
          this.sNick = e.readString(1, !1, this.sNick),
          this.sAvatarUrl = e.readString(2, !1, this.sAvatarUrl),
          this.lActiveTime = e.readInt64(3, !1, this.lActiveTime),
          this.mpContext = e.readMap(4, !1, this.mpContext),
          this.iGender = e.readInt32(5, !1, this.iGender)
      }
      ,
      s.GetP2PStreamInfoReq = function() {
          this.lUid = 0,
          this.sStreamName = "",
          this.iP2PType = 0
      }
      ,
      s.GetP2PStreamInfoReq.prototype._clone = function() {
          return new s.GetP2PStreamInfoReq
      }
      ,
      s.GetP2PStreamInfoReq.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.GetP2PStreamInfoReq.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.GetP2PStreamInfoReq.prototype.writeTo = function(e) {
          e.writeInt64(0, this.lUid),
          e.writeString(1, this.sStreamName),
          e.writeInt32(2, this.iP2PType)
      }
      ,
      s.GetP2PStreamInfoReq.prototype.readFrom = function(e) {
          this.lUid = e.readInt64(0, !1, this.lUid),
          this.sStreamName = e.readString(1, !1, this.sStreamName),
          this.iP2PType = e.readInt32(2, !1, this.iP2PType)
      }
      ,
      s.GetP2PStreamInfoRsp = function() {
          this.lUid = 0,
          this.sStreamName = "",
          this.iP2PType = 0,
          this.sP2PToken = "",
          this.iP2PExpireTime = 0,
          this.sP2PUrl = "",
          this.sCodecType = "",
          this.sCdnBrand = "",
          this.mpOption = new Taf.Map(new Taf.INT16,new Taf.INT64)
      }
      ,
      s.GetP2PStreamInfoRsp.prototype._clone = function() {
          return new s.GetP2PStreamInfoRsp
      }
      ,
      s.GetP2PStreamInfoRsp.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.GetP2PStreamInfoRsp.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.GetP2PStreamInfoRsp.prototype.writeTo = function(e) {
          e.writeInt64(0, this.lUid),
          e.writeString(1, this.sStreamName),
          e.writeInt32(2, this.iP2PType),
          e.writeString(3, this.sP2PToken),
          e.writeInt32(4, this.iP2PExpireTime),
          e.writeString(5, this.sP2PUrl),
          e.writeString(6, this.sCodecType),
          e.writeString(7, this.sCdnBrand),
          e.writeMap(8, this.mpOption)
      }
      ,
      s.GetP2PStreamInfoRsp.prototype.readFrom = function(e) {
          this.lUid = e.readInt64(0, !1, this.lUid),
          this.sStreamName = e.readString(1, !1, this.sStreamName),
          this.iP2PType = e.readInt32(2, !1, this.iP2PType),
          this.sP2PToken = e.readString(3, !1, this.sP2PToken),
          this.iP2PExpireTime = e.readInt32(4, !1, this.iP2PExpireTime),
          this.sP2PUrl = e.readString(5, !1, this.sP2PUrl),
          this.sCodecType = e.readString(6, !1, this.sCodecType),
          this.sCdnBrand = e.readString(7, !1, this.sCdnBrand),
          this.mpOption = e.readMap(8, !1, this.mpOption)
      }
      ,
      s.GetP2PStreamTokenExReq = function() {
          this.sStreamName = "",
          this.iLoopTime = 0
      }
      ,
      s.GetP2PStreamTokenExReq.prototype._clone = function() {
          return new s.GetP2PStreamTokenExReq
      }
      ,
      s.GetP2PStreamTokenExReq.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.GetP2PStreamTokenExReq.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.GetP2PStreamTokenExReq.prototype.writeTo = function(e) {
          e.writeString(0, this.sStreamName),
          e.writeInt32(1, this.iLoopTime)
      }
      ,
      s.GetP2PStreamTokenExReq.prototype.readFrom = function(e) {
          this.sStreamName = e.readString(0, !1, this.sStreamName),
          this.iLoopTime = e.readInt32(1, !1, this.iLoopTime)
      }
      ,
      s.GetP2PStreamTokenExRsp = function() {
          this.sP2PToken = "",
          this.iExpireTime = 0
      }
      ,
      s.GetP2PStreamTokenExRsp.prototype._clone = function() {
          return new s.GetP2PStreamTokenExRsp
      }
      ,
      s.GetP2PStreamTokenExRsp.prototype._write = function(e, t, i) {
          e.writeStruct(t, i)
      }
      ,
      s.GetP2PStreamTokenExRsp.prototype._read = function(e, t, i) {
          return e.readStruct(t, !0, i)
      }
      ,
      s.GetP2PStreamTokenExRsp.prototype.writeTo = function(e) {
          e.writeString(0, this.sP2PToken),
          e.writeInt32(1, this.iExpireTime)
      }
      ,
      s.GetP2PStreamTokenExRsp.prototype.readFrom = function(e) {
          this.sP2PToken = e.readString(0, !1, this.sP2PToken),
          this.iExpireTime = e.readInt32(1, !1, this.iExpireTime)
      }
  }
  , function(e, t, i) {
      var s = i(84)
        , a = i(15)("iterator")
        , n = i(38);
      e.exports = i(11).getIteratorMethod = function(e) {
          if (null != e)
              return e[a] || e["@@iterator"] || n[s(e)]
      }
  }
  , function(e, t, i) {
      var s = i(70)
        , a = i(15)("toStringTag")
        , n = "Arguments" == s(function() {
          return arguments
      }());
      e.exports = function(e) {
          var t, i, r;
          return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (i = function(e, t) {
              try {
                  return e[t]
              } catch (e) {}
          }(t = Object(e), a)) ? i : n ? s(t) : "Object" == (r = s(t)) && "function" == typeof t.callee ? "Arguments" : r
      }
  }
  , function(e, t, i) {
      var s = i(23);
      e.exports = function(e, t) {
          if (!s(e) || e._t !== t)
              throw TypeError("Incompatible receiver, " + t + " required!");
          return e
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(5))
        , o = s(i(49))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamId = new r.default,
              this.videoProxyInfos = [],
              this.token = "",
              this.streamSeqSN = 0,
              this.quickAccessBeginIndex = 0,
              this.quickAccessEndIndex = 0,
              this.ip = 0,
              this.urlTokenTime = 0,
              this.urlToken = ""
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.streamId.unmarshall(e),
                  this.videoProxyInfos = [];
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = new o.default;
                      this.videoProxyInfos.push(s.unmarshall(e))
                  }
                  return this.token = e.popString(),
                  this.streamSeqSN = e.popUInt64(),
                  this.quickAccessBeginIndex = e.popUInt64(),
                  this.quickAccessEndIndex = e.popUInt64(),
                  this.ip = e.popUInt32(),
                  this.urlTokenTime = e.popUInt32(),
                  this.urlToken = e.popString(),
                  this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          STREAM_UNKNOWN: 0,
          AUDIO_SPEEX: 0,
          AUDIO_AACPLUS: 1,
          AUDIO_SILK: 2,
          AUDIO_AAC_44100HZ_STEREO_128KBPS: 35,
          AUDIO_AAC_44100HZ_STEREO_160KBPS: 36,
          AUDIO_AAC_44100HZ_STEREO_192KBPS: 37,
          AUDIO_ELD_AAC_44100HZ_STEREO: 38,
          AUDIO_ELD_AAC_SBR_44100HZ_STEREO: 39,
          AUDIO_MP3: 50,
          AUDIO_NELLYMOSER: 54,
          VIDEO_264_START: 401,
          VIDEO_H264_100K: 401,
          VIDEO_H264_500K: 405,
          VIDEO_H264_800K: 408,
          VIDEO_H264_1200K: 412,
          VIDEO_H264_1500K: 415,
          VIDEO_H264_2000K: 420,
          VIDEO_H264_3000K: 430,
          VIDEO_H264_4000K: 440,
          VIDEO_H264_6000K: 460,
          VIDEO_H264_8000K: 480,
          VIDEO_H264_END: 480,
          VIDEO_265_START: 503,
          VIDEO_H265_300K: 503,
          VIDEO_H265_500K: 505,
          VIDEO_H265_800K: 508,
          VIDEO_H265_1200K: 512,
          VIDEO_H265_1500K: 515,
          VIDEO_H265_2000K: 520,
          VIDEO_H265_3000K: 530,
          VIDEO_H265_4000K: 540,
          VIDEO_H265_6000K: 560,
          VIDEO_H265_8000K: 580,
          VIDEO_H265_END: 580,
          VIDEO_H264_EX_BASE: 1e3,
          VIDEO_H264_EX_START: 1005,
          VIDEO_H264_EX_500K: 1005,
          VIDEO_H264_EX_1M: 1010,
          VIDEO_H264_EX_5M: 1050,
          VIDEO_H264_EX_8M: 1080,
          VIDEO_H264_EX_10M: 1100,
          VIDEO_H264_EX_12M: 1120,
          VIDEO_H264_EX_15M: 1150,
          VIDEO_H264_EX_20M: 1200,
          VIDEO_H264_EX_END: 1200,
          VIDEO_H265_EX_BASE: 4e3,
          VIDEO_H265_EX_START: 4005,
          VIDEO_H265_EX_500K: 4005,
          VIDEO_H265_EX_1M: 4010,
          VIDEO_H265_EX_5M: 4050,
          VIDEO_H265_EX_8M: 4080,
          VIDEO_H265_EX_10M: 4100,
          VIDEO_H265_EX_12M: 4120,
          VIDEO_H265_EX_15M: 4150,
          VIDEO_H265_EX_20M: 4200,
          VIDEO_H265_EX_END: 4200
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(3))
        , u = s(i(5))
        , l = s(i(49))
        , d = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.currentProxyInfos = new a.default
          }
          return (0,
          r.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default(!1);
                  return e.pushUInt32(this.currentProxyInfos.size),
                  this.currentProxyInfos.forEach(function(t, i) {
                      e.pushUint8ArrayWithoutLen(i.marshall()),
                      e.pushUInt32(t.length),
                      t.forEach(function(t) {
                          e.pushUint8ArrayWithoutLen(t.marshall())
                      })
                  }),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.currentProxyInfos.clear();
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = new u.default;
                      s.unmarshall(e);
                      for (var a = [], n = e.popUInt32(), r = 0; r < n; r++) {
                          var o = new l.default;
                          a.push(o.unmarshall(e))
                      }
                      this.currentProxyInfos.set(s, a)
                  }
                  return this
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.wanip = 0,
              this.wanport = 0,
              this.lanips = [],
              this.lanport = 0,
              this.availPeers = 0,
              this.bPunched = !1,
              this.uplinkBw = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default(!1);
                  return e.pushUInt64(this.uid),
                  e.pushUInt32(this.wanip),
                  e.pushUInt16(this.wanport),
                  e.pushUInt32Vector(this.lanips),
                  e.pushUInt16(this.lanport),
                  e.pushUInt16(this.availPeers),
                  e.pushBool(this.bPunched),
                  e.pushUInt32(this.uplinkBw),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.uid = e.popUInt64(),
                  this.wanip = e.popUInt32(),
                  this.wanport = e.popUInt16(),
                  this.lanips = e.popUInt32Vector(),
                  this.lanport = e.popUInt16(),
                  this.availPeers = e.popUInt16(),
                  this.bPunched = e.popBool(),
                  this.uplinkBw = e.popUInt32()
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.seq = 0,
              this.uri = 0,
              this.from = 0,
              this.uid = 0,
              this.streamSeqSN = 0,
              this.payload = null
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PP2pSliceData),
                  e.pushUInt64(this.seq),
                  e.pushUInt32(this.uri),
                  e.pushUInt8(this.from),
                  e.pushUInt64(this.uid),
                  e.pushUInt64(this.streamSeqSN),
                  e.pushUint8Array(this.payload),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  return this.seq = e.popUInt64(),
                  this.uri = e.popUInt32(),
                  this.from = e.popUInt8(),
                  this.uid = e.popUInt64(),
                  this.streamSeqSN = e.popUInt64(),
                  this.payload = e.popUint8Array(),
                  this
              }
          }, {
              key: "isAudio",
              get: function() {
                  return this.uri == r.default.PP2pSliceAudioData
              }
          }, {
              key: "isVideo",
              get: function() {
                  return this.uri == r.default.PP2pSliceVideoData
              }
          }, {
              key: "isCtrlSlice",
              get: function() {
                  return this.uri == r.default.PP2pSliceControlData
              }
          }, {
              key: "isFullSlice",
              get: function() {
                  return 1 == this.from
              }
          }, {
              key: "isSubSlice",
              get: function() {
                  return 2 == this.from
              }
          }, {
              key: "isResend",
              get: function() {
                  return 3 == this.from && 0 == this.uid
              }
          }, {
              key: "isPatchSlice",
              get: function() {
                  return 4 == this.from
              }
          }, {
              key: "isFromPeer",
              get: function() {
                  return 0 !== this.uid
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          var t = a(e);
          return i(t)
      }
      function a(e) {
          if (!i.o(n, e)) {
              var t = new Error("Cannot find module '" + e + "'");
              throw t.code = "MODULE_NOT_FOUND",
              t
          }
          return n[e]
      }
      var n = {
          "./ApToken": 92,
          "./ApToken.js": 92,
          "./CurrentProxyInfo": 93,
          "./CurrentProxyInfo.js": 93,
          "./FuzzyQueryKey": 34,
          "./FuzzyQueryKey.js": 34,
          "./FuzzyQueryParam": 94,
          "./FuzzyQueryParam.js": 94,
          "./IpInfo": 95,
          "./IpInfo.js": 95,
          "./MeasureValueType": 96,
          "./MeasureValueType.js": 96,
          "./MetaDataInfo": 97,
          "./MetaDataInfo.js": 97,
          "./PAudienceGetProxyListReq": 43,
          "./PAudienceGetProxyListReq.js": 43,
          "./PAudienceGetProxyListRsp": 184,
          "./PAudienceGetProxyListRsp.js": 184,
          "./PForceConnectVideoProxy3": 185,
          "./PForceConnectVideoProxy3.js": 185,
          "./PLoginVideoProxyUniformly": 63,
          "./PLoginVideoProxyUniformly.js": 63,
          "./PLoginVideoProxyUniformlyRes": 100,
          "./PLoginVideoProxyUniformlyRes.js": 100,
          "./PNotifyCurrentStream4": 186,
          "./PNotifyCurrentStream4.js": 186,
          "./PNotifyStreamSwitch": 187,
          "./PNotifyStreamSwitch.js": 187,
          "./PNotifyUplinkRecvCount3": 188,
          "./PNotifyUplinkRecvCount3.js": 188,
          "./PP2pVideoPing3": 189,
          "./PP2pVideoPing3.js": 189,
          "./PPullStreamData": 101,
          "./PPullStreamData.js": 101,
          "./PReSendStreamData4": 102,
          "./PReSendStreamData4.js": 102,
          "./PResendStreamDataFailAck": 190,
          "./PResendStreamDataFailAck.js": 190,
          "./PStopStream": 191,
          "./PStopStream.js": 191,
          "./PStopStream3": 103,
          "./PStopStream3.js": 103,
          "./PStreamData3": 64,
          "./PStreamData3.js": 64,
          "./PSubscribeStream3": 104,
          "./PSubscribeStream3.js": 104,
          "./PSubscribeStreamRes3": 192,
          "./PSubscribeStreamRes3.js": 192,
          "./PUpdateVideoConfig2": 193,
          "./PUpdateVideoConfig2.js": 193,
          "./PVideoBroadcast4": 194,
          "./PVideoBroadcast4.js": 194,
          "./PVideoProxyPing3": 65,
          "./PVideoProxyPing3.js": 65,
          "./PVideoProxyPingRes4": 195,
          "./PVideoProxyPingRes4.js": 195,
          "./PVideoSyncSpeakerTime3": 105,
          "./PVideoSyncSpeakerTime3.js": 105,
          "./SlaveProxyInfo": 52,
          "./SlaveProxyInfo.js": 52,
          "./StreamAllocateInfo": 98,
          "./StreamAllocateInfo.js": 98,
          "./StreamCodecType": 51,
          "./StreamCodecType.js": 51,
          "./StreamGroupID": 9,
          "./StreamGroupID.js": 9,
          "./StreamType": 50,
          "./StreamType.js": 50,
          "./SubscribeResCode": 106,
          "./SubscribeResCode.js": 106,
          "./VoiceChatEx": 107,
          "./VoiceChatEx.js": 107,
          "./VpToken": 99,
          "./VpToken.js": 99
      };
      s.keys = function() {
          return Object.keys(n)
      }
      ,
      s.resolve = a,
      e.exports = s,
      s.id = 91
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.strToken = ""
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default(!1);
                  return e.pushString(this.strToken),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(3))
        , u = s(i(9))
        , l = s(i(52))
        , d = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.currentProxyInfos = new a.default
          }
          return (0,
          r.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default(!1);
                  return e.pushUInt32(this.currentProxyInfos.size),
                  this.currentProxyInfos.forEach(function(t, i) {
                      e.pushUint8ArrayWithoutLen(i.marshall()),
                      e.pushUInt32(t.length),
                      t.forEach(function(t) {
                          e.pushUint8ArrayWithoutLen(t.marshall())
                      })
                  }),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.currentProxyInfos.clear();
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = new u.default;
                      s.unmarshall(e);
                      for (var a = [], n = e.popUInt32(), r = 0; r < n; r++) {
                          var o = new l.default;
                          a.push(o.unmarshall(e))
                      }
                      this.currentProxyInfos.set(s, a)
                  }
                  return this
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.h264Only = !1,
              this.maxCodeRateH264 = 0,
              this.maxCodeRateH265 = 0,
              this.reserve = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default(!1);
                  return e.pushBool(this.h264Only),
                  e.pushUInt16(this.maxCodeRateH264),
                  e.pushUInt16(this.maxCodeRateH265),
                  e.pushUInt32(this.reserve),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  return this.h264Only = e.popBool(),
                  this.maxCodeRateH264 = e.popUInt16(),
                  this.maxCodeRateH265 = e.popUInt16(),
                  this.reserve = e.popUInt32(),
                  this
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.ip = 0,
              this.tcpPorts = [],
              this.udpPorts = []
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  return this.ip = e.popUInt32(),
                  this.tcpPorts = e.popUInt16Vector(),
                  this.udpPorts = e.popUInt16Vector(),
                  this
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.hopId = 0,
              this.value = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  return this.hopId = e.popUInt64(),
                  this.value = e.popUInt32(),
                  this
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var s = {
          PUBLISHER_CUR_BIT_RATE: 7,
          SERVER_H265_STREAM: 112,
          SERVER_FASTACCESS_MODE: 113,
          SERVER_FASTACCESS_FIRST_DTS: 117,
          SERVER_FASTACCESS_LAST_DTS: 118
      };
      t.default = s
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(9))
        , o = s(i(52))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamId = new r.default,
              this.videoProxyInfos = [],
              this.token = ""
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.streamId.unmarshall(e),
                  this.videoProxyInfos = [];
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = new o.default;
                      this.videoProxyInfos.push(s.unmarshall(e))
                  }
                  return this.token = e.popString(),
                  this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.strToken = ""
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default(!1);
                  return e.pushString(this.strToken),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(9)))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupIds = [],
              this.uid = 0,
              this.wlanIp = 0,
              this.wlanPort = 0,
              this.reject = 0,
              this.clientAreaType = 0,
              this.proxyAreaType = 0,
              this.firstViewer = 0,
              this.clientAppid = 0,
              this.subscribe = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.streamGroupIds = [];
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = new r.default;
                      this.streamGroupIds.push(s.unmarshall(e))
                  }
                  return this.uid = e.popUInt64(),
                  this.wlanIp = e.popUInt32(),
                  this.wlanPort = e.popUInt16(),
                  this.reject = e.popUInt8(),
                  this.clientAreaType = e.popUInt16(),
                  this.proxyAreaType = e.popUInt16(),
                  this.firstViewer = e.popUInt8(),
                  this.clientAppid = e.popUInt32(),
                  this.subscribe = e.popUInt8(),
                  this
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = s(i(9))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupId = new u.default,
              this.uid = 0,
              this.seqNums = []
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PPullStreamData),
                  e.pushUint8ArrayWithoutLen(this.streamGroupId.marshall()),
                  e.pushUInt64(this.uid),
                  e.pushUInt32Vector(this.seqNums),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = s(i(9))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupId = new u.default,
              this.sender = 0,
              this.receiver = 0,
              this.stampc = 0,
              this.seqNums = [],
              this.mergeSeq = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PReSendStreamData4),
                  e.pushUint8ArrayWithoutLen(this.streamGroupId.marshall()),
                  e.pushUInt64(this.sender),
                  e.pushUInt64(this.receiver),
                  e.pushUInt32(this.stampc),
                  e.pushUInt32Vector(this.seqNums),
                  e.pushUInt32(this.mergeSeq),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(9)))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupId = new r.default,
              this.uid = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  return this.streamGroupId.unmarshall(e),
                  this.uid = e.popUInt64(),
                  this
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3));
      s(i(9));
      var u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupIds = [],
              this.uid = 0,
              this.subscribe = !1,
              this.option = 0,
              this.playStamp = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PSubscribeStream3),
                  e.pushUInt32(this.streamGroupIds.length),
                  this.streamGroupIds.forEach(function(t) {
                      e.pushUint8ArrayWithoutLen(t.marshall())
                  }),
                  e.pushUInt64(this.uid),
                  e.pushBool(this.subscribe),
                  e.pushUInt32(this.option),
                  e.pushUInt32(this.playStamp),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = (s(i(2)),
      s(i(9)))
        , u = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.streamGroupId = new o.default,
              this.uid = 0,
              this.localTime = 0,
              this.osTime = 0,
              this.minBw = 0,
              this.streamId2SpeakerDelay = new a.default,
              this.curCodeRate = 0,
              this.reserve = 0,
              this.metaDatas = new a.default
          }
          return (0,
          r.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.streamGroupId.unmarshall(e),
                  this.uid = e.popUInt64(),
                  this.localTime = e.popUInt32(),
                  this.osTime = e.popUInt32(),
                  this.minBw = e.popUInt32(),
                  this.streamId2SpeakerDelay.clear();
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      (a = new o.default).unmarshall(e);
                      var s = e.popUInt32();
                      this.streamId2SpeakerDelay.set(a, s)
                  }
                  for (this.curCodeRate = e.popUInt16(),
                  this.reserve = e.popUInt32(),
                  this.metaDatas.clear(),
                  t = e.popUInt32(),
                  i = 0; i < t; i++) {
                      var a = e.popUInt8();
                      s = e.popUInt32(),
                      this.metaDatas.set(a, s)
                  }
                  return this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          ACCEPT_SUBSCRIBE: 0,
          EMPTY_UPLINK_BW: 1,
          DETECT_SUBSCRIBE_CYCLE: 2,
          EMPTY_PEER_INFO: 3,
          SUBSCRIBE_UPLINK_NOT_ENOUGH: 4,
          PUBLISHER_KICK_OFF: 5,
          NOT_SUBSCRIBER: 6,
          INVALID_SUB_STREAM: 7,
          ACCEPT_BY_SUBSCRIBER_UPLINK: 9,
          INVALID_STREAMID: 10,
          SERVER_EMPTY_BW: 11,
          PUBLISHER_LEAVE: 12,
          DIFFERENT_VIDEO_PROXY: 13,
          OLD_VERSION_REQ: 14,
          SUBSCRIBER_NO_PERMISSION: 15
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.ssrc = 0,
              this.framenum = 0,
              this.type = 0,
              this.framebase = 0,
              this.critical = !1,
              this.payload = null,
              this.transMode = 0,
              this.packData = !1,
              this.bHasVideoSid = !1,
              this.byteVoiceMarks = 0,
              this.capTimeStamp = 0,
              this.m_isMarshalVoiceMarks = !1
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(t) {
                  this.capTimeStamp = t.popUInt32(),
                  this.ssrc = t.popUInt8();
                  var i = t.popUInt8();
                  return this.type = t.popUInt16(),
                  this.framebase = t.popUInt32(),
                  this.payload = t.popUint8Array(),
                  t.bytesAvailable() ? this.byteVoiceMarks = t.popUInt8() : this.byteVoiceMarks = e.VOICE_MARK_KEY_BIT0,
                  this.framenum = i & e.FRAMENUM_MASK,
                  this.critical = !!(i & e.CRITICAL_MASK),
                  this.bHasVideoSid = !!(i & e.VIDEOSID_MASK),
                  this.transMode = 1 + ((i & e.FTMMODE_MASK) >> 4),
                  this
              }
          }, {
              key: "setIsKeyVoice",
              value: function(t) {
                  this.byteVoiceMarks |= t ? e.VOICE_MARK_KEY_BIT0 : 0
              }
          }, {
              key: "isKeyVoice",
              get: function() {
                  return this.byteVoiceMarks & e.VOICE_MARK_KEY_BIT0
              }
          }]),
          e
      }();
      r.FRAMENUM_MASK = 15,
      r.FTMMODE_MASK = 48,
      r.VIDEOSID_MASK = 64,
      r.CRITICAL_MASK = 128,
      r.VOICE_MARK_KEY_BIT0 = 1,
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e)
          }
          return (0,
          n.default)(e, null, [{
              key: "getSilentFrame",
              value: function(e, t) {
                  if (2 === e) {
                      if (1 === t)
                          return new Uint8Array([0, 200, 0, 128, 35, 128]);
                      if (2 === t)
                          return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                      if (3 === t)
                          return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
                      if (4 === t)
                          return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
                      if (5 === t)
                          return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
                      if (6 === t)
                          return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224])
                  } else {
                      if (1 === t)
                          return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                      if (2 === t)
                          return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                      if (3 === t)
                          return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94])
                  }
                  return null
              }
          }]),
          e
      }();
      r.emptyAacFrameAdts = [255, 241, 92, 64, 18, 64, 252, 0, 208, 32, 6, 238, 90, 119, 128, 0, 128, 0, 0, 0, 0, 26, 37, 65, 0, 13, 237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28],
      r.emptyAacFrame = [0, 208, 32, 6, 238, 90, 119, 128, 0, 128, 0, 0, 0, 0, 26, 37, 65, 0, 13, 237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28],
      r.emptyAacFrame_44_1 = [1, 64, 34, 128, 163, 78, 129, 64, 0, 0, 0, 0, 4, 96, 6, 246, 81, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94],
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(20))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(12))
        , u = function() {
          function e(t, i) {
              (0,
              n.default)(this, e),
              this.hyPlayer = t,
              this.mse = i,
              this.tickCnt = 0
          }
          return (0,
          r.default)(e, [{
              key: "reset",
              value: function() {
                  this.tickCnt = 0
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  4 !== ++this.tickCnt && this.tickCnt % 10 != 0 || this.trigger()
              }
          }, {
              key: "trigger",
              value: function() {
                  var e = {};
                  (0,
                  a.default)(e, this.mse.metadata),
                  this.hyPlayer.trigger(o.default.METADATA, e)
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      function a(e) {
          return "color:" + e + ";font-weight:900"
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var n = s(i(7))
        , r = s(i(0))
        , o = s(i(1))
        , u = s(i(17))
        , l = s(i(4))
        , d = s(i(2))
        , h = s(i(67))
        , f = s(i(48))
        , c = s(i(10))
        , p = s(i(6))
        , v = s(i(44))
        , y = s(i(8))
        , m = s(i(51))
        , _ = s(i(63))
        , P = s(i(65))
        , T = 0
        , S = function() {
          function e(t) {
              (0,
              r.default)(this, e),
              this.voiceInfo = t,
              this.presenterUid = t.presenterUid,
              this._num_ = ++T,
              this.uid = 0,
              this.link = new h.default(this,!0,100),
              this.printProtocol = !!Number(localStorage._printProtocol),
              this.started = !1,
              this.proxys = null,
              this.streamIds = [],
              this.tokens = new n.default,
              this.connectedTime = 0,
              this.lastGetProxyTime = 0,
              this.pingCnt = 0,
              this.wsUrl = "",
              this.sslUrl = ""
          }
          return (0,
          o.default)(e, [{
              key: "destroy",
              value: function() {
                  l.default.log("AudioLink.destroy", this.presenterUid),
                  this.close(),
                  this.link && this.link.destroy(),
                  this.link = null,
                  this.voiceInfo = null
              }
          }, {
              key: "close",
              value: function() {
                  this.started && (l.default.info("AudioLink.close", this.presenterUid),
                  this.started = !1,
                  this.reset(),
                  c.default.remove(this.onCheckTimer, this))
              }
          }, {
              key: "reset",
              value: function() {
                  l.default.log("AudioLink.reset", this.presenterUid),
                  this.vps = null,
                  this.link.destroy(),
                  this.link = new h.default(this,!0,100),
                  this.lastGetProxyTime = 0,
                  this.pingCnt = 0,
                  this.proxys = null,
                  this.streamIds = [],
                  this.tokens.clear(),
                  this.connectedTime = 0
              }
          }, {
              key: "connect",
              value: function(e) {
                  this.vps = e,
                  this.sslUrl = e.sslUrl || "",
                  l.default.log("AudioLink sslUrl=" + this.sslUrl);
                  var t = [];
                  if (e.allocatedStreams.forEach(function(e, i) {
                      t = t.concat(e)
                  }),
                  0 !== t.length) {
                      this.lastGetProxyTime = p.default.now() - 3e3,
                      this.link.destroy(),
                      this.link = new h.default(this,!0,100);
                      var i = this.tokens;
                      i.clear();
                      var s = []
                        , a = null;
                      if (t.forEach(function(e) {
                          var t = e.streamId
                            , n = t.streamType
                            , r = t.codecType;
                          n += n < 10 ? "\t\t" : "\t",
                          r += r < 10 ? "\t\t" : "\t",
                          l.default.info("sg --- streamType=" + n + "codecType=" + r + "startTs=" + t.startTs, t.isVideoStream ? "drop" : ""),
                          t.isVideoStream || (s.push(t),
                          i.set(t, e.token),
                          !a && e && (a = e.videoProxyInfos.slice()))
                      }),
                      !a || 0 != a.length)
                          return this.streamIds = s,
                          this.proxys = a,
                          this.started = !0,
                          this.pingCnt = 0,
                          this.reconnect(),
                          c.default.add(this.onCheckTimer, this, 1e3),
                          this.wsUrl.replace(/ws+?:\/\//g, "");
                      l.default.warn("AudioLink.connect NO STREAM!")
                  } else
                      l.default.warn("AudioLink.connect proxys is empty")
              }
          }, {
              key: "reconnect",
              value: function() {
                  if (this.started)
                      if (this.proxys && 0 != this.proxys.length) {
                          var e = this.proxys.shift();
                          this.isWss(e) ? this.connectWss(e) : this.connectWs(e)
                      } else
                          this.getProxy()
              }
          }, {
              key: "isWss",
              value: function(e) {
                  return !localStorage._audioWs && !(!this.sslUrl || !e.videoProxyInfo.has(8)) && e.videoProxyInfo.get(8) > 0
              }
          }, {
              key: "connectWs",
              value: function(e) {
                  var t = Math.floor(Math.random() * e.tcpPorts.length)
                    , i = t;
                  if (465 === e.tcpPorts[t] && (++t >= e.tcpPorts.length && (t = 0),
                  t === i))
                      return l.default.warn("AudioLink.connect has no correct ports"),
                      void this.reconnect();
                  this.wsUrl = "ws://" + e.ip + ":" + e.tcpPorts[t],
                  l.default.info("%cconnecting audio " + this.wsUrl, a("#0000E3"), this.presenterUid),
                  localStorage._setWssUrl ? this.link.connect(localStorage._setWssUrl) : this.link.connect(this.wsUrl)
              }
          }, {
              key: "connectWss",
              value: function(e) {
                  var t = e.videoProxyInfo.get(8)
                    , i = [t >> 16, 65535 & t]
                    , s = i[Math.floor(Math.random() * i.length)];
                  this.wsUrl = "wss://" + y.default.ip2uint(e.ip) + this.sslUrl + ":" + s,
                  l.default.info("%cconnecting audio " + this.wsUrl, a("#0000E3"), this.presenterUid),
                  localStorage._setWssUrl ? this.link.connect(localStorage._setWssUrl) : this.link.connect(this.wsUrl)
              }
          }, {
              key: "send",
              value: function(e) {
                  if (!e || !this.connected)
                      return !1;
                  var t = e.constructor.name;
                  return this.printProtocol && !g[t] && l.default.debug("%c>>>>> " + t, a("#F101AC"), e),
                  "Uint8Array" != t && (e = e.marshall()),
                  this.link.send(e),
                  !0
              }
          }, {
              key: "getProxy",
              value: function() {
                  var e = p.default.now();
                  e - this.lastGetProxyTime < 4e3 || (l.default.log("AudioLink.getProxy lastGetProxyTime=" + this.lastGetProxyTime + " now=" + e),
                  this.reset(),
                  this.lastGetProxyTime = e,
                  u.default.audioMgr.startVoice(this.voiceInfo))
              }
          }, {
              key: "onopen",
              value: function() {
                  l.default.log("AudioLink.onopen", this.presenterUid);
                  var e = p.default.now();
                  this.connectedTime = e,
                  u.default.addListener(d.default.PLoginVideoProxyUniformlyRes, this.onLoginVideoProxy, this),
                  u.default.addListener(d.default.PVideoProxyPingRes4, this.onVideoProxyPingRes, this),
                  this.login()
              }
          }, {
              key: "onclose",
              value: function() {
                  l.default.log("%cAudioLink.onclose", "color:white;background:black;", this.presenterUid),
                  this.connectedTime = 0,
                  this.reconnect()
              }
          }, {
              key: "onerror",
              value: function(e) {
                  l.default.warn("AudioLink.onerror", this.presenterUid, e),
                  this.reconnect()
              }
          }, {
              key: "onData",
              value: function(e, t) {
                  var s = new f.default(t)
                    , n = d.default[e];
                  if (!n)
                      throw new Error("[x] Unmatched uri, uri=" + (s.uri >> 8) + " resCode=" + s.resCode + " len=" + s.len);
                  var r = s
                    , o = null;
                  try {
                      o = i(91)("./" + n).default
                  } catch (t) {
                      l.default.warn("%c[x] Unmatched protocol " + (e >> 8) + " " + n, "color:red;background:#FFF0F0")
                  }
                  o && (null == (r = new o).unmarshall ? l.default.error("[x]" + n + ".unmarshall undefined!") : r.unmarshall(s)),
                  Number(localStorage._printAudioPkg) && e == d.default.PStreamData3 && l.default.debug(this._num_, "-----------", r),
                  this.printProtocol && !g[n] && l.default.debug("%c<<<<< " + n, a("#6F00D2"), r),
                  r._isFromVoice = !0,
                  u.default._onYYData(e, r)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  this.started && (this.onPingTimer(e, t),
                  this.onCheckConnect(e, t))
              }
          }, {
              key: "onPingTimer",
              value: function(e, t) {
                  if (this.link.connected && t % 3 == 0) {
                      if (this.pingCnt >= 4)
                          return l.default.warn("AudioLink.onPingTimer ping time out", this.presenterUid),
                          void this.reconnect();
                      this.pingCnt++;
                      var i = new P.default;
                      i.uid = this.uid,
                      i.stampc = e,
                      i.loginStamp = 0,
                      i.uplinkBw = 0,
                      i.availPeers = 0,
                      i.bPunched = !1,
                      i.tcpEstableIds = 0,
                      i.tcpId = 0,
                      i.vipUser = 0,
                      i.vipProxy = 0,
                      this.send(i)
                  }
              }
          }, {
              key: "onCheckConnect",
              value: function(e) {
                  this.connected || this.reconnect()
              }
          }, {
              key: "login",
              value: function() {
                  var e = new _.default;
                  e.version = 1,
                  e.uid = this.uid,
                  e.streamGroupIds = this.streamIds,
                  e.clientAppid = 301,
                  e.clientType = 1,
                  e.loginStamp = p.default.now(),
                  e.videoGroupId = this.vps.videoGroupId,
                  e.tcpId = 0,
                  e.commandType = 1,
                  e.fastAccessInterval = u.default.getConfig(v.default.VIDEO_JIT_BUFLEN),
                  e.fastAccessInterval > 0 && e.fastAccessInterval < 2e3 && (e.fastAccessInterval = 2e3),
                  e.cookie = "",
                  e.localIps = [],
                  e.localPort = 0,
                  e.sdkVersion = 1,
                  e.token = "",
                  e.tokenVersion = this.vps.tokenVersion,
                  e.tokens = this.tokens,
                  e.audioCodecType = [m.default.AUDIO_AACPLUS],
                  e.serviceType = this.voiceInfo.serviceType,
                  e.loginSeq = 0,
                  this.send(e)
              }
          }, {
              key: "onLoginVideoProxy",
              value: function(e) {
                  e.reject > 0 && l.default.warn("AudioLink.onLoginVideoProxy reject=" + e.reject)
              }
          }, {
              key: "onVideoProxyPingRes",
              value: function(e) {
                  this.pingCnt = 0
              }
          }, {
              key: "connected",
              get: function() {
                  return this.link && this.link.connected
              }
          }]),
          e
      }();
      t.default = S;
      var g = {
          PStreamData3: 1,
          PVideoProxyPing3: 1,
          PVideoProxyPingRes4: 1,
          PNotifyCurrentStream4: 1,
          PP2pVideoPing3: 1,
          PNotifyUplinkRecvCount3: 1,
          PVideoSyncSpeakerTime3: 1
      }
  }
  , function(e, t) {
      e.exports = function(e) {
          if ("function" != typeof e)
              throw TypeError(e + " is not a function!");
          return e
      }
  }
  , function(e, t, i) {
      e.exports = !i(19) && !i(31)(function() {
          return 7 != Object.defineProperty(i(113)("div"), "a", {
              get: function() {
                  return 7
              }
          }).a
      })
  }
  , function(e, t, i) {
      var s = i(23)
        , a = i(21).document
        , n = s(a) && s(a.createElement);
      e.exports = function(e) {
          return n ? a.createElement(e) : {}
      }
  }
  , function(e, t, i) {
      var s = i(32)
        , a = i(35)
        , n = i(218)(!1)
        , r = i(73)("IE_PROTO");
      e.exports = function(e, t) {
          var i, o = a(e), u = 0, l = [];
          for (i in o)
              i != r && s(o, i) && l.push(i);
          for (; t.length > u; )
              s(o, i = t[u++]) && (~n(l, i) || l.push(i));
          return l
      }
  }
  , function(e, t, i) {
      e.exports = i(27)
  }
  , function(e, t, i) {
      var s = i(32)
        , a = i(36)
        , n = i(73)("IE_PROTO")
        , r = Object.prototype;
      e.exports = Object.getPrototypeOf || function(e) {
          return e = a(e),
          s(e, n) ? e[n] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? r : null
      }
  }
  , function(e, t) {
      e.exports = function(e, t) {
          return {
              value: t,
              done: !!e
          }
      }
  }
  , function(e, t, i) {
      var s = i(70);
      e.exports = Array.isArray || function(e) {
          return "Array" == s(e)
      }
  }
  , function(e, t, i) {
      var s = i(114)
        , a = i(75).concat("length", "prototype");
      t.f = Object.getOwnPropertyNames || function(e) {
          return s(e, a)
      }
  }
  , function(e, t, i) {
      var s = i(57)
        , a = i(45)
        , n = i(35)
        , r = i(68)
        , o = i(32)
        , u = i(112)
        , l = Object.getOwnPropertyDescriptor;
      t.f = i(19) ? l : function(e, t) {
          if (e = n(e),
          t = r(t, !0),
          u)
              try {
                  return l(e, t)
              } catch (e) {}
          if (o(e, t))
              return a(!s.f.call(e, t), e[t])
      }
  }
  , function(e, t, i) {
      function a() {
          a.init.call(this)
      }
      function n(e) {
          return void 0 === e._maxListeners ? a.defaultMaxListeners : e._maxListeners
      }
      function r(e, t, i, a) {
          var r, o, u, l;
          if ("function" != typeof i)
              throw new TypeError('The "listener" argument must be of type Function. Received type ' + (void 0 === i ? "undefined" : s(i)));
          if (void 0 === (o = e._events) ? (o = e._events = Object.create(null),
          e._eventsCount = 0) : (void 0 !== o.newListener && (e.emit("newListener", t, i.listener ? i.listener : i),
          o = e._events),
          u = o[t]),
          void 0 === u)
              u = o[t] = i,
              ++e._eventsCount;
          else if ("function" == typeof u ? u = o[t] = a ? [i, u] : [u, i] : a ? u.unshift(i) : u.push(i),
          (r = n(e)) > 0 && u.length > r && !u.warned) {
              u.warned = !0;
              var d = new Error("Possible EventEmitter memory leak detected. " + u.length + " " + String(t) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              d.name = "MaxListenersExceededWarning",
              d.emitter = e,
              d.type = t,
              d.count = u.length,
              l = d,
              console && console.warn && console.warn(l)
          }
          return e
      }
      function o() {
          for (var e = [], t = 0; t < arguments.length; t++)
              e.push(arguments[t]);
          this.fired || (this.target.removeListener(this.type, this.wrapFn),
          this.fired = !0,
          p(this.listener, this.target, e))
      }
      function u(e, t, i) {
          var s = {
              fired: !1,
              wrapFn: void 0,
              target: e,
              type: t,
              listener: i
          }
            , a = o.bind(s);
          return a.listener = i,
          s.wrapFn = a,
          a
      }
      function l(e, t, i) {
          var s = e._events;
          if (void 0 === s)
              return [];
          var a = s[t];
          return void 0 === a ? [] : "function" == typeof a ? i ? [a.listener || a] : [a] : i ? function(e) {
              for (var t = new Array(e.length), i = 0; i < t.length; ++i)
                  t[i] = e[i].listener || e[i];
              return t
          }(a) : h(a, a.length)
      }
      function d(e) {
          var t = this._events;
          if (void 0 !== t) {
              var i = t[e];
              if ("function" == typeof i)
                  return 1;
              if (void 0 !== i)
                  return i.length
          }
          return 0
      }
      function h(e, t) {
          for (var i = new Array(t), s = 0; s < t; ++s)
              i[s] = e[s];
          return i
      }
      var f, c = "object" == ("undefined" == typeof Reflect ? "undefined" : s(Reflect)) ? Reflect : null, p = c && "function" == typeof c.apply ? c.apply : function(e, t, i) {
          return Function.prototype.apply.call(e, t, i)
      }
      ;
      f = c && "function" == typeof c.ownKeys ? c.ownKeys : Object.getOwnPropertySymbols ? function(e) {
          return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))
      }
      : function(e) {
          return Object.getOwnPropertyNames(e)
      }
      ;
      var v = Number.isNaN || function(e) {
          return e != e
      }
      ;
      e.exports = a,
      a.EventEmitter = a,
      a.prototype._events = void 0,
      a.prototype._eventsCount = 0,
      a.prototype._maxListeners = void 0;
      var y = 10;
      Object.defineProperty(a, "defaultMaxListeners", {
          enumerable: !0,
          get: function() {
              return y
          },
          set: function(e) {
              if ("number" != typeof e || e < 0 || v(e))
                  throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e + ".");
              y = e
          }
      }),
      a.init = function() {
          void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null),
          this._eventsCount = 0),
          this._maxListeners = this._maxListeners || void 0
      }
      ,
      a.prototype.setMaxListeners = function(e) {
          if ("number" != typeof e || e < 0 || v(e))
              throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
          return this._maxListeners = e,
          this
      }
      ,
      a.prototype.getMaxListeners = function() {
          return n(this)
      }
      ,
      a.prototype.emit = function(e) {
          for (var t = [], i = 1; i < arguments.length; i++)
              t.push(arguments[i]);
          var s = "error" === e
            , a = this._events;
          if (void 0 !== a)
              s = s && void 0 === a.error;
          else if (!s)
              return !1;
          if (s) {
              var n;
              if (t.length > 0 && (n = t[0]),
              n instanceof Error)
                  throw n;
              var r = new Error("Unhandled error." + (n ? " (" + n.message + ")" : ""));
              throw r.context = n,
              r
          }
          var o = a[e];
          if (void 0 === o)
              return !1;
          if ("function" == typeof o)
              p(o, this, t);
          else {
              var u = o.length
                , l = h(o, u);
              for (i = 0; i < u; ++i)
                  p(l[i], this, t)
          }
          return !0
      }
      ,
      a.prototype.addListener = function(e, t) {
          return r(this, e, t, !1)
      }
      ,
      a.prototype.on = a.prototype.addListener,
      a.prototype.prependListener = function(e, t) {
          return r(this, e, t, !0)
      }
      ,
      a.prototype.once = function(e, t) {
          if ("function" != typeof t)
              throw new TypeError('The "listener" argument must be of type Function. Received type ' + (void 0 === t ? "undefined" : s(t)));
          return this.on(e, u(this, e, t)),
          this
      }
      ,
      a.prototype.prependOnceListener = function(e, t) {
          if ("function" != typeof t)
              throw new TypeError('The "listener" argument must be of type Function. Received type ' + (void 0 === t ? "undefined" : s(t)));
          return this.prependListener(e, u(this, e, t)),
          this
      }
      ,
      a.prototype.removeListener = function(e, t) {
          var i, a, n, r, o;
          if ("function" != typeof t)
              throw new TypeError('The "listener" argument must be of type Function. Received type ' + (void 0 === t ? "undefined" : s(t)));
          if (void 0 === (a = this._events))
              return this;
          if (void 0 === (i = a[e]))
              return this;
          if (i === t || i.listener === t)
              0 == --this._eventsCount ? this._events = Object.create(null) : (delete a[e],
              a.removeListener && this.emit("removeListener", e, i.listener || t));
          else if ("function" != typeof i) {
              for (n = -1,
              r = i.length - 1; r >= 0; r--)
                  if (i[r] === t || i[r].listener === t) {
                      o = i[r].listener,
                      n = r;
                      break
                  }
              if (n < 0)
                  return this;
              0 === n ? i.shift() : function(e, t) {
                  for (; t + 1 < e.length; t++)
                      e[t] = e[t + 1];
                  e.pop()
              }(i, n),
              1 === i.length && (a[e] = i[0]),
              void 0 !== a.removeListener && this.emit("removeListener", e, o || t)
          }
          return this
      }
      ,
      a.prototype.off = a.prototype.removeListener,
      a.prototype.removeAllListeners = function(e) {
          var t, i, s;
          if (void 0 === (i = this._events))
              return this;
          if (void 0 === i.removeListener)
              return 0 === arguments.length ? (this._events = Object.create(null),
              this._eventsCount = 0) : void 0 !== i[e] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete i[e]),
              this;
          if (0 === arguments.length) {
              var a, n = Object.keys(i);
              for (s = 0; s < n.length; ++s)
                  "removeListener" !== (a = n[s]) && this.removeAllListeners(a);
              return this.removeAllListeners("removeListener"),
              this._events = Object.create(null),
              this._eventsCount = 0,
              this
          }
          if ("function" == typeof (t = i[e]))
              this.removeListener(e, t);
          else if (void 0 !== t)
              for (s = t.length - 1; s >= 0; s--)
                  this.removeListener(e, t[s]);
          return this
      }
      ,
      a.prototype.listeners = function(e) {
          return l(this, e, !0)
      }
      ,
      a.prototype.rawListeners = function(e) {
          return l(this, e, !1)
      }
      ,
      a.listenerCount = function(e, t) {
          return "function" == typeof e.listenerCount ? e.listenerCount(t) : d.call(e, t)
      }
      ,
      a.prototype.listenerCount = d,
      a.prototype.eventNames = function() {
          return this._eventsCount > 0 ? f(this._events) : []
      }
  }
  , function(e, t, i) {
      var s = i(18).f
        , a = i(59)
        , n = i(123)
        , r = i(30)
        , o = i(124)
        , u = i(61)
        , l = i(77)
        , d = i(117)
        , h = i(251)
        , f = i(19)
        , c = i(79).fastKey
        , p = i(85)
        , v = f ? "_s" : "size"
        , y = function(e, t) {
          var i, s = c(t);
          if ("F" !== s)
              return e._i[s];
          for (i = e._f; i; i = i.n)
              if (i.k == t)
                  return i
      };
      e.exports = {
          getConstructor: function(e, t, i, l) {
              var d = e(function(e, s) {
                  o(e, d, t, "_i"),
                  e._t = t,
                  e._i = a(null),
                  e._f = void 0,
                  e._l = void 0,
                  e[v] = 0,
                  null != s && u(s, i, e[l], e)
              });
              return n(d.prototype, {
                  clear: function() {
                      for (var e = p(this, t), i = e._i, s = e._f; s; s = s.n)
                          s.r = !0,
                          s.p && (s.p = s.p.n = void 0),
                          delete i[s.i];
                      e._f = e._l = void 0,
                      e[v] = 0
                  },
                  delete: function(e) {
                      var i = p(this, t)
                        , s = y(i, e);
                      if (s) {
                          var a = s.n
                            , n = s.p;
                          delete i._i[s.i],
                          s.r = !0,
                          n && (n.n = a),
                          a && (a.p = n),
                          i._f == s && (i._f = a),
                          i._l == s && (i._l = n),
                          i[v]--
                      }
                      return !!s
                  },
                  forEach: function(e) {
                      p(this, t);
                      for (var i, s = r(e, arguments.length > 1 ? arguments[1] : void 0, 3); i = i ? i.n : this._f; )
                          for (s(i.v, i.k, this); i && i.r; )
                              i = i.p
                  },
                  has: function(e) {
                      return !!y(p(this, t), e)
                  }
              }),
              f && s(d.prototype, "size", {
                  get: function() {
                      return p(this, t)[v]
                  }
              }),
              d
          },
          def: function(e, t, i) {
              var s, a, n = y(e, t);
              return n ? n.v = i : (e._l = n = {
                  i: a = c(t, !0),
                  k: t,
                  v: i,
                  p: s = e._l,
                  n: void 0,
                  r: !1
              },
              e._f || (e._f = n),
              s && (s.n = n),
              e[v]++,
              "F" !== a && (e._i[a] = n)),
              e
          },
          getEntry: y,
          setStrong: function(e, t, i) {
              l(e, t, function(e, i) {
                  this._t = p(e, t),
                  this._k = i,
                  this._l = void 0
              }, function() {
                  for (var e = this._k, t = this._l; t && t.r; )
                      t = t.p;
                  return this._t && (this._l = t = t ? t.n : this._t._f) ? d(0, "keys" == e ? t.k : "values" == e ? t.v : [t.k, t.v]) : (this._t = void 0,
                  d(1))
              }, i ? "entries" : "values", !i, !0),
              h(t)
          }
      }
  }
  , function(e, t, i) {
      var s = i(27);
      e.exports = function(e, t, i) {
          for (var a in t)
              i && e[a] ? e[a] = t[a] : s(e, a, t[a]);
          return e
      }
  }
  , function(e, t) {
      e.exports = function(e, t, i, s) {
          if (!(e instanceof t) || void 0 !== s && s in e)
              throw TypeError(i + ": incorrect invocation!");
          return e
      }
  }
  , function(e, t, i) {
      var s = i(28);
      e.exports = function(e, t, i, a) {
          try {
              return a ? t(s(i)[0], i[1]) : t(i)
          } catch (t) {
              var n = e.return;
              throw void 0 !== n && s(n.call(e)),
              t
          }
      }
  }
  , function(e, t, i) {
      var s = i(38)
        , a = i(15)("iterator")
        , n = Array.prototype;
      e.exports = function(e) {
          return void 0 !== e && (s.Array === e || n[a] === e)
      }
  }
  , function(e, t, i) {
      var s = i(21)
        , a = i(14)
        , n = i(79)
        , r = i(31)
        , o = i(27)
        , u = i(123)
        , l = i(61)
        , d = i(124)
        , h = i(23)
        , f = i(60)
        , c = i(18).f
        , p = i(252)(0)
        , v = i(19);
      e.exports = function(e, t, i, y, m, _) {
          var P = s[e]
            , T = P
            , S = m ? "set" : "add"
            , g = T && T.prototype
            , I = {};
          return v && "function" == typeof T && (_ || g.forEach && !r(function() {
              (new T).entries().next()
          })) ? (T = t(function(t, i) {
              d(t, T, e, "_c"),
              t._c = new P,
              null != i && l(i, m, t[S], t)
          }),
          p("add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON".split(","), function(e) {
              var t = "add" == e || "set" == e;
              e in g && (!_ || "clear" != e) && o(T.prototype, e, function(i, s) {
                  if (d(this, T, e),
                  !t && _ && !h(i))
                      return "get" == e && void 0;
                  var a = this._c[e](0 === i ? 0 : i, s);
                  return t ? this : a
              })
          }),
          _ || c(T.prototype, "size", {
              get: function() {
                  return this._c.size
              }
          })) : (T = y.getConstructor(t, e, m, S),
          u(T.prototype, i),
          n.NEED = !0),
          f(T, e),
          I[e] = T,
          a(a.G + a.W + a.F, I),
          _ || y.setStrong(T, e, m),
          T
      }
  }
  , function(e, t, i) {
      var s = i(84)
        , a = i(256);
      e.exports = function(e) {
          return function() {
              if (s(this) != e)
                  throw TypeError(e + "#toJSON isn't generic");
              return a(this)
          }
      }
  }
  , function(e, t, i) {
      var s = i(14);
      e.exports = function(e) {
          s(s.S, e, {
              of: function() {
                  for (var e = arguments.length, t = new Array(e); e--; )
                      t[e] = arguments[e];
                  return new this(t)
              }
          })
      }
  }
  , function(e, t, i) {
      var s = i(14)
        , a = i(111)
        , n = i(30)
        , r = i(61);
      e.exports = function(e) {
          s(s.S, e, {
              from: function(e) {
                  var t, i, s, o, u = arguments[1];
                  return a(this),
                  (t = void 0 !== u) && a(u),
                  null == e ? new this : (i = [],
                  t ? (s = 0,
                  o = n(u, arguments[2], 2),
                  r(e, !1, function(e) {
                      i.push(o(e, s++))
                  })) : r(e, !1, i.push, i),
                  new this(i))
              }
          })
      }
  }
  , function(e, t, i) {
      function s(e) {
          var t = a(e);
          return i(t)
      }
      function a(e) {
          if (!i.o(n, e)) {
              var t = new Error("Cannot find module '" + e + "'");
              throw t.code = "MODULE_NOT_FOUND",
              t
          }
          return n[e]
      }
      var n = {
          "./CdnAllocateInfo": 86,
          "./CdnAllocateInfo.js": 86,
          "./CdnGroupID": 5,
          "./CdnGroupID.js": 5,
          "./CdnGroupUsers": 132,
          "./CdnGroupUsers.js": 132,
          "./CurrentCdnProxyInfo": 88,
          "./CurrentCdnProxyInfo.js": 88,
          "./ESliceConfig": 133,
          "./ESliceConfig.js": 133,
          "./IpInfo": 134,
          "./IpInfo.js": 134,
          "./P2PAnswer": 135,
          "./P2PAnswer.js": 135,
          "./P2PCandidate": 136,
          "./P2PCandidate.js": 136,
          "./P2PKeepAlive": 137,
          "./P2PKeepAlive.js": 137,
          "./P2PKeepAliveInfo": 62,
          "./P2PKeepAliveInfo.js": 62,
          "./P2PKeepAliveRes": 138,
          "./P2PKeepAliveRes.js": 138,
          "./P2PKeepAliveWebrtc": 139,
          "./P2PKeepAliveWebrtc.js": 139,
          "./P2PKeepAliveWebrtcRes": 140,
          "./P2PKeepAliveWebrtcRes.js": 140,
          "./P2PNotifyNodeLeave": 141,
          "./P2PNotifyNodeLeave.js": 141,
          "./P2POffer": 142,
          "./P2POffer.js": 142,
          "./P2POfferReject": 143,
          "./P2POfferReject.js": 143,
          "./P2PPunchBackReq": 144,
          "./P2PPunchBackReq.js": 144,
          "./P2PPunchBackRsp": 145,
          "./P2PPunchBackRsp.js": 145,
          "./P2PRemoveSub": 146,
          "./P2PRemoveSub.js": 146,
          "./P2PRemoveSubRes": 147,
          "./P2PRemoveSubRes.js": 147,
          "./P2PRequestOffer": 148,
          "./P2PRequestOffer.js": 148,
          "./P2PStreamAlive": 149,
          "./P2PStreamAlive.js": 149,
          "./P2PSubStream": 150,
          "./P2PSubStream.js": 150,
          "./P2PSubStreamRes": 151,
          "./P2PSubStreamRes.js": 151,
          "./P2PSubscribeResCode": 152,
          "./P2PSubscribeResCode.js": 152,
          "./P2PSyncDepth": 153,
          "./P2PSyncDepth.js": 153,
          "./P2PSyncSubTree": 154,
          "./P2PSyncSubTree.js": 154,
          "./P2PWSForward": 155,
          "./P2PWSForward.js": 155,
          "./PCDNCompeteSubscribeReq": 156,
          "./PCDNCompeteSubscribeReq.js": 156,
          "./PCDNCompeteSubscribeRes": 157,
          "./PCDNCompeteSubscribeRes.js": 157,
          "./PCDNForceSubscribeNotify": 159,
          "./PCDNForceSubscribeNotify.js": 159,
          "./PCDNGetProxyListReq": 160,
          "./PCDNGetProxyListReq.js": 160,
          "./PCDNGetProxyListRsp": 161,
          "./PCDNGetProxyListRsp.js": 161,
          "./PCDNGetSliceStreamInfoReq": 162,
          "./PCDNGetSliceStreamInfoReq.js": 162,
          "./PCDNGetSliceStreamInfoRsp": 163,
          "./PCDNGetSliceStreamInfoRsp.js": 163,
          "./PCDNSubscribeReq": 164,
          "./PCDNSubscribeReq.js": 164,
          "./PCDNSubscribeRes": 165,
          "./PCDNSubscribeRes.js": 165,
          "./PCdnForceConnectVideoProxy": 166,
          "./PCdnForceConnectVideoProxy.js": 166,
          "./PCdnP2PErrStatics": 167,
          "./PCdnP2PErrStatics.js": 167,
          "./PCdnP2PUserRegister": 168,
          "./PCdnP2PUserRegister.js": 168,
          "./PCdnP2PUserRegisterRes": 169,
          "./PCdnP2PUserRegisterRes.js": 169,
          "./PCdnP2PWSForward": 170,
          "./PCdnP2PWSForward.js": 170,
          "./PCdnP2PWSForwardReject": 171,
          "./PCdnP2PWSForwardReject.js": 171,
          "./PCdnP2pGetNode": 172,
          "./PCdnP2pGetNode.js": 172,
          "./PCdnP2pGetNodeRes": 173,
          "./PCdnP2pGetNodeRes.js": 173,
          "./PCdnP2pReportLog": 174,
          "./PCdnP2pReportLog.js": 174,
          "./PCdnP2pUserUnRegister": 175,
          "./PCdnP2pUserUnRegister.js": 175,
          "./PCdnProxyPing": 176,
          "./PCdnProxyPing.js": 176,
          "./PCdnProxyPingRes": 177,
          "./PCdnProxyPingRes.js": 177,
          "./PP2PStaticsPkg3": 178,
          "./PP2PStaticsPkg3.js": 178,
          "./PP2pSliceAudioData": 179,
          "./PP2pSliceAudioData.js": 179,
          "./PP2pSliceCommonData": 180,
          "./PP2pSliceCommonData.js": 180,
          "./PP2pSliceControlData": 181,
          "./PP2pSliceControlData.js": 181,
          "./PP2pSliceData": 90,
          "./PP2pSliceData.js": 90,
          "./PP2pSliceSignalData": 182,
          "./PP2pSliceSignalData.js": 182,
          "./PP2pSliceVideoData": 183,
          "./PP2pSliceVideoData.js": 183,
          "./ProxyPeerInfo2": 89,
          "./ProxyPeerInfo2.js": 89,
          "./SlaveProxyInfo": 49,
          "./SlaveProxyInfo.js": 49,
          "./StreamCodecType": 87,
          "./StreamCodecType.js": 87
      };
      s.keys = function() {
          return Object.keys(n)
      }
      ,
      s.resolve = a,
      e.exports = s,
      s.id = 131
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(5))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new o.default,
              this.userCnt = 0,
              this.virUserCnt = 0,
              this.codeRate = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default(!1);
                  return e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt32(this.userCnt),
                  e.pushUInt32(this.virUserCnt),
                  e.pushUInt32(this.codeRate),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  return this.cdnGroupId.unmarshall(e),
                  this.userCnt = e.popUInt32(),
                  this.virUserCnt = e.popUInt32(),
                  this.codeRate = e.popUInt32(),
                  this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          eSliceCfgStartIndexH: 1,
          eSliceCfgStartIndexL: 2,
          eSliceCfgIStampc: 3,
          eSliceCfgPreQuickIndex: 5,
          eSliceCfgFAPatchIndexH: 8,
          eSliceCfgFAPatchIndexL: 9,
          eSliceCfgStreamIdH: 10,
          eSliceCfgStreamIdL: 11
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.ip = 0,
              this.tcpPorts = [],
              this.udpPorts = []
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  return this.ip = e.popUInt32(),
                  this.tcpPorts = e.popUInt16Vector(),
                  this.udpPorts = e.popUInt16Vector(),
                  this
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.lineType = 0,
              this.fromUid = 0,
              this.toUid = 0,
              this.sdp = "",
              this.sdpType = ""
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PAnswer),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt8(this.lineType),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt64(this.toUid),
                  e.pushString(this.sdp),
                  e.pushString(this.sdpType),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.lineType = e.popUInt8(),
                  this.fromUid = e.popUInt64(),
                  this.toUid = e.popUInt64(),
                  this.sdp = e.popString(),
                  this.sdpType = e.popString()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.lineType = 0,
              this.fromUid = 0,
              this.toUid = 0,
              this.sdpMLineIndex = 0,
              this.sdpMid = "",
              this.candidate = ""
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PCandidate),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt8(this.lineType),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt64(this.toUid),
                  e.pushUInt32(this.sdpMLineIndex),
                  e.pushString(this.sdpMid),
                  e.pushString(this.candidate),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.lineType = e.popUInt8(),
                  this.fromUid = e.popUInt64(),
                  this.toUid = e.popUInt64(),
                  this.sdpMLineIndex = e.popUInt32(),
                  this.sdpMid = e.popString(),
                  this.candidate = e.popString()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.fromUid = 0,
              this.timeStampc = 0,
              this.uplinkBw = 0,
              this.sendCount = 0,
              this.streamDelay = [],
              this.subMinBw = 0,
              this.curSid = 0,
              this.subNum = 0,
              this.remainUplinkNum = 0,
              this.cdnpip = 0,
              this.maxSeqs = []
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PKeepAlive),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt32(this.timeStampc),
                  e.pushUInt32(this.uplinkBw),
                  e.pushUInt32(this.sendCount),
                  e.pushUInt16Vector(this.streamDelay),
                  e.pushUInt32(this.subMinBw),
                  e.pushUInt64(this.curSid),
                  e.pushUInt8(this.subNum),
                  e.pushUInt8(this.remainUplinkNum),
                  e.pushUInt32(this.cdnpip),
                  e.pushUInt64Vector(this.maxSeqs),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.fromUid = e.popUInt64(),
                  this.timeStampc = e.popUInt32(),
                  this.uplinkBw = e.popUInt32(),
                  this.sendCount = e.popUInt32(),
                  this.streamDelay = e.popUInt16Vector(),
                  this.subMinBw = e.popUInt32(),
                  this.curSid = e.popUInt64(),
                  this.subNum = e.popUInt8(),
                  this.remainUplinkNum = e.popUInt8(),
                  this.cdnpip = e.popUInt32(),
                  this.maxSeqs = e.popUInt64Vector()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.fromUid = 0,
              this.timeStampc = 0,
              this.uplinkBw = 0,
              this.sendCount = 0,
              this.recvCount = 0,
              this.streamDelay = [],
              this.subMinBw = 0,
              this.curSid = 0,
              this.subNum = 0,
              this.remainUplinkNum = 0,
              this.cdnpip = 0,
              this.maxSeqs = []
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PKeepAliveRes),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt32(this.timeStampc),
                  e.pushUInt32(this.uplinkBw),
                  e.pushUInt32(this.sendCount),
                  e.pushUInt32(this.recvCount),
                  e.pushUInt16Vector(this.streamDelay),
                  e.pushUInt32(this.subMinBw),
                  e.pushUInt64(this.curSid),
                  e.pushUInt8(this.subNum),
                  e.pushUInt8(this.remainUplinkNum),
                  e.pushUInt32(this.cdnpip),
                  e.pushUInt64Vector(this.maxSeqs),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.fromUid = e.popUInt64(),
                  this.timeStampc = e.popUInt32(),
                  this.uplinkBw = e.popUInt32(),
                  this.sendCount = e.popUInt32(),
                  this.recvCount = e.popUInt32(),
                  this.streamDelay = e.popUInt16Vector(),
                  this.subMinBw = e.popUInt32(),
                  this.curSid = e.popUInt64(),
                  this.subNum = e.popUInt8(),
                  this.remainUplinkNum = e.popUInt8(),
                  this.cdnpip = e.popUInt32(),
                  this.maxSeqs = e.popUInt64Vector()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(16))
        , n = s(i(7))
        , r = s(i(0))
        , o = s(i(1))
        , u = s(i(3))
        , l = s(i(2))
        , d = s(i(62))
        , h = function() {
          function e() {
              (0,
              r.default)(this, e),
              this.fromUid = 0,
              this.timeStampc = 0,
              this.uplinkBw = 0,
              this.sendCount = 0,
              this.subMinBw = 0,
              this.curSid = 0,
              this.remainUplinkNum = 0,
              this.cdnpipArr = [],
              this.infoMap = new n.default
          }
          return (0,
          o.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new u.default;
                  e.setUri(l.default.P2PKeepAliveWebrtc),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt32(this.timeStampc),
                  e.pushUInt32(this.uplinkBw),
                  e.pushUInt32(this.sendCount),
                  e.pushUInt32(this.subMinBw),
                  e.pushUInt64(this.curSid),
                  e.pushUInt8(this.remainUplinkNum),
                  e.pushUInt32Vector(this.cdnpipArr),
                  e.pushUInt8(this.infoMap.size);
                  var t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var n, r = (0,
                      a.default)(this.infoMap.keys()); !(t = (n = r.next()).done); t = !0) {
                          var o = n.value;
                          e.pushUInt64(o),
                          this.infoMap.get(o).marshall(e)
                      }
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
                  return e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.fromUid = e.popUInt64(),
                  this.timeStampc = e.popUInt32(),
                  this.uplinkBw = e.popUInt32(),
                  this.sendCount = e.popUInt32(),
                  this.subMinBw = e.popUInt32(),
                  this.curSid = e.popUInt64(),
                  this.remainUplinkNum = e.popUInt8(),
                  this.cdnpip = e.popUInt32Vector(),
                  this.infoMap.clear();
                  for (var t = e.popUInt8(), i = 0; i < t; i++) {
                      var s = e.popUInt64()
                        , a = new d.default;
                      a.unmarshall(e),
                      this.infoMap.set(s, a)
                  }
              }
          }]),
          e
      }();
      t.default = h
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(16))
        , n = s(i(7))
        , r = s(i(0))
        , o = s(i(1))
        , u = s(i(3))
        , l = s(i(2))
        , d = s(i(62))
        , h = function() {
          function e() {
              (0,
              r.default)(this, e),
              this.fromUid = 0,
              this.timeStampc = 0,
              this.uplinkBw = 0,
              this.sendCount = 0,
              this.recvCount = 0,
              this.subMinBw = 0,
              this.curSid = 0,
              this.remainUplinkNum = 0,
              this.cdnpipArr = [],
              this.infoMap = new n.default
          }
          return (0,
          o.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new u.default;
                  e.setUri(l.default.P2PKeepAliveWebrtcRes),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt32(this.timeStampc),
                  e.pushUInt32(this.uplinkBw),
                  e.pushUInt32(this.sendCount),
                  e.pushUInt32(this.recvCount),
                  e.pushUInt32(this.subMinBw),
                  e.pushUInt64(this.curSid),
                  e.pushUInt8(this.remainUplinkNum),
                  e.pushUInt32Vector(this.cdnpipArr),
                  e.pushUInt8(this.infoMap.size);
                  var t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var n, r = (0,
                      a.default)(this.infoMap.keys()); !(t = (n = r.next()).done); t = !0) {
                          var o = n.value;
                          e.pushUInt64(o),
                          this.infoMap.get(o).marshall(e)
                      }
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
                  return e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.fromUid = e.popUInt64(),
                  this.timeStampc = e.popUInt32(),
                  this.uplinkBw = e.popUInt32(),
                  this.sendCount = e.popUInt32(),
                  this.recvCount = e.popUInt32(),
                  this.subMinBw = e.popUInt32(),
                  this.curSid = e.popUInt64(),
                  this.remainUplinkNum = e.popUInt8(),
                  this.cdnpipArr = e.popUInt32Vector(),
                  this.infoMap.clear();
                  for (var t = e.popUInt8(), i = 0; i < t; i++) {
                      var s = e.popUInt64()
                        , a = new d.default;
                      a.unmarshall(e),
                      this.infoMap.set(s, a)
                  }
              }
          }]),
          e
      }();
      t.default = h
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.reason = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PNotifyNodeLeave),
                  e.pushUInt64(this.uid),
                  e.pushUInt8(this.reason),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.uid = e.popUInt64(),
                  this.reason = e.popUInt8()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.lineType = 0,
              this.fromUid = 0,
              this.toUid = 0,
              this.sdp = "",
              this.sdpType = "",
              this.version = 0,
              this.lowestVersion = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2POffer),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt8(this.lineType),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt64(this.toUid),
                  e.pushString(this.sdp),
                  e.pushString(this.sdpType),
                  e.pushUInt32(this.version),
                  e.pushUInt32(this.lowestVersion),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.lineType = e.popUInt8(),
                  this.fromUid = e.popUInt64(),
                  this.toUid = e.popUInt64(),
                  this.sdp = e.popString(),
                  this.sdpType = e.popString(),
                  this.version = e.popUInt32(),
                  this.lowestVersion = e.popUInt32()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.lineType = 0,
              this.fromUid = 0,
              this.toUid = 0,
              this.rejectReason = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2POfferReject),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt8(this.lineType),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt64(this.toUid),
                  e.pushUInt32(this.rejectReason),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.lineType = e.popUInt8(),
                  this.fromUid = e.popUInt64(),
                  this.toUid = e.popUInt64(),
                  this.rejectReason = e.popUInt32()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = null,
              this.fromUid = 0,
              this.lineType = 0,
              this.version = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PPunchBackReq),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt8(this.lineType),
                  e.pushUInt32(this.version),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId || (this.cdnGroupId = new u.default),
                  this.cdnGroupId.unmarshall(e),
                  this.fromUid = e.popUInt64(),
                  this.lineType = e.popUInt8(),
                  this.version = e.popUInt32()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.fromUid = 0,
              this.ret = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PPunchBackRsp),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt8(this.ret),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.fromUid = e.popUInt64(),
                  this.ret = e.popUInt8()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.uid = 0,
              this.streamIndex = 0,
              this.reason = 0,
              this.cdnRtt = 0,
              this.nodeRtt = 0,
              this.streamDelay = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PRemoveSub),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt64(this.uid),
                  e.pushUInt8(this.streamIndex),
                  e.pushUInt8(this.reason),
                  e.pushUInt32(this.cdnRtt),
                  e.pushUInt32(this.nodeRtt),
                  e.pushUInt32(this.streamDelay),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.uid = e.popUInt64(),
                  this.streamIndex = e.popUInt8(),
                  this.reason = e.popUInt8(),
                  this.cdnRtt = e.popUInt32(),
                  this.nodeRtt = e.popUInt32(),
                  this.streamDelay = e.popUInt32()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.cdnGroupId = new u.default,
              this.streamIndex = 0,
              this.cdnRtt = 0,
              this.nodeRtt = 0,
              this.streamDelay = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PRemoveSubRes),
                  e.pushUInt64(this.uid),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt8(this.streamIndex),
                  e.pushUInt32(this.cdnRtt),
                  e.pushUInt32(this.nodeRtt),
                  e.pushUInt32(this.streamDelay),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.uid = e.popUInt64(),
                  this.cdnGroupId.unmarshall(e),
                  this.streamIndex = e.popUInt8(),
                  this.cdnRtt = e.popUInt32(),
                  this.nodeRtt = e.popUInt32(),
                  this.streamDelay = e.popUInt32()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.lineType = 0,
              this.fromUid = 0,
              this.toUid = 0,
              this.version = 0,
              this.lowestVersion = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PRequestOffer),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt8(this.lineType),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt64(this.toUid),
                  e.pushUInt32(this.version),
                  e.pushUInt32(this.lowestVersion),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.lineType = e.popUInt8(),
                  this.fromUid = e.popUInt64(),
                  this.toUid = e.popUInt64(),
                  this.version = e.popUInt32(),
                  this.lowestVersion = e.popUInt32()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uri = 0,
              this.uid = 0,
              this.streamSeqSN = 0,
              this.streamIndex = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PStreamAlive),
                  e.pushUInt64(this.uid),
                  e.pushUInt64(this.streamSeqSN),
                  e.pushUInt8(this.streamIndex),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.uid = e.popUInt64(),
                  this.streamSeqSN = e.popUInt64(),
                  this.streamIndex = e.popUInt8()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.groupId = new u.default,
              this.baseSubs = 0,
              this.streamIndex = 0,
              this.maxRecvSeq = 0,
              this.uplinkBw = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PSubStream),
                  e.pushUInt64(this.uid),
                  e.pushUint8ArrayWithoutLen(this.groupId.marshall()),
                  e.pushUInt8(this.baseSubs),
                  e.pushUInt8(this.streamIndex),
                  e.pushUInt64(this.maxRecvSeq),
                  e.pushUInt32(this.uplinkBw),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.uid = e.popUInt64(),
                  this.groupId.unmarshall(e),
                  this.baseSubs = e.popUInt8(),
                  this.streamIndex = e.popUInt8(),
                  this.maxRecvSeq = e.popUInt64(),
                  this.uplinkBw = e.popUInt32()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.groupId = new u.default,
              this.streamIndex = 0,
              this.streamDelay = 0,
              this.maxRecvSeq = 0,
              this.subMinBw = 0,
              this.ret = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PSubStreamRes),
                  e.pushUInt64(this.uid),
                  e.pushUint8ArrayWithoutLen(this.groupId.marshall()),
                  e.pushUInt8(this.streamIndex),
                  e.pushUInt16(this.streamDelay),
                  e.pushUInt64(this.maxRecvSeq),
                  e.pushUInt32(this.subMinBw),
                  e.pushUInt8(this.ret),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.uid = e.popUInt64(),
                  this.groupId.unmarshall(e),
                  this.streamIndex = e.popUInt8(),
                  this.streamDelay = e.popUInt16(),
                  this.maxRecvSeq = e.popUInt64(),
                  this.subMinBw = e.popUInt32(),
                  this.ret = e.popUInt8()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          ACCEPT_SUBSCRIBE: 0,
          DETECT_SUBSCRIBE_CYCLE: 1,
          SUBSCRIBE_UPLINK_NOT_ENOUGH: 2
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.fromUid = 0,
              this.streamIndex = 0,
              this.depth = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PSyncDepth),
                  e.pushUInt64(this.fromUid),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt8(this.streamIndex),
                  e.pushUInt8(this.depth),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.fromUid = e.popUInt64(),
                  this.cdnGroupId.unmarshall(e),
                  this.streamIndex = e.popUInt8(),
                  this.depth = e.popUInt8()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.uid = 0,
              this.streamIndex = 0,
              this.subTree = []
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.P2PSyncSubTree),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt64(this.uid),
                  e.pushUInt8(this.streamIndex),
                  e.pushUInt32Vector(this.subTree),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.uid = e.popUInt64(),
                  this.streamIndex = e.popUInt8(),
                  this.subTree = e.popUInt32Vector()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = function() {
          function e(t, i, s, n, r) {
              (0,
              a.default)(this, e),
              this.groupId = t,
              this.fromUid = i,
              this.toUid = s,
              this.subUri = n,
              this.payload = r
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.PP2PWSForward),
                  e.pushUint8ArrayWithoutLen(this.groupId.marshall()),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt64(this.toUid),
                  e.pushUInt32(this.subUri),
                  e.pushUint8Array(this.payload),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.groupId.unmarshall(e),
                  this.fromUid = e.popUInt64(),
                  this.toUid = e.popUInt64(),
                  this.subUri = e.popUInt32(),
                  this.payload = e.popUint8Array()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.version = "",
              this.subscriber = 0,
              this.subStreamIndex = [],
              this.uplinkBw = 0,
              this.appid = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PCDNCompeteSubscribeReq),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushString(this.version),
                  e.pushUInt64(this.subscriber),
                  e.pushUint8Array32(this.subStreamIndex),
                  e.pushUInt32(this.uplinkBw),
                  e.pushUInt32(this.appid),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(158))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(5))
        , u = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.cdnGroupId = new o.default,
              this.subscriber = 0,
              this.csMinBw = 0,
              this.subStreamIndex = [],
              this.ret = 0,
              this.remainP2pStreamNum = 0,
              this.SNBw = 0,
              this.appid = 0
          }
          return (0,
          r.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.subscriber = e.popUInt64(),
                  this.csMinBw = e.popUInt32(),
                  this.subStreamIndex = (0,
                  a.default)(e.popUint8Array32()),
                  this.ret = e.popUInt8(),
                  this.remainP2pStreamNum = e.popUInt32(),
                  this.SNBw = e.popUInt32(),
                  this.appid = e.popUInt32()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      e.exports = {
          default: i(261),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.subscriber = 0,
              this.subStreamIndex = []
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PCDNForceSubscribeNotify),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt64(this.subscriber),
                  e.pushUint8Array32(this.subStreamIndex),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(16))
        , n = s(i(7))
        , r = s(i(0))
        , o = s(i(1))
        , u = s(i(2))
        , l = s(i(3))
        , d = (s(i(5)),
      s(i(88)))
        , h = function() {
          function e() {
              (0,
              r.default)(this, e),
              this.uid = 0,
              this.version = 0,
              this.cdnGroupIdList = [],
              this.currentInfo = new d.default,
              this.appid = 0,
              this.clientAppid = 0,
              this.clientType = 0,
              this.ip = 0,
              this.sendTime = 0,
              this.sdkVersion = 0,
              this.imsi = 0,
              this.appId = 0,
              this.anchorStreamNam2UId = new n.default
          }
          return (0,
          o.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new l.default;
                  e.setUri(u.default.PCDNGetProxyListReq),
                  e.pushUInt64(this.uid),
                  e.pushUInt8(this.version),
                  e.pushUInt32(this.cdnGroupIdList.length),
                  this.cdnGroupIdList.forEach(function(t) {
                      e.pushUint8ArrayWithoutLen(t.marshall())
                  }),
                  e.pushUint8ArrayWithoutLen(this.currentInfo.marshall()),
                  e.pushUInt8(this.appid),
                  e.pushUInt32(this.clientAppid),
                  e.pushUInt32(this.clientType),
                  e.pushUInt32(this.ip),
                  e.pushUInt32(this.sendTime),
                  e.pushUInt32(this.sdkVersion),
                  e.pushUInt64(this.imsi),
                  e.pushUInt32(this.appId),
                  e.pushUInt32(this.anchorStreamNam2UId.size);
                  var t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var n, r = (0,
                      a.default)(this.anchorStreamNam2UId.keys()); !(t = (n = r.next()).done); t = !0) {
                          var o = n.value;
                          e.pushString(o),
                          e.pushUInt64(this.anchorStreamNam2UId.get(o))
                      }
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
                  return e.marshall()
              }
          }]),
          e
      }();
      t.default = h
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(86)))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.allocatedStreams = [],
              this.clientAppid = 0,
              this.clientType = 0,
              this.sendTime = 0,
              this.userArea = 0,
              this.videoGroupId = 0,
              this.retryType = 0,
              this.retryFreq = 0,
              this.result = 0,
              this.proxyType = 0,
              this.tokenVersion = 0,
              this.sslUrl = "",
              this.appId = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.uid = e.popUInt64(),
                  this.allocatedStreams = [];
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = new r.default;
                      this.allocatedStreams.push(s.unmarshall(e))
                  }
                  return this.clientAppid = e.popUInt32(),
                  this.clientType = e.popUInt32(),
                  this.sendTime = e.popUInt32(),
                  this.userArea = e.popUInt32(),
                  this.videoGroupId = e.popUInt32(),
                  this.retryType = e.popUInt8(),
                  this.retryFreq = e.popUInt16(),
                  this.result = e.popUInt32(),
                  this.proxyType = e.popUInt32(),
                  this.tokenVersion = e.popUInt32(),
                  this.sslUrl = e.popString(),
                  this.appId = e.popUInt32(),
                  this
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.cdnGroupId = new u.default,
              this.sendTime = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PCDNGetSliceStreamInfoReq),
                  e.pushUInt64(this.uid),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt32(this.sendTime),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(5)))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new r.default,
              this.streamSeqSN = 0,
              this.quickAccessBeginIndex = 0,
              this.quickAccessEndIndex = 0,
              this.ip = 0,
              this.urlTokenTime = 0,
              this.urlToken = "",
              this.sendTime = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  return this.cdnGroupId.unmarshall(e),
                  this.streamSeqSN = e.popUInt64(),
                  this.quickAccessBeginIndex = e.popUInt64(),
                  this.quickAccessEndIndex = e.popUInt64(),
                  this.ip = e.popUInt32(),
                  this.urlTokenTime = e.popUInt32(),
                  this.urlToken = e.popString(),
                  this.sendTime = e.popUInt32(),
                  this
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.publisher = 0,
              this.subscriber = 0,
              this.streamIndex = 0,
              this.streamNum = 0,
              this.version = "",
              this.appid = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PCDNSubscribeReq),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt64(this.publisher),
                  e.pushUInt64(this.subscriber),
                  e.pushUInt8(this.streamIndex),
                  e.pushUInt8(this.streamNum),
                  e.pushString(this.version),
                  e.pushUInt32(this.appid),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(5))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new r.default,
              this.publisher = 0,
              this.subscriber = 0,
              this.streamIndex = 0,
              this.streamNum = 0,
              this.ret = 0,
              this.appid = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.publisher = e.popUInt64(),
                  this.subscriber = e.popUInt64(),
                  this.streamIndex = e.popUInt8(),
                  this.streamNum = e.popUInt8(),
                  this.ret = e.popUInt8(),
                  this.appid = e.popUInt32()
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(49))
        , o = s(i(5))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new o.default,
              this.reconnectTime = 0,
              this.reconnectStatu = 0,
              this.videoProxyIpInfo = [],
              this.reason = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.reconnectTime = e.popUInt32(),
                  this.reconnectStatu = e.popUInt8(),
                  this.videoProxyIpInfo = e.popObjVector(r.default)
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(2))
        , u = s(i(3))
        , l = s(i(5))
        , d = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.cdnGroupId = new l.default,
              this.uid = 0,
              this.type = 0,
              this.errmsg = "",
              this.staticsMap = new a.default
          }
          return (0,
          r.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new u.default;
                  return e.setUri(o.default.PCdnP2PErrStatics),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt64(this.uid),
                  e.pushUInt32(this.type),
                  e.pushString(this.errmsg),
                  e.pushUInt32(this.staticsMap.size),
                  this.staticsMap.forEach(function(t, i) {
                      e.pushUInt32(i),
                      e.pushUInt32(t)
                  }),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.uid = 0,
              this.clientType = 0,
              this.tcpId = 0,
              this.localIps = [],
              this.localPort = 0,
              this.token = "",
              this.tokenVersion = 0,
              this.version = "",
              this.cdnLineType = 0,
              this.fixedCdnStreamCount = 0,
              this.sourceCodecRate = 0,
              this.clearSubscribeInfo = 0,
              this.maxCdnStreamCount = 0,
              this.p2pVersion = 0,
              this.appid = 0,
              this.anchorUid = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PCdnP2PUserRegister),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt64(this.uid),
                  e.pushUInt32(this.clientType),
                  e.pushUInt8(this.tcpId),
                  e.pushUInt32Vector(this.localIps),
                  e.pushUInt16(this.localPort),
                  e.pushString(this.token),
                  e.pushUInt32(this.tokenVersion),
                  e.pushString(this.version),
                  e.pushUInt8(this.cdnLineType),
                  e.pushUInt8(this.fixedCdnStreamCount),
                  e.pushUInt32(this.sourceCodecRate),
                  e.pushUInt8(this.clearSubscribeInfo),
                  e.pushUInt8(this.maxCdnStreamCount),
                  e.pushUInt16(this.p2pVersion),
                  e.pushUInt32(this.appid),
                  e.pushUInt64(this.anchorUid),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = (s(i(2)),
      s(i(5)))
        , u = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.cdnGroupId = new o.default,
              this.uid = 0,
              this.ret = 0,
              this.wanIp = 0,
              this.wanPort = 0,
              this.mapDebugStatus = new a.default,
              this.fixedCdnStream = [],
              this.maxCdnStreamCount = 0,
              this.enableFeatures = 0,
              this.stunProts = [],
              this.appid = 0
          }
          return (0,
          r.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  return this.cdnGroupId.unmarshall(e),
                  this.uid = e.popUInt64(),
                  this.ret = e.popUInt8(),
                  this.wanIp = e.popUInt32(),
                  this.wanPort = e.popUInt16(),
                  this.mapDebugStatus = e.popMapKey8Val32(),
                  this.fixedCdnStream = e.popUint8Array32(),
                  this.maxCdnStreamCount = e.popUInt8(),
                  this.enableFeatures = e.popUInt32(),
                  this.stunProts = e.popUInt16Vector(),
                  this.appid = e.popUInt32(),
                  this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.fromUid = 0,
              this.toUid = 0,
              this.subUri = 0,
              this.payload = null
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PCdnP2PWSForward),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt64(this.fromUid),
                  e.pushUInt64(this.toUid),
                  e.pushUInt32(this.subUri),
                  e.pushUint8Array(this.payload),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(5))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new r.default,
              this.fromUid = 0,
              this.toUid = 0,
              this.subUri = 0,
              this.resCode = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.fromUid = e.popUInt64(),
                  this.toUid = e.popUInt64(),
                  this.subUri = e.popUInt32(),
                  this.resCode = e.popUInt32()
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.cdnGroupId = new u.default,
              this.appid = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PCdnP2pGetNode),
                  e.pushUInt64(this.uid),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt32(this.appid),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(5)))
        , o = s(i(89))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new r.default,
              this.peerNodes = [],
              this.appid = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.cdnGroupId.unmarshall(e),
                  this.peerNodes = [];
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = new o.default;
                      s.unmarshall(e),
                      this.peerNodes.push(s)
                  }
                  return this.appid = e.popUInt32(),
                  this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(3))
        , o = s(i(2))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.strLog = ""
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new r.default;
                  return e.setUri(o.default.PCdnP2pReportLog),
                  e.pushUInt64(this.uid),
                  e.pushString(this.strLog),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = s(i(5))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.cdnGroupId = new u.default,
              this.uid = 0,
              this.clientType = 0,
              this.tcpId = 0,
              this.cdnLineType = 0
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PCdnP2pUserUnRegister),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.pushUInt64(this.uid),
                  e.pushUInt8(this.clientType),
                  e.pushUInt8(this.tcpId),
                  e.pushUInt8(this.cdnLineType),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(2))
        , u = s(i(3))
        , l = s(i(5))
        , d = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.appid = 0,
              this.uid = 0,
              this.sid = 0,
              this.stampc = 0,
              this.loginStamp = 0,
              this.uplinkBw = 0,
              this.availPeers = 0,
              this.bPunched = !1,
              this.cdnLineType = 0,
              this.mapClientProp = new a.default,
              this.cdnGroupId = new l.default
          }
          return (0,
          r.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new u.default;
                  return e.setUri(o.default.PCdnProxyPing),
                  e.pushUInt32(this.appid),
                  e.pushUInt64(this.uid),
                  e.pushUInt64(this.sid),
                  e.pushUInt32(this.stampc),
                  e.pushUInt32(this.loginStamp),
                  e.pushUInt32(this.uplinkBw),
                  e.pushUInt16(this.availPeers),
                  e.pushBool(this.bPunched),
                  e.pushUInt8(this.cdnLineType),
                  e.pushUInt32(this.mapClientProp.size),
                  this.mapClientProp.forEach(function(t, i) {
                      e.pushUInt8(i),
                      e.pushUInt32(t)
                  }),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(5)))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.appid = 0,
              this.stampc = 0,
              this.stamps = 0,
              this.proxyRtt = 0,
              this.wanIp = 0,
              this.wanPort = 0,
              this.peerType = 0,
              this.stampcSvr = 0,
              this.mapDebugStatus = null,
              this.csMinBw = 0,
              this.remainP2pStreamNum = 0,
              this.SNBw = 0,
              this.cdnGroupId = new r.default
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  return this.appid = e.popUInt32(),
                  this.stampc = e.popUInt32(),
                  this.stamps = e.popUInt32(),
                  this.proxyRtt = e.popUInt32(),
                  this.wanIp = e.popUInt32(),
                  this.wanPort = e.popUInt16(),
                  this.peerType = e.popUInt8(),
                  this.stampcSvr = e.popUInt32(),
                  this.mapDebugStatus = e.popMapKey8Val32(),
                  this.csMinBw = e.popUInt32(),
                  this.remainP2pStreamNum = e.popUInt32(),
                  this.SNBw = e.popUInt32(),
                  this.cdnGroupId.unmarshall(e),
                  this
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(2))
        , u = s(i(3))
        , l = s(i(5))
        , d = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.cdnGroupID = new l.default,
              this.uid = 0,
              this.p2pStaticsMap = new a.default,
              this.reserve = "",
              this.p2pNonZeroMap = new a.default
          }
          return (0,
          r.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new u.default;
                  return e.setUri(o.default.PCdnP2PStatics),
                  e.pushUint8ArrayWithoutLen(this.cdnGroupID.marshall()),
                  e.pushUInt64(this.uid),
                  e.pushUInt32(this.p2pStaticsMap.size),
                  this.p2pStaticsMap.forEach(function(t, i) {
                      e.pushUInt32(i),
                      e.pushUInt32(t)
                  }),
                  e.pushString32(this.reserve),
                  e.pushUInt32(this.p2pNonZeroMap.size),
                  this.p2pNonZeroMap.forEach(function(t, i) {
                      e.pushUInt32(i),
                      e.pushUInt32(t)
                  }),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.seq = 0,
              this.checkSum = 0,
              this.codecType = 0,
              this.streamData = null
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PP2pSliceAudioData),
                  e.pushUInt8(this.checkSum),
                  e.pushUInt16(this.codecType),
                  e.pushUint8Array(this.streamData),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  return this.checkSum = e.popUInt8(),
                  this.codecType = e.popUInt16(),
                  this.streamData = e.popUint8Array(),
                  this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.seq = 0,
              this.srcType = 0,
              this.checkSum = 0,
              this.seqNum = 0,
              this.frameNum = 0,
              this.frameId = 0,
              this.codecType = 0,
              this.streamData = null
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PP2pSliceCommonData),
                  e.pushUInt8(this.srcType),
                  e.pushUInt8(this.checkSum),
                  e.pushUInt16(this.seqNum),
                  e.pushUInt16(this.frameNum),
                  e.pushUInt32(this.frameId),
                  e.pushUInt16(this.codecType),
                  e.pushUint8Array(this.streamData),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  return this.srcType = e.popUInt8(),
                  this.checkSum = e.popUInt8(),
                  this.seqNum = e.popUInt16(),
                  this.frameNum = e.popUInt16(),
                  this.frameId = e.popUInt32(),
                  this.codecType = e.popUInt16(),
                  this.streamData = e.popUint8Array(),
                  this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.seq = 0,
              this.strData = null
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PP2pSliceControlData),
                  e.pushUint8Array(this.strData),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  return this.strData = e.popUint8Array(),
                  this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.seq = 0,
              this.uid = 0,
              this.srcType = 0,
              this.seqNum = 0,
              this.frameNum = 0,
              this.frameId = 0,
              this.codecType = 0,
              this.streamData = null,
              this.config = null
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  return this.srcType = e.popUInt8(),
                  this.seqNum = e.popUInt16(),
                  this.frameNum = e.popUInt16(),
                  this.frameId = e.popUInt32(),
                  this.codecType = e.popUInt16(),
                  this.streamData = e.popUint8Array(),
                  this.config = e.popMapKey8Val32(),
                  this
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(2))
        , u = s(i(3))
        , l = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.seq = 0,
              this.uid = 0,
              this.isResend = !1,
              this.checkSum = 0,
              this.seqNum = 0,
              this.frameNum = 0,
              this.frameId = 0,
              this.config = new a.default,
              this.streamData = null
          }
          return (0,
          r.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new u.default;
                  return e.setUri(o.default.PP2pSliceVideoData),
                  e.pushUInt8(this.checkSum),
                  e.pushUInt16(this.seqNum),
                  e.pushUInt16(this.frameNum),
                  e.pushUInt32(this.frameId),
                  e.pushUInt32(this.config.size),
                  this.config.forEach(function(t, i) {
                      e.pushUInt8(i),
                      e.pushUInt32(t)
                  }),
                  e.pushUint8Array(this.streamData),
                  e.marshall()
              }
          }, {
              key: "unmarshall",
              value: function(e) {
                  this.checkSum = e.popUInt8(),
                  this.seqNum = e.popUInt16(),
                  this.frameNum = e.popUInt16(),
                  this.frameId = e.popUInt32(),
                  this.config.clear();
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = e.popUInt8()
                        , a = e.popUInt32();
                      this.config.set(s, a)
                  }
                  return this.streamData = e.popUint8Array(),
                  this
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = (s(i(2)),
      s(i(98)))
        , u = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.uid = 0,
              this.allocatedStreams = new a.default,
              this.clientAppid = 0,
              this.clientType = 0,
              this.sendTime = 0,
              this.userArea = 0,
              this.videoGroupId = 0,
              this.retryType = 0,
              this.retryFreq = 0,
              this.result = 0,
              this.proxyType = 0,
              this.tokenVersion = 0,
              this.sslUrl = ""
          }
          return (0,
          r.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.uid = e.popUInt64(),
                  this.allocatedStreams.clear();
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      for (var s = e.popString(), a = [], n = e.popUInt32(), r = 0; r < n; r++) {
                          var u = new o.default;
                          a.push(u.unmarshall(e))
                      }
                      this.allocatedStreams.set(s, a)
                  }
                  return this.clientAppid = e.popUInt32(),
                  this.clientType = e.popUInt32(),
                  this.sendTime = e.popUInt32(),
                  this.userArea = e.popUInt32(),
                  this.videoGroupId = e.popUInt32(),
                  this.retryType = e.popUInt8(),
                  this.retryFreq = e.popUInt16(),
                  this.result = e.popUInt32(),
                  this.proxyType = e.popUInt32(),
                  this.tokenVersion = e.popUInt32(),
                  this.sslUrl = e.popString(),
                  this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(9)))
        , o = s(i(95))
        , u = s(i(52))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupId = new r.default,
              this.reconnectTime = 0,
              this.videoProxyInfo = [],
              this.reconnectStatu = 0,
              this.videoProxyIpInfo = [],
              this.reason = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.streamGroupId.unmarshall(e),
                  this.reconnectTime = e.popUInt32(),
                  this.videoProxyInfo = [];
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = new o.default;
                      this.videoProxyInfo.push(s.unmarshall(e))
                  }
                  for (this.reconnectStatu = e.popUInt8(),
                  this.videoProxyIpInfo = [],
                  t = e.popUInt32(),
                  i = 0; i < t; i++)
                      s = new u.default,
                      this.videoProxyIpInfo.push(s.unmarshall(e));
                  return this.reason = e.popUInt8(),
                  this
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = (s(i(2)),
      s(i(9)))
        , u = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.streamGroupId = new o.default,
              this.uid = 0,
              this.metaDatasMap = new a.default,
              this.streamName = ""
          }
          return (0,
          r.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.streamGroupId.unmarshall(e),
                  this.uid = e.popUInt64(),
                  this.metaDatasMap.clear();
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = e.popUInt8()
                        , a = e.popUInt32();
                      this.metaDatasMap.set(s, a)
                  }
                  return e.bytesAvailable() > 0 ? this.streamName = e.popString() : this.streamName = this.streamGroupId.text(),
                  this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(3));
      s(i(9));
      var u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupIds = [],
              this.switchReason = ""
          }
          return (0,
          n.default)(e, [{
              key: "marshall",
              value: function() {
                  var e = new o.default;
                  return e.setUri(r.default.PNotifyStreamSwitch),
                  e.pushUInt32(this.streamGroupIds.length),
                  this.streamGroupIds.forEach(function(t) {
                      e.pushUint8ArrayWithoutLen(t.marshall())
                  }),
                  e.pushString(this.switchReason),
                  e.marshall()
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(9)))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupIds = [],
              this.uid = 0,
              this.sendCount = 0,
              this.recvCount = 0,
              this.reserve = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.streamGroupIds = [];
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = new r.default;
                      this.streamGroupIds.push(s.unmarshall(e))
                  }
                  return this.uid = e.popUInt64(),
                  this.sendCount = e.popUInt32(),
                  this.recvCount = e.popUInt32(),
                  this.reserve = e.popUInt32(),
                  this
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(9)))
        , o = s(i(96))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupId = new r.default,
              this.uid = 0,
              this.serial = 0,
              this.measureType = 0,
              this.measureValues = []
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.streamGroupId.unmarshall(e),
                  this.uid = e.popUInt64(),
                  this.serial = e.popUInt32(),
                  this.measureType = e.popUInt8(),
                  this.measureValues = [];
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = new o.default;
                      this.measureValues.push(s.unmarshall(e))
                  }
                  return this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(9)))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupId = new r.default,
              this.failReason = 0,
              this.seqNums = []
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  return this.streamGroupId.unmarshall(e),
                  this.failReason = e.popUInt8(),
                  this.seqNums = e.popUInt32Vector(),
                  this
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(9)))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupId = new r.default,
              this.uid = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  return this.streamGroupId.unmarshall(e),
                  this.uid = e.popUInt64(),
                  this
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(2)),
      s(i(9)))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.streamGroupIds = [],
              this.uid = 0,
              this.subscribe = !1,
              this.resCode = 0,
              this.firstSeq = 0,
              this.lastSeq = 0,
              this.firstDts = 0,
              this.lastDts = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.streamGroupIds = [];
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = new r.default;
                      this.streamGroupIds.push(s.unmarshall(e))
                  }
                  return this.uid = e.popUInt64(),
                  this.subscribe = e.popBool(),
                  this.resCode = e.popUInt16(),
                  this.firstSeq = e.popUInt32(),
                  this.lastSeq = e.popUInt32(),
                  this.firstDts = e.popUInt32(),
                  this.lastDts = e.popUInt32(),
                  this
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1));
      s(i(2));
      var o = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.appid = 0,
              this.configInfo = new a.default,
              this.streamCodecType = 0
          }
          return (0,
          r.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.appid = e.popUInt32(),
                  this.configInfo.clear();
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = e.popUInt16()
                        , a = e.popUInt32();
                      this.configInfo.set(s, a)
                  }
                  return this.streamCodecType = e.popUInt32(),
                  this
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = (s(i(2)),
      s(i(9)))
        , u = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.streamGroupId = new o.default,
              this.uid = 0,
              this.metaDatas = new a.default,
              this.stringDatas = new a.default
          }
          return (0,
          r.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  this.streamGroupId.unmarshall(e),
                  this.uid = e.popUInt64(),
                  this.metaDatas.clear();
                  for (var t = e.popUInt32(), i = 0; i < t; i++) {
                      var s = e.popUInt32()
                        , a = e.popUInt32();
                      this.metaDatas.set(s, a)
                  }
                  for (this.stringDatas.clear(),
                  t = e.popUInt32(),
                  i = 0; i < t; i++)
                      s = e.popUInt32(),
                      a = e.popString(),
                      this.stringDatas.set(s, a);
                  return this
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1));
      s(i(2));
      var r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.stampc = 0,
              this.stamps = 0,
              this.proxyRtt = 0,
              this.wanIp = 0,
              this.wanPort = 0,
              this.reserved = 0,
              this.peerType = 0
          }
          return (0,
          n.default)(e, [{
              key: "unmarshall",
              value: function(e) {
                  return this.stampc = e.popUInt32(),
                  this.stamps = e.popUInt32(),
                  this.proxyRtt = e.popUInt32(),
                  this.wanIp = e.popUInt32(),
                  this.wanPort = e.popUInt16(),
                  this.reserved = e.popUInt32(),
                  this.peerType = e.popUInt8(),
                  this
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = s(i(268))
        , u = s(i(24))
        , l = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.mse = t,
              this.ISGenerated = !1,
              this.audioISGenerated = !1,
              this.videoISGenerated = !1,
              this.PES2MP4SCALEFACTOR = 1,
              this.PES_TIMESCALE = 9e4,
              this.MP4_TIMESCALE = this.PES_TIMESCALE / this.PES2MP4SCALEFACTOR,
              this._forceFirstIDR = !(!u.default.chrome || !(u.default.version.major < 50 || 50 === u.default.version.major && u.default.version.build < 2661))
          }
          return (0,
          n.default)(e, [{
              key: "destroy",
              value: function() {
                  this.reset()
              }
          }, {
              key: "reset",
              value: function() {
                  this.insertDiscontinuity(),
                  this.switchLevel()
              }
          }, {
              key: "insertDiscontinuity",
              value: function() {
                  this._initPTS = this._initDTS = this.nextAacPts = this.nextAvcDts = void 0
              }
          }, {
              key: "getInitDts",
              value: function() {
                  return void 0 !== this._initDTS ? this._initDTS / 90 : -1
              }
          }, {
              key: "switchLevel",
              value: function() {
                  this.ISGenerated = !1,
                  this.audioISGenerated = !1,
                  this.videoISGenerated = !1
              }
          }, {
              key: "remux",
              value: function(e, t, i, s) {
                  Number(localStorage._printMp4Remux) && r.default.debug("\n### Audio", e, "\n### Video", t),
                  this.audioISGenerated || this.generateAudioIS(e, i),
                  this.videoISGenerated || this.generateVideoIS(t, i),
                  this.initTs(e, t, i),
                  t.samples.length && this.remuxVideo(t, s),
                  e.samples.length && this.remuxAudio(e, s),
                  this.mse.onFragParsed()
              }
          }, {
              key: "initTs",
              value: function(e, t, i) {
                  if (null == this._initPTS) {
                      var s = e.samples
                        , a = t.samples
                        , n = s.length
                        , o = a.length
                        , u = this.PES_TIMESCALE;
                      0 === n && 0 === o ? r.default.warn("mp4-remuxer.initTs have no nbAudio&nbVideo") : 0 === o ? (this._initPTS = s[0].pts - u * i,
                      this._initDTS = s[0].dts - u * i) : 0 === n ? (this._initPTS = a[0].pts - u * i,
                      this._initDTS = a[0].dts - u * i) : (this._initPTS = Math.min(a[0].pts, s[0].pts) - u * i,
                      this._initDTS = Math.min(a[0].dts, s[0].dts) - u * i)
                  }
              }
          }, {
              key: "generateAudioIS",
              value: function(e, t) {
                  if (e.config) {
                      var i = {
                          audioMoov: o.default.initSegment([e]),
                          audioCodec: e.codec,
                          audioChannelCount: e.channelCount
                      };
                      this.mse.onInitSegment(i),
                      this.audioISGenerated = !0
                  }
              }
          }, {
              key: "generateVideoIS",
              value: function(e, t) {
                  if (e.sps && e.pps) {
                      var i = {
                          videoMoov: o.default.initSegment([e]),
                          videoCodec: e.codec,
                          videoWidth: e.width,
                          videoHeight: e.height
                      };
                      this.mse.onInitSegment(i),
                      this.videoISGenerated = !0
                  }
              }
          }, {
              key: "remuxVideo",
              value: function(e, t) {
                  var i, s = void 0, a = 8, n = void 0, u = this.PES2MP4SCALEFACTOR, l = void 0, d = void 0, h = void 0, f = void 0, c = void 0, p = void 0, v = void 0, y = void 0, m = void 0, _ = void 0, P = void 0, T = [];
                  for (c = new Uint8Array(e.len + 4 * e.naluCnt + 8),
                  (s = new DataView(c.buffer)).setUint32(0, c.byteLength),
                  c.set(o.default.types.mdat, 4); e.samples.length; ) {
                      for (l = e.samples.shift(),
                      h = 0; l.units.length; )
                          n = (f = l.units.shift()).data.byteLength,
                          s.setUint32(a, n),
                          a += 4,
                          c.set(f.data, a),
                          a += n,
                          h += 4 + n;
                      if (y = l.pts - this._initDTS,
                      m = l.dts - this._initDTS,
                      void 0 !== v)
                          _ = this._PTSNormalize(y, v),
                          P = this._PTSNormalize(m, v),
                          d.duration = (P - v) / u,
                          d.duration < 0 && (Number(localStorage._printMp4RemuxVideo) && r.default.warn("mp4-remuxer.remuxVideo invalid sample duration at pts=" + l.pts / 90 + " dts=" + l.dts / 90 + " duration=" + d.duration / 90),
                          d.duration = 0,
                          P = v);
                      else {
                          var S, g = this.nextAvcDts || m;
                          _ = this._PTSNormalize(y, g),
                          P = this._PTSNormalize(m, g),
                          S = Math.round((P - g) / 90),
                          (t || Math.abs(S) < 600) && S && (S > 1 ? r.default.warn("mp4-remuxer.remuxVideo hole=" + S + " filling it") : S < -1 && r.default.warn("mp4-remuxer.remuxVideo overlapping=" + -S + " detected"),
                          P = g,
                          _ = Math.max(_ - S, P)),
                          Math.max(0, _),
                          p = Math.max(0, P)
                      }
                      var I = l.key;
                      d = {
                          size: h,
                          duration: 0,
                          cts: (_ - P) / u,
                          flags: {
                              isLeading: 0,
                              degradPrio: 0,
                              hasRedundancy: 0,
                              dependsOn: I ? 2 : 1,
                              isDependedOn: I ? 1 : 0,
                              isNonSync: I ? 0 : 1
                          }
                      },
                      T.push(d),
                      v = P
                  }
                  this._forceFirstIDR && (T[0].flags.dependsOn = 2,
                  T[0].flags.isNonSync = 0),
                  void 0 !== e.endDts ? (d.duration = (90 * e.endDts - this._initDTS - P) / u,
                  d.duration < 0 ? (d.duration = 0,
                  this.nextAvcDts = P) : this.nextAvcDts = 90 * e.endDts - this._initDTS) : (T.length >= 2 && (d.duration = T[T.length - 2].duration),
                  this.nextAvcDts = P + d.duration * u),
                  e.len = 0,
                  e.naluCnt = 0,
                  e.samples = T,
                  i = o.default.moof(e.sn, p / u, e),
                  e.samples = [];
                  var E = {
                      type: "video",
                      data: this._mergeBoxes(i, c)
                  };
                  this.mse.onFragParsing(E)
              }
          }, {
              key: "remuxAudio",
              value: function(e, t) {
                  var i, s = 8, a = this.PES_TIMESCALE, n = this.PES2MP4SCALEFACTOR, u = void 0, l = void 0, d = void 0, h = void 0, f = void 0, c = void 0, p = void 0, v = void 0, y = void 0, m = void 0, _ = [];
                  for (h = new Uint8Array(e.len + 8),
                  new DataView(h.buffer).setUint32(0, h.byteLength),
                  h.set(o.default.types.mdat, 4); e.samples.length; ) {
                      if (d = (u = e.samples.shift()).unit,
                      h.set(d, s),
                      s += d.byteLength,
                      p = u.pts - this._initDTS,
                      v = u.dts - this._initDTS,
                      void 0 !== c)
                          y = this._PTSNormalize(p, c),
                          m = this._PTSNormalize(v, c),
                          l.duration = (m - c) / n,
                          l.duration < 0 && (Number(localStorage._printMp4RemuxAudio) && r.default.warn("mp4-remuxer.remuxAudio invalid AAC sample duration at PTS=" + u.pts + " duration=" + l.duration),
                          l.duration = 0,
                          y = m = c);
                      else {
                          var P, T = this.nextAacPts || p;
                          y = this._PTSNormalize(p, T),
                          m = this._PTSNormalize(v, T),
                          P = Math.round(1e3 * (y - T) / a),
                          (t || Math.abs(P) < 600) && P && (y = m = T),
                          Math.max(0, y),
                          f = Math.max(0, m)
                      }
                      l = {
                          size: d.byteLength,
                          cts: 0,
                          duration: 0,
                          flags: {
                              isLeading: 0,
                              isDependedOn: 0,
                              hasRedundancy: 0,
                              degradPrio: 0,
                              dependsOn: 1
                          }
                      },
                      _.push(l),
                      c = m
                  }
                  _.length >= 2 && (l.duration = _[_.length - 2].duration),
                  this.nextAacPts = y + l.duration * n,
                  e.len = 0,
                  e.samples = _,
                  i = o.default.moof(e.sn, f / n, e),
                  e.samples = [];
                  var S = {
                      type: "audio",
                      data: this._mergeBoxes(i, h)
                  };
                  this.mse.onFragParsing(S)
              }
          }, {
              key: "_mergeBoxes",
              value: function(e, t) {
                  var i = new Uint8Array(e.byteLength + t.byteLength);
                  return i.set(e, 0),
                  i.set(t, e.byteLength),
                  i
              }
          }, {
              key: "_PTSNormalize",
              value: function(e, t) {
                  var i = void 0;
                  if (void 0 === t)
                      return e;
                  for (i = t < e ? -8589934592 : 8589934592; Math.abs(e - t) > 4294967296; )
                      e += i;
                  return e
              }
          }, {
              key: "timescale",
              get: function() {
                  return this.MP4_TIMESCALE
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.data = t,
              this.bytesAvailable = this.data.byteLength,
              this.word = 0,
              this.bitsAvailable = 0
          }
          return (0,
          n.default)(e, [{
              key: "loadWord",
              value: function() {
                  var e = this.data.byteLength - this.bytesAvailable
                    , t = new Uint8Array(4)
                    , i = Math.min(4, this.bytesAvailable);
                  if (0 === i)
                      throw new Error("no bytes available");
                  t.set(this.data.subarray(e, e + i)),
                  this.word = new DataView(t.buffer).getUint32(0),
                  this.bitsAvailable = 8 * i,
                  this.bytesAvailable -= i
              }
          }, {
              key: "skipBits",
              value: function(e) {
                  var t = void 0;
                  this.bitsAvailable > e ? (this.word <<= e,
                  this.bitsAvailable -= e) : (e -= this.bitsAvailable,
                  e -= (t = e >> 3) >> 3,
                  this.bytesAvailable -= t,
                  this.loadWord(),
                  this.word <<= e,
                  this.bitsAvailable -= e)
              }
          }, {
              key: "readBits",
              value: function(e) {
                  var t = Math.min(this.bitsAvailable, e)
                    , i = this.word >>> 32 - t;
                  return e > 32 && r.default.error("Cannot read more than 32 bits at a time"),
                  this.bitsAvailable -= t,
                  this.bitsAvailable > 0 ? this.word <<= t : this.bytesAvailable > 0 && this.loadWord(),
                  (t = e - t) > 0 ? i << t | this.readBits(t) : i
              }
          }, {
              key: "skipLZ",
              value: function() {
                  var e = void 0;
                  for (e = 0; e < this.bitsAvailable; ++e)
                      if (0 != (this.word & 2147483648 >>> e))
                          return this.word <<= e,
                          this.bitsAvailable -= e,
                          e;
                  return this.loadWord(),
                  e + this.skipLZ()
              }
          }, {
              key: "skipUEG",
              value: function() {
                  this.skipBits(1 + this.skipLZ())
              }
          }, {
              key: "skipEG",
              value: function() {
                  this.skipBits(1 + this.skipLZ())
              }
          }, {
              key: "readUEG",
              value: function() {
                  var e = this.skipLZ();
                  return this.readBits(e + 1) - 1
              }
          }, {
              key: "readEG",
              value: function() {
                  var e = this.readUEG();
                  return 1 & e ? 1 + e >>> 1 : -1 * (e >>> 1)
              }
          }, {
              key: "readBoolean",
              value: function() {
                  return 1 === this.readBits(1)
              }
          }, {
              key: "readUByte",
              value: function() {
                  return this.readBits(8)
              }
          }, {
              key: "skipScalingList",
              value: function(e) {
                  var t = 8
                    , i = 8
                    , s = void 0;
                  for (s = 0; s < e; s++)
                      0 !== i && (i = (t + this.readEG() + 256) % 256),
                      t = 0 === i ? t : i
              }
          }, {
              key: "readSPS",
              value: function() {
                  var e, t, i, s, a = 0, n = 0, r = 0, o = 0, u = void 0, l = void 0, d = 0, h = void 0;
                  if (this.readUByte(),
                  e = this.readUByte(),
                  this.readBits(5),
                  this.skipBits(3),
                  this.readUByte(),
                  this.skipUEG(),
                  100 === e || 110 === e || 122 === e || 144 === e || 244 === e || 44 === e || 83 === e || 86 === e || 118 === e || 128 === e || 138 === e) {
                      var f = this.readUEG();
                      if (3 === f && this.skipBits(1),
                      this.skipUEG(),
                      this.skipUEG(),
                      this.skipBits(1),
                      this.readBoolean())
                          for (l = 3 !== f ? 8 : 12,
                          h = 0; h < l; h++)
                              this.readBoolean() && (h < 6 ? this.skipScalingList(16) : this.skipScalingList(64))
                  }
                  this.skipUEG();
                  var c = this.readUEG();
                  if (0 === c)
                      this.readUEG();
                  else if (1 === c)
                      for (this.skipBits(1),
                      this.skipEG(),
                      this.skipEG(),
                      u = this.readUEG(),
                      h = 0; h < u; h++)
                          this.skipEG();
                  if (this.skipUEG(),
                  this.skipBits(1),
                  t = this.readUEG(),
                  i = this.readUEG(),
                  0 === (s = this.readBits(1)) && this.skipBits(1),
                  this.skipBits(1),
                  this.readBoolean() && (a = this.readUEG(),
                  n = this.readUEG(),
                  r = this.readUEG(),
                  o = this.readUEG()),
                  this.readBoolean() && (this.readBoolean() && 255 === this.readUByte() && (this.readBits(16),
                  this.readBits(16)),
                  this.readBoolean() && this.skipBits(1),
                  this.readBoolean() && (this.readBits(3),
                  this.skipBits(1),
                  this.readBoolean() && (this.readUByte(),
                  this.readUByte(),
                  this.readUByte())),
                  this.readBoolean() && (this.readUEG(),
                  this.readUEG()),
                  this.readBoolean())) {
                      var p = this.readBits(32);
                      d = this.readBits(32) / p,
                      this.readBoolean() && (d = Math.ceil(d / 2))
                  }
                  return {
                      fps: d,
                      width: 16 * (t + 1) - 2 * a - 2 * n,
                      height: (2 - s) * (i + 1) * 16 - (r + o) * (s ? 2 : 4)
                  }
              }
          }, {
              key: "readSliceType",
              value: function() {
                  return this.readUByte(),
                  this.readUEG(),
                  this.readUEG()
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(20))
        , n = s(i(7))
        , r = s(i(0))
        , o = s(i(1))
        , u = (s(i(22)),
      s(i(4)))
        , l = s(i(108))
        , d = s(i(197))
        , h = s(i(269))
        , f = s(i(270))
        , c = s(i(271))
        , p = !!Number(localStorage._dropAudio)
        , v = !!Number(localStorage._dropVideo)
        , y = function() {
          function e() {
              (0,
              r.default)(this, e),
              this.lastDts = 0,
              this.lastPts = 0,
              this.lastCts = 0,
              this.dtsStat = [0, 0, 0, 0, 0, 0],
              this.ptsStat = [0, 0, 0, 0, 0, 0],
              this.ctsStat = [0, 0, 0, 0, 0, 0]
          }
          return (0,
          o.default)(e, [{
              key: "reset",
              value: function() {
                  this.lastDts = this.lastPts = this.lastCts = 0,
                  this.dtsStat = [0, 0, 0, 0, 0, 0],
                  this.ptsStat = [0, 0, 0, 0, 0, 0],
                  this.ctsStat = [0, 0, 0, 0, 0, 0]
              }
          }, {
              key: "setTimeStamp",
              value: function(e, t, i) {
                  this.addStat(this.dtsStat, this.lastDts, e),
                  this.addStat(this.ptsStat, this.lastPts, t),
                  this.addStat(this.ctsStat, this.lastCts, i),
                  this.lastDts = e,
                  this.lastPts = t,
                  this.lastCts = i
              }
          }, {
              key: "addStat",
              value: function(e, t, i) {
                  if (t > 0 && i > t) {
                      var s = i - t;
                      s >= 1e3 ? e[4]++ : s >= 800 ? e[3]++ : s >= 600 ? e[2]++ : s >= 400 ? e[1]++ : s >= 200 && e[0]++
                  }
              }
          }]),
          e
      }()
        , m = function() {
          function e(t, i) {
              (0,
              r.default)(this, e),
              this.mse = t,
              this.remuxer = i,
              this.flvCacher = new h.default,
              this.fps = new c.default,
              this.timeStampStat = new y,
              this.DEFAULT_GOP = 200,
              this.bufLen = 200,
              this.pushGop = !1,
              this.parseFlvHead = !1,
              this.lengthSizeMinusOne = 0,
              this.audioConfig = [43, 138, 8, 0],
              this.audioSampleRate = 22050,
              this.aacTimeLen = 1024e3 / this.audioSampleRate,
              this.validAacTime = 500 * this.aacTimeLen,
              this.audioChannelCount = 1,
              this.audioObjectType = 5,
              this.audioIncreaseTSMap = new n.default,
              this.firstDemuxAudioTS = -1,
              this.spsUnit = null,
              this.ppsUnit = null,
              this.vpsUnit = null,
              this.hasCtsZero = !1,
              this.paused = !1,
              this.hasEmptyFrames = !1,
              this.nextAacDts = -1,
              this.playVideoFrameCnt = 0,
              this.playVideoLength = 0,
              this.playAudioFrameCnt = 0,
              this.playAudioLength = 0,
              this.playEmptyAudioFrameCnt = 0,
              this.avcTrackList = [],
              this.beginParseTs = 0,
              this.hasAudioTag = !1,
              this.lastAacTs = 0,
              this.hasKeyFrame = !1,
              this.lastAudioTs = 0,
              this.lastVideoTs = 0,
              this.lastAudioUtil = null,
              this.maxaudioptsList = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              this.last10anduiptsList = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              this.firstAudioTs = -1,
              this.showH265Tip = !1,
              this.appendHighQualityEmptyAudio = !0,
              this.deleteH264Aud = !1,
              this.incompleteFlvheaderLen = 0,
              this.reset()
          }
          return (0,
          o.default)(e, [{
              key: "getFps",
              value: function() {
                  return this.fps.getFps()
              }
          }, {
              key: "setDecoctorTimeAbnormal",
              value: function() {
                  var e = localStorage.decodeabnormal;
                  if (e && e.split("_").length > 1) {
                      var t = parseInt(e.split("_")[1])
                        , i = (new Date).getTime() - t;
                      i && i > 864e5 ? (this.appendHighQualityEmptyAudio = !0,
                      localStorage.decodeabnormal = "") : this.appendHighQualityEmptyAudio = !1
                  }
              }
          }, {
              key: "destroy",
              value: function() {
                  this.reset()
              }
          }, {
              key: "reset",
              value: function(e) {
                  u.default.log("FlvParser.reset"),
                  this.fps.reset(),
                  this.timeStampStat.reset(),
                  this.remuxer.reset(),
                  this.avcTrack = {
                      type: "video",
                      id: 1,
                      sn: 0,
                      samples: [],
                      len: 0,
                      duration: 0,
                      startDts: -1,
                      endDts: 0,
                      naluCnt: 0
                  },
                  this.aacTrack = {
                      type: "audio",
                      id: 2,
                      sn: 0,
                      samples: [],
                      len: 0,
                      duration: 0,
                      startDts: -1,
                      endDts: 0
                  },
                  this.aacTrack.config = this.audioConfig,
                  this.aacTrack.audiosamplerate = this.audioSampleRate,
                  this.aacTrack.channelCount = this.audioChannelCount,
                  this.aacTrack.codec = "mp4a.40.5",
                  this.aacTrack.timescale = this.remuxer.timescale,
                  this.avcTrack.isHevc = !1,
                  this.avcTrack.timescale = this.remuxer.timescale,
                  this.avcTrackList = [],
                  this.hasAudioTag = !1,
                  this.lastAacTs = 0,
                  this.hasKeyFrame = !1,
                  this.lastAudioTs = 0,
                  this.lastVideoTs = 0,
                  this.showH265Tip = !1,
                  this.bufLen = 200,
                  this.nextAacDts = -1,
                  this.hasCtsZero = !1,
                  this.audioIncreaseTSMap.clear(),
                  this.firstDemuxAudioTS = -1
              }
          }, {
              key: "getPlayStat",
              value: function() {
                  var e = {
                      videoFrameCnt: this.playVideoFrameCnt,
                      videoLength: this.playVideoLength,
                      audioFrameCnt: this.playAudioFrameCnt,
                      audioLength: this.playAudioLength,
                      emptyAudioFrameCnt: this.playEmptyAudioFrameCnt
                  };
                  return this.playVideoFrameCnt = 0,
                  this.playVideoLength = 0,
                  this.playAudioFrameCnt = 0,
                  this.playAudioLength = 0,
                  this.playEmptyAudioFrameCnt = 0,
                  e
              }
          }, {
              key: "setPaused",
              value: function(e) {
                  this.paused = e
              }
          }, {
              key: "setPushGop",
              value: function(e) {
                  this.pushGop = e,
                  u.default.log("FlvParser.setPushGop " + e)
              }
          }, {
              key: "setDeleteH264Aud",
              value: function(e) {
                  this.deleteH264Aud = e,
                  u.default.log("FlvParser.deleteH264Aud " + e)
              }
          }, {
              key: "getParserBufLen",
              value: function() {
                  return 0 !== this.avcTrack.samples.length ? this.avcTrack.endDts - this.avcTrack.startDts : 0 !== this.aacTrack.samples.length ? this.aacTrack.endDts - this.aacTrack.startDts : 0
              }
          }, {
              key: "parseFlv",
              value: function(t) {
                  var i = 0
                    , s = t.length;
                  if (!1 === this.parseFlvHead) {
                      var a = e.FLV_HEADER_LEN + e.PREV_TAG_SIZE_LEN;
                      if (s < (a -= this.incompleteFlvheaderLen))
                          return u.default.warn("FlvParser.parseFlv flv has no header len=" + s),
                          void (this.incompleteFlvheaderLen += s);
                      i += a,
                      this.parseFlvHead = !0,
                      this.beginParseTs = Date.now()
                  }
                  0 === i ? this.flvCacher.append(t) : this.flvCacher.append(t.slice(i));
                  for (var n = void 0; null !== (n = this.flvCacher.popFrame()); )
                      this.parseTag(n)
              }
          }, {
              key: "parseTag",
              value: function(t) {
                  var i = t.length;
                  if (i < e.TAG_HEADER_LEN + e.PREV_TAG_SIZE_LEN)
                      u.default.warn("FlvParser.parseTag flv has no whole tag len=" + i + " data=" + t);
                  else {
                      var s = 0
                        , a = t[s++]
                        , n = (t[s++] << 16) + (t[s++] << 8) + t[s++];
                      if (i - (e.TAG_HEADER_LEN + e.PREV_TAG_SIZE_LEN) < n)
                          u.default.warn("FlvParser.parseTag flv has no enough data dataLen=" + n + " len=" + i);
                      else if (0 !== n) {
                          var r = (t[s++] << 16) + (t[s++] << 8) + t[s++] + parseInt(t[s++].toString(16) + "000000", 16);
                          s += 3,
                          a === e.VIDEO_TYPE ? v || this.mse.isPureAudio || this.parseVideo(t, 11, n, r) : a === e.AUDIO_TYPE ? p || this.parseAudio(t, 11, n, r) : a === e.SCRIPT_TYPE ? this.parseScriptTag(t, 11, n, r) : u.default.warn("%cFlvParser.parseTag discard type=" + a + " len=" + n, "color:white;background:black")
                      } else
                          u.default.warn("FlvParser.parseTag flvtag empty type=" + a)
                  }
              }
          }, {
              key: "parseScriptTag",
              value: function(t, i, s, n) {
                  if (i + e.SCRIPT_AMF1_HEAD_LEN > s)
                      u.default.log("script too small");
                  else {
                      t[i++];
                      var r = (t[i++] << 8) + t[i++]
                        , o = this.getStr(t, i, r);
                      i += r,
                      "onMetaData" === o ? (0,
                      a.default)(this.mse.metadata, f.default.parseScript(t, i, t.length).data) : -1 !== o.indexOf("onMixAudio") && (o = o.replace("onMixAudio:", ""),
                      this.parseScriptTagMixAudio(o, n))
                  }
              }
          }, {
              key: "parseScriptTagMixAudio",
              value: function(e, t) {
                  if (e.length > 0)
                      for (var i = e.split(","), s = 0; s < i.length; s++)
                          this.mse.saveScriptVolumeData(t, i[s])
              }
          }, {
              key: "getStr",
              value: function(e, t, i) {
                  for (var s = "", a = 0; a < i; a++)
                      s += String.fromCharCode(e[t++]);
                  return s
              }
          }, {
              key: "parseAudioVolumeInScriptTag",
              value: function(e, t, i, s) {
                  if (2 == e[t++]) {
                      var a = i - t;
                      if (e[t++],
                      e[t++],
                      a < 0 || i < t + a - 3)
                          return u.default.log("script too samll");
                      if (111 == e[t] && 110 == e[t + 1] && 77 == e[t + 2] && 105 == e[t + 3] && 120 == e[t + 4] && 65 == e[t + 5] && 117 == e[t + 6] && 100 == e[t + 7] && 105 == e[t + 8] && 111 == e[t + 9] && 58 == e[t + 10]) {
                          t += 11,
                          new n.default;
                          for (var r = e.subarray(t, t + a), o = "", l = 0; l < a; l++)
                              o += String.fromCharCode(r[l]);
                          if (o.length > 0)
                              for (var d = o.split(","), h = 0; h < d.length; h++)
                                  this.mse.saveScriptVolumeData(s, d[h])
                      }
                  }
              }
          }, {
              key: "parseVideo",
              value: function(t, i, s, a) {
                  if (this.fps.addDts(a),
                  s < 5)
                      u.default.warn("FlvParser.parseVideo avc videotag not enough dataLen=" + s);
                  else {
                      var n = t[i] >> 4
                        , r = (t[i++],
                      t[i++]);
                      if (5 !== s)
                          if (0 === r)
                              this.parseVideoConfig(t, i, s, a);
                          else if (1 === r) {
                              if (n == e.IFRAME)
                                  this.hasKeyFrame || this.remuxer.reset(),
                                  this.hasKeyFrame = !0;
                              else if (!this.hasKeyFrame)
                                  return void u.default.log("-------- drop video tag", a);
                              Number(localStorage._printVideoTs) && (u.default.debug("%cFlvParser video ts", "color:green", a, a - this.lastVideoTs),
                              this.lastVideoTs = a),
                              this.parseVideoNalu(t, i, s, a, n)
                          } else
                              2 === r ? u.default.info("%cFlvParser.parseVideo avc_end dataLen=" + s, "color:white;background:black") : u.default.warn("%cFlvParser.parseVideo error avc packet type=" + r, "color:white;background:black");
                      else
                          u.default.log("FlvParser.parseVideo avc_empty frameType=" + n + " avcPacketType=" + r)
                  }
              }
          }, {
              key: "parseVideoConfig",
              value: function(t, i, s, a) {
                  var n = void 0
                    , r = void 0
                    , o = []
                    , l = []
                    , h = []
                    , f = !1
                    , c = (i += 3) + s - 5;
                  if (this.isHevcNal(t, i)) {
                      this.showH265Tip || (this.showH265Tip = !0,
                      u.default.warn("This is a H265 video."));
                      for (var p = t[i += 4] >> 1 & 63, v = i; i < c; ) {
                          if (this.isHevcNal(t, i) || i + 1 === c) {
                              switch (p) {
                              case e.NAL_VPS:
                                  var y = {
                                      data: t.subarray(v, i),
                                      type: p
                                  };
                                  this.vpsUnit && this.vpsUnit.data.toString(16) !== y.data.toString(16) && (u.default.log("FlvParser.parseVideoConfig vps changed"),
                                  f = !0),
                                  this.vpsUnit = y,
                                  h.push(y.data);
                                  break;
                              case e.NAL_SPS:
                                  var m = {
                                      data: t.subarray(v, i),
                                      type: p
                                  };
                                  this.spsUnit && this.spsUnit.data.toString(16) !== m.data.toString(16) && (u.default.log("FlvParser.parseVideoConfig sps changed"),
                                  f = !0),
                                  this.spsUnit = m,
                                  o.push(m.data);
                                  break;
                              case e.NAL_PPS:
                                  var _ = {
                                      data: t.subarray(v, i),
                                      type: p
                                  };
                                  this.ppsUnit && this.ppsUnit.data.toString(16) !== _.data.toString(16) && (u.default.log("FlvParser.parseVideoConfig pps changed"),
                                  f = !0),
                                  this.ppsUnit = _,
                                  l.push(_.data)
                              }
                              if (i + 4 < c) {
                                  p = t[i += 4] >> 1 & 63,
                                  v = i;
                                  continue
                              }
                          }
                          i++
                      }
                      f && (this.reset(),
                      this.paused = this.mse.onAvcCfgChange()),
                      this.avcTrack.isHevc = !0,
                      this.avcTrack.vps = h,
                      this.avcTrack.sps = o,
                      this.avcTrack.pps = l,
                      this.avcTrack.codec = "avc1.4d401f",
                      this.avcTrack.width = this.mse.width,
                      this.avcTrack.height = this.mse.height,
                      this.hasCtsZero = !0
                  } else {
                      i += 4,
                      this.lengthSizeMinusOne = 3 & t[i++];
                      for (var P = 0, T = 0, S = "", g = 31 & t[i++], I = 0; I < g; ++I) {
                          n = (t[i++] << 8) + t[i++];
                          var E = {
                              data: t.subarray(i, i + n),
                              type: 7
                          };
                          this.spsUnit && this.spsUnit.data.toString(16) !== E.data.toString(16) && (u.default.log("FlvParser.parseVideoConfig sps changed"),
                          f = !0),
                          this.spsUnit = E,
                          i += n,
                          o.push(E.data);
                          var k = new d.default(E.data).readSPS();
                          P = k.width,
                          T = k.height;
                          for (var C = E.data.subarray(1, 4), R = "avc1.", A = 0; A < 3; A++) {
                              var U = C[A].toString(16);
                              U.length < 2 && (U = "0" + U),
                              R += U
                          }
                          S = R
                      }
                      for (var L = t[i++], M = 0; M < L; ++M) {
                          r = (t[i++] << 8) + t[i++];
                          var b = {
                              data: t.subarray(i, i + r),
                              type: 8
                          };
                          this.ppsUnit && this.ppsUnit.data.toString(16) !== b.data.toString(16) && (u.default.log("FlvParser.parseVideoConfig pps changed"),
                          f = !0),
                          this.ppsUnit = b,
                          i += r,
                          l.push(b.data)
                      }
                      f && (this.reset(),
                      this.paused = this.mse.onAvcCfgChange()),
                      this.avcTrack.isHevc = !1,
                      this.avcTrack.sps = o,
                      this.avcTrack.pps = l,
                      this.avcTrack.width = P,
                      this.avcTrack.height = T,
                      this.avcTrack.codec = S,
                      this.mse.setResolution(P, T)
                  }
                  u.default.log("FlvParser.parseVideoConfig avccfg dataLen=" + s + " spsLen=" + n + " ppsLen=" + r + " w/h=" + this.avcTrack.width + "/" + this.avcTrack.height + " codec=" + this.avcTrack.codec)
              }
          }, {
              key: "parseVideoNalu",
              value: function(t, i, s, a, n) {
                  var r = void 0
                    , o = void 0
                    , l = []
                    , d = 0
                    , h = (t[i++] << 16) + (t[i++] << 8) + t[i++];
                  if (0 === h ? this.hasCtsZero || (this.hasCtsZero = !0) : h >= 8388608 ? h -= 16777216 : h > 2500 && h < 3500 ? h = 0 : h > 600 && u.default.warn("FlvParser.parseVideoNalu large cts=" + h + " dts=" + a),
                  -1 !== this.avcTrack.startDts && !this.paused) {
                      var f = !1;
                      this.pushGop ? n === e.IFRAME && (f = !0) : a >= this.avcTrack.startDts + this.bufLen && (f = !0),
                      f && (this.avcTrack.endDts = a,
                      this.remux(e.REMUX_TYPE_VIDEO))
                  }
                  n === e.IFRAME && (this.spsUnit && (l.push(this.spsUnit),
                  d += this.spsUnit.data.length),
                  this.ppsUnit && (l.push(this.ppsUnit),
                  d += this.ppsUnit.data.length));
                  var c = i + s - 5;
                  if (this.isHevcNal(t, i)) {
                      t[i += 4];
                      for (var p = i; i < c; )
                          (this.isHevcNal(t, i) || i + 1 === c) && (o = {
                              data: t.subarray(p, i),
                              type: 1 === n ? 5 : 1
                          },
                          l.push(o),
                          d += o.data.length,
                          i + 4 < c) ? (t[i += 4],
                          p = i) : i++
                  } else
                      for (var v = s - 5; v; ) {
                          r = 0;
                          for (var y = 0; y <= this.lengthSizeMinusOne; ++y)
                              r += t[i++] << 8 * (this.lengthSizeMinusOne - y);
                          if (v -= this.lengthSizeMinusOne + 1,
                          0 !== r) {
                              if (r < 0 || r > s - 5)
                                  break;
                              if (r > v) {
                                  i += v;
                                  break
                              }
                              if (v -= r,
                              o = {
                                  data: t.subarray(i, i + r),
                                  type: 1 === n ? 5 : 1
                              },
                              this.isH264Sei(o.data)) {
                                  for (var m = e.H265_SEI_HEAD.length, _ = 0, P = 3; P < m + 3 && o.data[P] == e.H265_SEI_HEAD[P - 3]; P++)
                                      _++;
                                  if (49 == o.data[11 + _ - 1 + 5] && 72 == o.data[3 + _ - 1 + 1] && 85 == o.data[3 + _ - 1 + 2] && 89 == o.data[3 + _ - 1 + 3] && 65 == o.data[3 + _ - 1 + 4] && 58 == o.data[3 + _ - 1 + 5]) {
                                      var T = o.data.subarray(3 + _ + 5, o.data.length - 1);
                                      this.mse.saveH264SeiData(a, T)
                                  }
                              } else
                                  this.isH264Aud(o.data) && this.deleteH264Aud || (l.push(o),
                                  d += o.data.length);
                              i += r
                          }
                      }
                  if (d > 0) {
                      var S = {
                          units: l,
                          dts: 90 * a,
                          pts: 90 * (a + h),
                          key: n === e.IFRAME
                      };
                      this.timeStampStat.setTimeStamp(a, a + h, h),
                      this.avcTrack.samples.push(S),
                      this.avcTrack.naluCnt += l.length,
                      this.avcTrack.len += d,
                      this.playVideoFrameCnt++,
                      this.playVideoLength += s,
                      -1 === this.avcTrack.startDts && (this.avcTrack.startDts = a),
                      this.avcTrack.endDts = a
                  } else
                      u.default.warn("FlvParser.parseVideoNalu discard empty nalu dts=" + a + " pts=" + (a + h) + " dataLen=" + s + " naluLen=" + r)
              }
          }, {
              key: "parseAudio",
              value: function(t, i, s, a) {
                  var n = t[i++] >>> 4
                    , r = !0
                    , o = a;
                  10 != n && u.default.error("FlvParser.parseAudio Unsupported audio codec, soundFormat=" + n),
                  this.calcAudioFrameRate(a),
                  null != this.audioIncreaseTSMap.get(a) && (a = this.audioIncreaseTSMap.get(a)),
                  a < this.lastAudioTs && 0 != this.lastAudioTs && (r = !1);
                  var l = t[i++];
                  if (0 === l)
                      if (s >= 4) {
                          var d = t[i] >> 3;
                          this.audioObjectType = d;
                          var h = ((7 & t[i]) << 1) + ((128 & t[i + 1]) >> 7);
                          if (h >= e.AdtsSampleingRates.length)
                              return void u.default.error("FlvParser.parseAudio SampleingRate out of bounds. samplingIndex=" + h);
                          this.audioChannelCount = (120 & t[i + 1]) >> 3;
                          var f = this.getAdtsConfig(d, h, 2);
                          f.toString(16) !== this.audioConfig.toString(16) && u.default.warn("FlvParser.parseAudio adts changed old=" + this.audioConfig + " new=" + f),
                          this.audioConfig = f,
                          this.firstAudioTs = -1,
                          this.firstDemuxAudioTS = -1,
                          this.lastAudioTs = 0
                      } else
                          u.default.warn("FlvParser.parseAudio adts error dataLen=" + s + " ts=" + a);
                  else if (1 === l) {
                      if (this.last10anduiptsList.shift(),
                      this.last10anduiptsList.push(a),
                      -1 == this.firstAudioTs && (this.firstAudioTs = a),
                      -1 == this.firstDemuxAudioTS)
                          this.firstDemuxAudioTS = a;
                      else if (a == this.firstDemuxAudioTS)
                          return void u.default.warn("parseaudio audio too much audio in firstTs ts=" + a);
                      if (!r)
                          return void u.default.warn("parseaudio audio ts too small maxlist=" + this.maxaudioptsList + "  now=" + a + "  first=" + this.firstAudioTs + "  last=" + this.lastAudioTs);
                      for (var c = 0; c < 10; c++)
                          this.maxaudioptsList[c] = this.last10anduiptsList[c];
                      if (this.lastAudioTs > 0 && this.lastAudioTs == a) {
                          var p = a + (0 | this.aacTimeLen);
                          this.audioIncreaseTSMap.set(o, p),
                          a = p
                      }
                      if (Number(localStorage._printAudioTs) && u.default.debug("%cFlvParser audio ts", "color:red", a, a - this.lastAudioTs),
                      this.lastAudioTs = a,
                      this.hasAudioTag = !0,
                      -1 !== this.aacTrack.startDts && 0 === this.avcTrackList.length && 0 === this.avcTrack.samples.length && a >= this.aacTrack.startDts + this.bufLen && (this.aacTrack.endDts = a,
                      this.remux(e.REMUX_TYPE_AUDIO)),
                      -1 === this.aacTrack.startDts && (this.aacTrack.startDts = a),
                      !this.validAacSample(a))
                          return;
                      var v = s - 2
                        , y = {
                          unit: t.subarray(i, i + v),
                          dts: 90 * a,
                          pts: 90 * a,
                          ts: a
                      };
                      this.lastAudioUtil = y.unit,
                      this.aacTrack.samples.push(y),
                      this.aacTrack.endDts = a,
                      this.aacTrack.len += y.unit.length,
                      this.avcTrackList.length > 0 && this.remux(e.REMUX_TYPE_AUDIO)
                  } else
                      u.default.warn("FlvParser.parseAudio error aac packet type=" + l)
              }
          }, {
              key: "validAacSample",
              value: function(e) {
                  var t = this.aacTrack.samples.length;
                  if (t > 0) {
                      var i = this.aacTrack.samples[t - 1];
                      return 1 === t && i.ts > e && i.ts - e > this.validAacTime ? (this.aacTrack.samples.shift(),
                      !0) : e - i.ts < this.validAacTime
                  }
                  return !0
              }
          }, {
              key: "getAdtsConfig",
              value: function(t, i, s) {
                  var a = 0
                    , n = null
                    , r = navigator.userAgent.toLowerCase();
                  return -1 !== r.indexOf("firefox") ? i >= 6 ? (t = 5,
                  n = new Array(4),
                  a = i - 3) : (t = 2,
                  n = new Array(2),
                  a = i) : -1 !== r.indexOf("android") ? -1 !== r.indexOf("mqqbrowser") ? (t = 2,
                  n = new Array(2),
                  a = i) : (t = 5,
                  n = new Array(4),
                  a = i) : (t = 5,
                  n = new Array(4),
                  a = i,
                  i >= 6 ? a = i - 3 : 1 === s && (t = 2,
                  n = new Array(2),
                  a = i)),
                  this.audioSampleRate = e.AdtsSampleingRates[i],
                  this.aacTimeLen = 1024e3 / this.audioSampleRate,
                  u.default.log("FlvParser.getAdtsConfig audioSampleRate=" + this.audioSampleRate + " aacTimeLen=" + this.aacTimeLen),
                  n[0] = t << 3,
                  n[0] |= (14 & i) >> 1,
                  n[1] = (1 & i) << 7,
                  n[1] |= s << 3,
                  5 === t && (n[1] |= (14 & a) >> 1,
                  n[2] = (1 & a) << 7,
                  n[2] |= 8,
                  n[3] = 0),
                  u.default.log("FlvParser.getAdtsConfig type=" + t + " index=" + i + " channel=" + s + " exIndex=" + a + " config=" + n),
                  n
              }
          }, {
              key: "isHevcNal",
              value: function(e, t) {
                  return 0 === e[t] && 0 === e[t + 1] && 0 === e[t + 2] && 1 === e[t + 3]
              }
          }, {
              key: "isH264Sei",
              value: function(e) {
                  return 6 === e[0]
              }
          }, {
              key: "isH264Aud",
              value: function(e) {
                  return 9 === e[0]
              }
          }, {
              key: "remux",
              value: function(t) {
                  t == e.REMUX_TYPE_VIDEO && (this.avcTrackList.push(this.avcTrack),
                  this.avcTrack = {
                      type: "video",
                      id: 1,
                      sn: 0,
                      samples: [],
                      len: 0,
                      duration: 0,
                      startDts: -1,
                      endDts: 0,
                      naluCnt: 0
                  },
                  this.avcTrack.sn = this.avcTrackList[this.avcTrackList.length - 1].sn + 1);
                  var i = this.aacTrack
                    , s = i.samples
                    , a = this.avcTrackList[0];
                  if (a) {
                      if (a.endDts > i.endDts + this.aacTimeLen && (this.hasAudioTag || Date.now() - this.beginParseTs < 200))
                          return;
                      this.avcTrackList.shift()
                  } else
                      a = this.avcTrack;
                  var n = Number(localStorage._printRemux);
                  n && (u.default.debug("=========== aStartDts:" + i.startDts + " aEndDts:" + i.endDts + " samples:" + i.samples.length),
                  u.default.debug("=========== vStartDts:" + a.startDts + " vEndDts:" + a.endDts + " samples:" + a.samples.length + " avcTrackList:" + this.avcTrackList.length));
                  var r = {
                      type: "audio",
                      id: 2,
                      sn: 0,
                      samples: [],
                      len: 0,
                      duration: 0,
                      startDts: -1,
                      endDts: 0
                  };
                  r.sn = i.sn++,
                  r.config = this.audioConfig,
                  r.audiosamplerate = this.audioSampleRate,
                  r.channelCount = this.audioChannelCount,
                  r.codec = "mp4a.40.5",
                  r.timescale = this.remuxer.timescale;
                  var o = a.startDts
                    , l = a.endDts;
                  -1 === o && (o = i.startDts,
                  l = i.endDts),
                  this.remuxAudio(s, r, o, l),
                  s.length > 0 ? (this.aacTrack.startDts = s[0].ts,
                  this.aacTrack.endDts = s[s.length - 1].ts) : (this.aacTrack.startDts = -1,
                  this.aacTrack.endDts = 0),
                  a.duration = Math.round((a.endDts - a.startDts) * (this.remuxer.timescale / 1e3)),
                  r.duration = Math.round((r.endDts - r.startDts) * (this.remuxer.timescale / 1e3)),
                  Number(localStorage._printRemux2) && (u.default.debug("REMUX aac ts=" + r.startDts + "-" + r.endDts + " len=" + r.len + " samples=" + r.samples.length + " duration=" + r.duration),
                  u.default.debug("REMUX avc ts=" + a.startDts + "-" + a.endDts + " len=" + a.len + " samples=" + a.samples.length + " nalus=" + a.naluCnt + " duration=" + a.duration)),
                  this.mse.onGop(l - o),
                  this.remuxer.remux(r, a, 0, !1),
                  this.bufLen = this.DEFAULT_GOP,
                  n && u.default.debug("=========== aStartDts:" + i.startDts + " aEndDts:" + i.endDts + " samples:" + i.samples.length, "\n\n")
              }
          }, {
              key: "remuxAudio",
              value: function(e, t, i, s) {
                  var a = null;
                  if (e.length > 0 && (a = e[0]),
                  -1 === this.nextAacDts && (this.nextAacDts = i,
                  0 === this.nextAacDts && (this.nextAacDts += this.aacTimeLen)),
                  s - this.nextAacDts > this.validAacTime)
                      e.shift();
                  else {
                      var n = 0
                        , r = 0
                        , o = 0;
                      for (n = this.nextAacDts; n < s; n += this.aacTimeLen)
                          if (r = Math.round(n),
                          a && a.ts <= r)
                              (a = e.shift()).ts <= this.lastAacTs && 0 != this.lastAacTs && (n -= this.aacTimeLen,
                              r = Math.round(n)),
                              Number(localStorage._printRemux) && u.default.log("^^^^^^^^^^^^^ aac.ts", a.ts, "to", r, "diff", r - a.ts),
                              this.lastAacTs = a.ts,
                              a.pts = a.dts = 90 * r,
                              a.ts = r,
                              t.samples.push(a),
                              t.len += a.unit.length,
                              this.playAudioFrameCnt++,
                              this.playAudioLength += a.unit.length,
                              -1 === t.startDts && (t.startDts = a.ts),
                              t.endDts = a.ts,
                              a = e.length > 0 ? e[0] : null;
                          else if (!this.mse.isPureAudio) {
                              o++;
                              var d = null;
                              d = 22050 === this.audioSampleRate && 2 === this.audioObjectType ? {
                                  unit: new Uint8Array(l.default.emptyAacFrame),
                                  pts: 0,
                                  dts: 0,
                                  ts: 0
                              } : {
                                  unit: l.default.getSilentFrame(this.audioObjectType, this.audioChannelCount),
                                  pts: 0,
                                  dts: 0,
                                  ts: 0
                              },
                              d && (d.pts = d.dts = 90 * r,
                              d.ts = r,
                              t.samples.push(d),
                              t.len += d.unit.length,
                              r > this.lastAudioTs && (this.lastAudioTs = r),
                              this.playAudioFrameCnt++,
                              this.playEmptyAudioFrameCnt++,
                              this.playAudioLength += d.unit.length,
                              -1 === t.startDts && (t.startDts = d.ts),
                              t.endDts = d.ts)
                          }
                      this.nextAacDts = n,
                      o > 0 && this.hasAudioTag && (this.hasEmptyFrames = !0,
                      u.default.log("FlvParser.remux aac add " + o + " empty frames."))
                  }
              }
          }, {
              key: "calcAudioFrameRate",
              value: function(e) {
                  this.audioFrameRateTs || (this.audioFrameRateTs = e,
                  this.audioFrameCnt = 0),
                  e - this.audioFrameRateTs < 1e3 ? this.audioFrameCnt++ : (Number(localStorage._printAudioFrameRate) && u.default.log("@@@@@@@@ audioFrameRate=" + this.audioFrameCnt),
                  this.audioFrameRateTs = e,
                  this.audioFrameCnt = 0)
              }
          }]),
          e
      }();
      m.REMUX_TYPE_AUDIO = 0,
      m.REMUX_TYPE_VIDEO = 1,
      m.FLV_HEADER_LEN = 9,
      m.TAG_HEADER_LEN = 11,
      m.PREV_TAG_SIZE_LEN = 4,
      m.AUDIO_TYPE = 8,
      m.VIDEO_TYPE = 9,
      m.SCRIPT_TYPE = 18,
      m.SCRIPT_AMF1_HEAD_LEN = 13,
      m.SCRIPT_AMF2_HEAD_LEN = 5,
      m.IFRAME = 1,
      m.NAL_VPS = 32,
      m.NAL_SPS = 33,
      m.NAL_PPS = 34,
      m.H265_SEI_HEAD = [44, 162, 222, 9, 181, 23, 71, 219, 187, 85, 164, 254, 127, 194, 252, 78],
      m.AdtsSampleingRates = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350],
      t.default = m
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = s(i(8))
        , u = s(i(6))
        , l = s(i(67))
        , d = s(i(200))
        , h = s(i(201))
        , f = s(i(24))
        , c = s(i(13))
        , p = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.flvPlayer = t,
              t.hyPlayer && (this.hyPlayer = t.hyPlayer,
              this.stat = t.hyPlayer.stat),
              f.default.firefox ? this.link = new d.default(this) : this.link = new h.default(this),
              this.status = 0,
              this.url = null,
              this.started = !1,
              this.lastGetProxyTime = 0,
              this.getProxyPeriod = e.DEFAULT_GET_PROXY_PERIOD
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.started && (r.default.log("FlvLoader.reset"),
                  this.link.destroy(),
                  f.default.firefox ? this.link = new d.default(this) : this.link = new h.default(this),
                  this.status = 0,
                  this.url = null)
              }
          }, {
              key: "connect",
              value: function(e) {
                  if (e) {
                      this.link instanceof l.default && (e = e.replace("http", "ws"));
                      var t = this.hyPlayer ? this.hyPlayer.uuid : 0
                        , i = this.flvPlayer.info;
                      i && (t = o.default.rotUid(i.uid || 0, i.presenterUid || 0)),
                      e += "&u=" + t + "&t=100&sv=1909271530",
                      r.default.log("FlvLoader.connect url=" + e),
                      this.reset(),
                      this.lastGetProxyTime = u.default.now() - 2e3,
                      this.url = e,
                      this.link.connect(this.url),
                      this.stat && this.stat.setComDim(c.default.DIM_COM.STREAM_URL, e),
                      this.started = !0
                  } else
                      r.default.warn("FlvLoader.connect url is null")
              }
          }, {
              key: "close",
              value: function() {
                  r.default.log("FlvLoader.close"),
                  this.reset(),
                  this.started = !1
              }
          }, {
              key: "onstatus",
              value: function(e) {
                  this.status = e
              }
          }, {
              key: "onopen",
              value: function() {
                  r.default.log("FlvLoader.onopen"),
                  this.getProxyPeriod = e.DEFAULT_GET_PROXY_PERIOD,
                  this.flvPlayer.onConnected()
              }
          }, {
              key: "onclose",
              value: function() {
                  r.default.log("FlvLoader.onclose"),
                  this.flvPlayer.onClosed(),
                  this.getProxy()
              }
          }, {
              key: "onerror",
              value: function(e, t) {
                  r.default.log("FlvLoader.onerror", t),
                  this.getProxy(),
                  this.flvPlayer.onLoadError && this.flvPlayer.onLoadError(e)
              }
          }, {
              key: "onData",
              value: function(e) {
                  this.flvPlayer.onData(e)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  if (this.started && (this.onCheckConnect(e),
                  t % 10 == 0)) {
                      var i = this.link.speed;
                      i != o.default.UintMax && (i = o.default.formatByteSize(i),
                      r.default.log("FlvLoader speed " + i + "/s"))
                  }
              }
          }, {
              key: "onCheckConnect",
              value: function(e) {
                  this.connected || this.getProxy()
              }
          }, {
              key: "getProxy",
              value: function() {
                  var e = u.default.now();
                  e - this.lastGetProxyTime < this.getProxyPeriod || (r.default.log("FlvLoader.getProxy lastGetProxyTime=" + this.lastGetProxyTime + " now=" + e + " period=" + this.getProxyPeriod),
                  this.reset(),
                  this.lastGetProxyTime = e,
                  this.getProxyPeriod = Math.min(2 * this.getProxyPeriod, 128e3),
                  this.flvPlayer.requestUrl())
              }
          }, {
              key: "speed",
              get: function() {
                  var e = this.link.speed;
                  return e == o.default.UintMax && (e = 0),
                  e
              }
          }, {
              key: "connected",
              get: function() {
                  return this.link && this.link.connected
              }
          }]),
          e
      }();
      p.DEFAULT_GET_PROXY_PERIOD = 4e3,
      t.default = p
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(10))
        , o = s(i(4))
        , u = s(i(25))
        , l = function() {
          function e(t) {
              var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
              (0,
              a.default)(this, e),
              this.linkHandler = t,
              this.connected = !1,
              this.url = null,
              this.xhr = null,
              this.avgSpeed = new u.default(i)
          }
          return (0,
          n.default)(e, [{
              key: "destroy",
              value: function() {
                  this.reset(),
                  this.linkHandler = null,
                  r.default.remove(this.onCheckTimer, this)
              }
          }, {
              key: "reset",
              value: function() {
                  this.abort(),
                  this.url = null,
                  this.xhr = null,
                  this.connected = !1,
                  this.avgSpeed.reset()
              }
          }, {
              key: "abort",
              value: function() {
                  this.xhr && (o.default.log("ProtoLinkXhrFF abort"),
                  this.xhr.abort())
              }
          }, {
              key: "connect",
              value: function(e) {
                  this.reset(),
                  this.url = e;
                  var t = this.xhr = new XMLHttpRequest;
                  t.responseType = "moz-chunked-arraybuffer",
                  t.open("GET", this.url, !0),
                  t.onerror = this.onerror.bind(this),
                  t.onprogress = this.onprogress.bind(this),
                  t.onloadend = this.loadend.bind(this),
                  t.onload = this.onclose.bind(this),
                  t.send(),
                  r.default.add(this.onCheckTimer, this, 1e3)
              }
          }, {
              key: "onprogress",
              value: function(e) {
                  this.connected || this.onopen();
                  var t = e.target.response;
                  this.linkHandler.onData(t),
                  this.avgSpeed.addCur(t.byteLength)
              }
          }, {
              key: "onreadystatechange",
              value: function(e) {}
          }, {
              key: "onopen",
              value: function() {
                  this.connected = !0,
                  this.linkHandler && this.linkHandler.onopen()
              }
          }, {
              key: "onerror",
              value: function(e) {
                  o.default.log("ProtoLinkXhrFF.onerror " + e);
                  var t = event.currentTarget.status;
                  this.connected = !1,
                  this.linkHandler && (this.linkHandler.onerror(e, t),
                  this.linkHandler = null)
              }
          }, {
              key: "loadend",
              value: function(e) {
                  404 === e.currentTarget.status && this.onerror(e)
              }
          }, {
              key: "onclose",
              value: function() {
                  o.default.log("ProtoLinkXhrFF.onclose"),
                  this.connected = !1,
                  this.linkHandler && (this.linkHandler.onclose(),
                  this.linkHandler = null)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  this.connected && this.avgSpeed.calculate()
              }
          }, {
              key: "speed",
              get: function() {
                  return this.avgSpeed.average()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(10))
        , o = s(i(4))
        , u = s(i(25))
        , l = function() {
          function e(t) {
              var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
              (0,
              a.default)(this, e),
              this.linkHandler = t,
              this.connected = !1,
              this.url = null,
              this.requestAbort = !1,
              this.avgSpeed = new u.default(i)
          }
          return (0,
          n.default)(e, [{
              key: "destroy",
              value: function() {
                  this.abort(),
                  this.linkHandler = null,
                  this.reset(),
                  r.default.remove(this.onCheckTimer, this)
              }
          }, {
              key: "reset",
              value: function() {
                  this.url = null,
                  this.connected = !1,
                  this.avgSpeed.reset()
              }
          }, {
              key: "pump",
              value: function(e) {
                  var t = this;
                  e.read().then(function(i) {
                      if (i.done)
                          t.onclose();
                      else {
                          if (!0 === t.requestAbort)
                              return t.requestAbort = !1,
                              e.cancel();
                          var s = i.value.buffer;
                          t.avgSpeed.addCur(s.byteLength),
                          t.linkHandler && t.linkHandler.onData(s),
                          t.pump(e)
                      }
                  }
                  .bind(this))
              }
          }, {
              key: "connect",
              value: function(e) {
                  var t = this;
                  r.default.add(this.onCheckTimer, this, 1e3),
                  this.url = e,
                  fetch(e).then(function(e) {
                      Number(localStorage._printFetchUrl) && o.default.log("FetchUrl", e.url),
                      t.linkHandler && t.linkHandler.onstatus && t.linkHandler.onstatus(e.status),
                      e.ok && e.status >= 200 && e.status < 300 ? (t.onopen(),
                      t.pump.call(t, e.body.getReader())) : (o.default.log("ProtoLinkFetch http code invalid status:" + e.status),
                      t.onerror(e.statusText, e.status))
                  }).catch(function(e) {
                      o.default.log("ProtoLinkFetch exception"),
                      t.onerror(e.message)
                  })
              }
          }, {
              key: "abort",
              value: function() {
                  this.requestAbort = !0
              }
          }, {
              key: "onopen",
              value: function() {
                  this.connected = !0,
                  this.linkHandler && this.linkHandler.onopen()
              }
          }, {
              key: "onerror",
              value: function(e, t) {
                  o.default.log("ProtoLinkFetch.onerror " + e),
                  this.connected = !1,
                  this.linkHandler && (this.linkHandler.onerror(e, t),
                  this.linkHandler = null)
              }
          }, {
              key: "onclose",
              value: function() {
                  this.connected = !1,
                  this.linkHandler && (this.linkHandler.onclose(),
                  this.linkHandler = null)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  this.connected && this.avgSpeed.calculate()
              }
          }, {
              key: "speed",
              get: function() {
                  return this.avgSpeed.average()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      function a(e, t) {
          for (var i = 0; i < e.length; i++) {
              var s = e[i];
              s.length < t && (s += " ".repeat(t - s.length),
              e[i] = s)
          }
          return e.join("\n")
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var n = s(i(0))
        , r = s(i(1))
        , o = s(i(4))
        , u = s(i(203))
        , l = s(i(8))
        , d = s(i(6))
        , h = s(i(25))
        , f = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.version = 1019,
              this.BASE_SUBS = 10,
              this.presenterUid = 0,
              this.uid = 0,
              this.uuid = 0,
              this.convertUid = 0,
              this.appId = 66,
              this.appid = 66;
              var t = Number(localStorage.appid);
              t && (this.appid = t,
              o.default.warn("--- test appid " + t + " ---", this)),
              this.sid = 0,
              this.subSid = 0,
              this.lineType = -1,
              this.bitrate = 0,
              this.curBitrate = 0,
              this.originalBitrate = 0,
              this.userAbility = null,
              this.isStartFromUrl = !1,
              this.streamId = null,
              this.streamSeqSN = 0,
              this.quickAccessBeginIndex = 0,
              this.quickAccessEndIndex = 0,
              this.exip = 0,
              this.sslUrl = "",
              this.myIp = "",
              this.quickTime = 0,
              this.urlTokenTime = 0,
              this.urlToken = "",
              this.wsTime = "",
              this.videoNtp = new u.default,
              this.stampcSvr = 0,
              this.stampcNow = 0,
              this.wanIp = "",
              this.wanPort = 0,
              this.cdnpConnected = 0,
              this.proxyIp = "",
              this.cdnpIp = 0,
              this.stunPorts = [],
              this.enableFeatures = 0,
              this.cdnpip = 0,
              this.firstLogin = !0,
              this.loaderMgr = null,
              this.p2pMgr = null,
              this.globalSpeedCalc = new h.default(20),
              this.initTafTime = 0,
              this.reqVpTime = 0,
              this.getVPTime = 0,
              this.startTime = 0,
              this.connectVideoTime = 0,
              this.firstVideoPkgTime = 0,
              this.firstIFrameTime1 = 0,
              this.firstIFrameTime2 = 0,
              this.firstRenderTime = 0,
              this.onPlayTime = 0
          }
          return (0,
          r.default)(e, [{
              key: "initUid",
              value: function(e) {
                  this.uuid = e,
                  this.convertUid = l.default.rotUid(this.uid, this.presenterUid),
                  o.default.log("Global.initUid uid=" + this.uid + " uuid=" + this.uuid + " convertUid=" + this.convertUid)
              }
          }, {
              key: "getServTime",
              value: function(e) {
                  if (0 == this.stampcSvr)
                      return 0;
                  var t = e || d.default.now();
                  return this.stampcSvr + (t - this.stampcNow)
              }
          }, {
              key: "initUseTime",
              value: function(e) {
                  o.default.log("initUseTime", e),
                  this.startTime = e,
                  this.getLivingInfoTime = 0,
                  this.connectVideoTime = 0,
                  this.firstVideoPkgTime = 0,
                  this.firstAudioPkgTime = 0,
                  this.firstIFrameTime1 = 0,
                  this.firstIFrameTime2 = 0,
                  this.firstRenderTime = 0,
                  this.onPlayTime = 0
              }
          }, {
              key: "printUseTime",
              value: function() {
                  var e = ["\n%c" + ".".repeat(28), " getLivingInfoTime    = " + Math.max(0, this.getLivingInfoTime - this.startTime), " connectVideoTime     = " + (this.connectVideoTime - this.startTime)];
                  this.firstVideoPkgTime > 0 ? e.push(" firstVideoPkgTime    = " + (this.firstVideoPkgTime - this.connectVideoTime), " firstIFrameTime1     = " + (this.firstIFrameTime1 - this.connectVideoTime), " firstIFrameTime2     = " + (this.firstIFrameTime2 - this.firstIFrameTime1), " firstRenderTime      = " + (this.firstRenderTime - this.firstIFrameTime2)) : e.push(" firstAudioPkgTime    = " + (this.firstAudioPkgTime - this.connectVideoTime), " firstRenderTime      = " + (this.firstRenderTime - this.firstAudioPkgTime)),
                  e.push(" onPlayTime           = " + (this.onPlayTime - this.firstRenderTime), " totalTime            = " + (this.onPlayTime - this.startTime), ".".repeat(28));
                  var t = a(e, 28);
                  o.default.log(t, "color:#007500;background:#FFF5C2")
              }
          }, {
              key: "printVpTime",
              value: function() {
                  if (!this.printVpTime.done) {
                      this.printVpTime.done = !0;
                      var e = a(["\n%c" + ".".repeat(28), " initTafTime      = " + (this.initTafTime - 0), " getVPTime        = " + (this.getVPTime - this.reqVpTime), " connectVpTime    = " + (this.connectVpTime - this.getVPTime), " loginTime        = " + (this.loginTime - this.connectVpTime), " totalTime        = " + (this.loginTime - this.reqVpTime), ".".repeat(28)], 28);
                      o.default.log(e, "color:#007500;background:#FFF5C2")
                  }
              }
          }]),
          e
      }();
      t.default = f
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(6))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.osTime = 0,
              this.syncLocalTime = 0,
              this.rttList = []
          }
          return (0,
          n.default)(e, [{
              key: "convertToSrvTime",
              value: function(e) {
                  if (0 === this.osTime)
                      return 0;
                  var t = e - this.osTime;
                  return this.syncLocalTime + t
              }
          }, {
              key: "isFinishNtp",
              value: function() {
                  return 0 !== this.osTime
              }
          }, {
              key: "ntpProcess",
              value: function(e, t) {
                  var i = r.default.now()
                    , s = i - e
                    , a = Math.round(t + s / 2);
                  if (0 === this.osTime && 0 === this.syncLocalTime)
                      this.osTime = i,
                      this.syncLocalTime = a,
                      this.rttList.push(s);
                  else if (this.rttList.length < 10)
                      this.osTime = i,
                      this.syncLocalTime = a,
                      this.rttList.push(s);
                  else {
                      for (var n = [], o = 0; o < this.rttList.length; ++o)
                          n.push(this.rttList[o]);
                      n.sort(function(e, t) {
                          return e - t
                      });
                      for (var u = 0, l = 0; l < 4; ++l)
                          u += n[l];
                      var d = u >> 2;
                      4 * s > 3 * d && 4 * s < 5 * d ? (this.osTime = i,
                      this.syncLocalTime = a) : s > 6e4 && (this.osTime = i,
                      this.syncLocalTime = a),
                      this.rttList.shift(),
                      this.rttList.push(s),
                      n = null
                  }
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = s(i(8))
        , u = s(i(10))
        , l = s(i(6))
        , d = s(i(24))
        , h = s(i(67))
        , f = s(i(200))
        , c = s(i(201))
        , p = s(i(29))
        , v = s(i(22))
        , y = s(i(13))
        , m = s(i(279))
        , _ = s(i(33))
        , P = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.loaderMgr = t,
              this.p2pPlayer = t.p2pPlayer,
              this.tsdbUtil = t.p2pPlayer.hyPlayer.tsdbUtil,
              this.stat = t.p2pPlayer.hyPlayer.stat,
              this.type = e.TYPE_FULL,
              this.sliceHandler = new m.default(this),
              this.url = null,
              this.lineType = -1,
              this.started = !1,
              this.status = 0,
              this.connecting = !1,
              this.connectTotalTs = 0,
              this.flowRetryTimes = 0,
              this.lastSeq = 0,
              this.connectTs = 0,
              this.connectedTs = 0,
              this.firstPkgTs = 0,
              this.reportUrl = null,
              this.sliceTs = 0,
              this.sliceStamp = 0,
              this.tcpStamp = 0,
              this.logMark = "FullStream",
              this.logMarkCss = "color:#01814A;background:#FFF5C2;font-weight:bold;",
              this.ConnectTotalTime = Number(_.default.connectTotalTime),
              this.ConnectTimeout = Number(_.default.connectTimeout),
              this.FlowTimeout = Number(_.default.flowTimeout),
              this.FlowRetryTimes = Number(_.default.flowRetryTimes),
              this.RenderTimeout = Number(_.default.renderTimeout),
              this.NoDataTimeout = Number(_.default.noDataTimeout)
          }
          return (0,
          n.default)(e, [{
              key: "onSlice",
              value: function(e, t) {
                  var i = t.seq;
                  0 === this.lastSeq && r.default.log("VideoLoader.onFirstSeq", this.getLoaderInfo(), "seq", i),
                  this.lastSeq > 0 && Math.abs(i - this.lastSeq) > 1 && r.default.warn("VideoLoader seq discontinuous, lastSeq=" + this.lastSeq + " curSeq=" + i + " jump=" + (i - this.lastSeq)),
                  this.lastSeq = i,
                  t.from = this.type,
                  this.p2pPlayer.sliceProtoHandler.onSlice(t)
              }
          }, {
              key: "onProtoError",
              value: function(e) {
                  r.default.error("SliceHandler.onProto length error pktLen=" + e + ", smaller than 10 bytes.", this.getLoaderInfo())
              }
          }, {
              key: "getLoaderInfo",
              value: function() {
                  var e = "bufLen=" + this.p2pPlayer.bufferLen;
                  return "type=" + this.type + " line=" + this.lineType + " " + e
              }
          }, {
              key: "resetReport",
              value: function() {
                  this.sliceStamp = 0,
                  this.tcpStamp = 0
              }
          }, {
              key: "reset",
              value: function() {
                  this.sliceHandler.reset(),
                  this.status = 0,
                  this.lastSeq = 0,
                  this.connecting = !1,
                  this.connectTs = 0,
                  this.connectedTs = 0,
                  this.firstPkgTs = 0,
                  this.sliceTs = 0,
                  this.resetReport(),
                  u.default.remove(this.onCheckTimer, this),
                  u.default.remove(this.onConnectTimeout, this),
                  u.default.remove(this.onFirstDataTimeout, this),
                  u.default.remove(this.onRenderTimeout, this),
                  this.link && this.link.destroy(),
                  this.url && this.url.startsWith("http") ? d.default.firefox ? this.link = new f.default(this) : this.link = new c.default(this) : this.link = new h.default(this,!1)
              }
          }, {
              key: "connect",
              value: function(e, t) {
                  this.url = e,
                  this.lineType = t,
                  this.reset();
                  var i = l.default.now();
                  this.connectTs = i,
                  this.tcpStamp = i;
                  var s = e
                    , a = this.p2pPlayer.G;
                  a.isStartFromUrl || (s += "&timeStamp=" + l.default.getDateTimeStr().replace(" ", "_"),
                  s += "&u=" + a.convertUid + "&t=100&sv=1909271530",
                  a.myIp && (s += "&myIp=" + a.myIp)),
                  r.default.log("%c" + this.logMark, this.logMarkCss, s + " " + this.getLoaderInfo()),
                  this.connecting = !0,
                  this.link.connect(s),
                  this.stat.setComDim(y.default.DIM_COM.STREAM_URL, s),
                  this.started = !0,
                  u.default.add(this.onCheckTimer, this, 1e3),
                  u.default.once(this.onConnectTimeout, this, this.ConnectTimeout)
              }
          }, {
              key: "reconnect",
              value: function() {
                  if (null != this.url && -1 !== this.lineType) {
                      var e = this.loaderMgr.antiCode;
                      e && -1 === this.url.indexOf(e) && (this.url = this.url.replace(/(wsSecret=.+?&wsTime=.+?)(\&|$)/, e + "$2"));
                      var t = this.p2pPlayer.info
                        , i = new RegExp("//(.*?)" + t._domain + "/")
                        , s = this.p2pPlayer.changeDomain();
                      this.url = s ? this.url.replace(i, "//" + s + "/" + t._domain + "/") : this.url.replace(i, "//" + t._domain + "/"),
                      r.default.log("VideoLoader.reconnect"),
                      this.close(),
                      this.connect(this.url, this.lineType)
                  } else
                      r.default.error("VideoLoader.reconnect url=" + this.url + " line=" + this.lineType)
              }
          }, {
              key: "close",
              value: function() {
                  this.reset(),
                  this.started = !1
              }
          }, {
              key: "onopen",
              value: function() {
                  var e = l.default.now();
                  this.connectedTs = e;
                  var t = this.connectedTs - this.connectTs;
                  r.default.log("VideoLoader.onopen " + this.getLoaderInfo() + " cost time=" + t);
                  var i = this.p2pPlayer.G;
                  0 === i.connectVideoTime && (i.connectVideoTime = e,
                  r.default.log("%c[TIME] connectVideoTime=" + (i.connectVideoTime - i.startTime) + " totalTime=" + (e - i.startTime), "color:#A23400;background:#FFF5C2")),
                  this.connecting = !1,
                  this._reportTcp(),
                  u.default.remove(this.onConnectTimeout, this),
                  u.default.once(this.onFirstDataTimeout, this, this.FlowTimeout)
              }
          }, {
              key: "_onclose",
              value: function() {
                  this.connecting = !1,
                  this.resetReport(),
                  this.sliceTs > 0 ? this.getProxy("onclose") : this.connectedTs > 0 ? this.onFirstDataTimeout() : u.default.once(this.onConnectTimeout, this, 1e3)
              }
          }, {
              key: "onclose",
              value: function() {
                  r.default.log("VideoLoader.onclose " + this.getLoaderInfo()),
                  this._onclose()
              }
          }, {
              key: "onerror",
              value: function(e, t) {
                  r.default.log("VideoLoader.onerror " + this.getLoaderInfo()),
                  404 !== t && 403 !== t || (this.tsdbUtil.httpError = !0,
                  this.tsdbUtil.sendMetrics([{
                      sMetricName: v.default.METRIC.WEB_P2P_HTTP_CODE + t,
                      vDimension: {
                          success: this.type
                      }
                  }, this.stat.createAct(y.default.ACT.HTTP_CODE_ + t, {
                      value: [this.type]
                  })])),
                  this._onclose()
              }
          }, {
              key: "onstatus",
              value: function(e) {
                  this.status = e
              }
          }, {
              key: "onConnectTimeout",
              value: function() {
                  this.connectedTs > 0 || (this._reportStat(1),
                  this.connectTotalTs += l.default.now() - this.connectTs,
                  r.default.warn("VideoLoader.onConnectTimeout connectTotalTs=" + this.connectTotalTs + "/" + this.ConnectTotalTime + " " + this.getLoaderInfo()),
                  this.connectTotalTs < this.ConnectTotalTime ? this.reconnect() : this.p2pPlayer.turnToFlv(p.default.turnToFlvReason.FULL_CONNECT_TIMEOUT),
                  this.p2pPlayer.loaderErrorTimes++)
              }
          }, {
              key: "onFirstDataTimeout",
              value: function() {
                  if (!(this.sliceTs > 0)) {
                      var e = l.default.now();
                      r.default.warn("VideoLoader.onFirstDataTimeout", e - this.connectedTs),
                      this.p2pPlayer.isEverSuccessPlayed && this.flowRetryTimes++ < this.FlowRetryTimes ? this.reconnect() : this.p2pPlayer.turnToFlv(p.default.turnToFlvReason.FULL_NO_DATA),
                      this.p2pPlayer.loaderErrorTimes++
                  }
              }
          }, {
              key: "onRenderTimeout",
              value: function() {
                  this.sliceTs > 0 && this.p2pPlayer.onRenderTimeout()
              }
          }, {
              key: "_reportStat",
              value: function(e) {
                  var t = this.p2pPlayer.G;
                  this.tsdbUtil.sendMetrics([{
                      sMetricName: v.default.METRIC.SDK_P2P_TCP,
                      vDimension: {
                          success: this.type,
                          ip: t.wanIp
                      },
                      vField: {
                          state: e
                      }
                  }]),
                  this.stat.addComp(y.default.P2P_TCP_TYPE.name, y.default.K + this.type, 1),
                  this.stat.addComp(y.default.P2P_TCP_STATE.name, y.default.K + e, 1)
              }
          }, {
              key: "_reportNoSlice",
              value: function(e) {
                  if (0 !== this.sliceStamp && e - this.sliceStamp > 2500 && this.url) {
                      var t = this.p2pPlayer.G;
                      this.tsdbUtil.sendMetrics([{
                          sMetricName: v.default.METRIC.WEB_P2P_TCP_NO_SLICE,
                          vDimension: {
                              success: this.type,
                              ip: t.wanIp
                          }
                      }, this.stat.createAct(y.default.ACT.TCP_NO_SLICE, {
                          value: [this.type],
                          str: [t.wanIp]
                      })]),
                      this.sliceStamp = 0
                  }
              }
          }, {
              key: "_reportNoHeader",
              value: function() {
                  this.url && this.reportUrl !== this.url && (this.reportUrl = this.url)
              }
          }, {
              key: "_reportTcp",
              value: function() {
                  var e = this.p2pPlayer.G
                    , t = l.default.now() - this.tcpStamp;
                  this.tcpStamp > 0 && t > 1e3 && this.url && t < 1e4 && this.tsdbUtil.sendMetrics([{
                      sMetricName: v.default.METRIC.WEB_P2P_TCP_OPEN_TIME,
                      vField: {
                          value: t
                      },
                      vDimension: {
                          success: this.type,
                          ip: e.wanIp
                      }
                  }, this.stat.createAct(y.default.ACT.TCP_OPEN_TIME, {
                      value: [this.type, t],
                      str: [e.wanIp]
                  })]),
                  this.tcpStamp = 0
              }
          }, {
              key: "onData",
              value: function(e) {
                  this.p2pPlayer.G.globalSpeedCalc.addCur(e.byteLength);
                  var t = l.default.now();
                  if (this.sliceTs = t,
                  this.sliceStamp = t,
                  0 === this.firstPkgTs) {
                      this.firstPkgTs = t;
                      var i = this.firstPkgTs - this.connectedTs
                        , s = o.default.formatByteSize(e.byteLength);
                      r.default.log("VideoLoader.onData " + this.getLoaderInfo() + " firstPkgTs=" + i + " size=" + s),
                      u.default.remove(this.onFirstDataTimeout, this),
                      u.default.once(this.onRenderTimeout, this, this.RenderTimeout),
                      this.connectTotalTs = 0,
                      this.flowRetryTimes = 0
                  }
                  this.link instanceof h.default ? this.sliceHandler.onProto(new Uint8Array(e)) : this.sliceHandler.onData(e)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  this.started && (this._reportNoSlice(e),
                  this.sliceTs > 0 && e - this.sliceTs >= this.NoDataTimeout && this.getProxy("noDataTime=" + (e - this.sliceTs)))
              }
          }, {
              key: "getProxy",
              value: function(e) {
                  r.default.log("VideoLoader.getProxy " + e + " " + this.getLoaderInfo()),
                  this._reportNoHeader(),
                  this.reset(),
                  this.p2pPlayer.loaderErrorTimes++,
                  this.p2pPlayer.onRestart(p.default.restartReason.CONNECT)
              }
          }, {
              key: "connected",
              get: function() {
                  return this.link && this.link.connected
              }
          }, {
              key: "speed",
              get: function() {
                  var e = this.link.speed;
                  return e == o.default.UintMax && (e = 0),
                  e
              }
          }]),
          e
      }();
      P.TYPE_FULL = 1,
      P.TYPE_SUB = 2,
      P.TYPE_RANGE = 3,
      P.TYPE_PATCH = 4,
      t.default = P
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.size = 0,
              this.head = null,
              this.freeChainSize = 0,
              this.freeChain = null,
              this.travelNode = null
          }
          return (0,
          n.default)(e, [{
              key: "resetTravel",
              value: function() {
                  this.travelNode = this.head
              }
          }, {
              key: "travel",
              value: function() {
                  if (null === this.travelNode && (this.travelNode = this.head,
                  null === this.travelNode))
                      return null;
                  var e = this.travelNode.data;
                  return this.travelNode = this.travelNode.next,
                  this.travelNode === this.head || null === this.travelNode ? null : e
              }
          }, {
              key: "reset",
              value: function() {
                  this.resetTravel();
                  var e = null
                    , t = null;
                  for (e = this.head; null != e; )
                      t = e,
                      e = e.next,
                      t.data = null,
                      t.prev = null,
                      t.next = null,
                      e === this.head && (e = null);
                  for (this.head = null,
                  e = this.freeChain; null != e; )
                      t = e,
                      e = e.next,
                      t.data = null,
                      t.prev = null,
                      t.next = null;
                  this.freeChain = null,
                  this.size = 0,
                  this.freeChainSize = 0
              }
          }, {
              key: "put",
              value: function(e) {
                  var t = this.getFree(e);
                  if (this.size++,
                  null === this.head)
                      t.prev = t,
                      t.next = t,
                      this.head = t;
                  else if (t.data.key < this.head.data.key)
                      t.prev = this.head.prev,
                      t.next = this.head,
                      t.prev.next = t,
                      t.next.prev = t,
                      this.head = t;
                  else {
                      for (var i = this.head.prev; t.data.key < i.data.key; )
                          i = i.prev;
                      if (t.data.key === i.data.key)
                          return this.size--,
                          this.putFree(t),
                          !1;
                      t.prev = i,
                      t.next = i.next,
                      t.prev.next = t,
                      t.next.prev = t
                  }
                  return !0
              }
          }, {
              key: "put2",
              value: function(e) {
                  var t = this.getFree(e);
                  if (this.size++,
                  null === this.head)
                      t.prev = t,
                      t.next = t,
                      this.head = t;
                  else if (t.data.key < this.head.data.key)
                      t.prev = this.head.prev,
                      t.next = this.head,
                      t.prev.next = t,
                      t.next.prev = t,
                      this.head = t;
                  else {
                      for (var i = this.head; t.data.key > i.data.key && (i = i.next) !== this.head; )
                          ;
                      if (t.data.key === i.data.key)
                          return this.size--,
                          this.putFree(t),
                          !1;
                      t.prev = i.prev,
                      t.next = i,
                      i.prev.next = t,
                      i.prev = t
                  }
                  return !0
              }
          }, {
              key: "get",
              value: function() {
                  if (null === this.head)
                      return null;
                  var e = this.head
                    , t = e.data;
                  return this.size--,
                  0 === this.size ? this.head = null : (e.prev.next = e.next,
                  e.next.prev = e.prev,
                  this.head = this.head.next),
                  this.putFree(e),
                  t
              }
          }, {
              key: "peek",
              value: function() {
                  return null === this.head ? null : this.head.data
              }
          }, {
              key: "peekLast",
              value: function() {
                  return null === this.head ? null : this.head.prev.data
              }
          }, {
              key: "getOrNewNode",
              value: function(e) {
                  var t = null;
                  if (null === this.head)
                      this.size++,
                      (t = this.getFree(null)).prev = t,
                      t.next = t,
                      this.head = t;
                  else if (e < this.head.data.key)
                      this.size++,
                      (t = this.getFree(null)).prev = this.head.prev,
                      t.next = this.head,
                      t.prev.next = t,
                      t.next.prev = t,
                      this.head = t;
                  else {
                      for (var i = this.head.prev; e < i.data.key; )
                          i = i.prev;
                      i.data.key === e ? t = i : (this.size++,
                      (t = this.getFree(null)).prev = i,
                      t.next = i.next,
                      t.prev.next = t,
                      t.next.prev = t)
                  }
                  return t
              }
          }, {
              key: "putFree",
              value: function(e) {
                  e.data = null,
                  e.next = this.freeChain,
                  e.prev = null,
                  this.freeChain = e,
                  this.freeChainSize++
              }
          }, {
              key: "getFree",
              value: function(e) {
                  if (null === this.freeChain)
                      return new o(e);
                  var t = this.freeChain;
                  return t.data = e,
                  this.freeChain = t.next,
                  this.freeChainSize--,
                  t
              }
          }, {
              key: "getLast",
              value: function() {
                  if (null == this.head)
                      return null;
                  var e = this.head.prev
                    , t = e.data;
                  return this.size--,
                  0 === this.size ? this.head = null : (e.prev.next = e.next,
                  e.next.prev = e.prev),
                  this.putFree(e),
                  t
              }
          }]),
          e
      }()
        , o = function e(t) {
          (0,
          a.default)(this, e),
          this.next = null,
          this.prev = null,
          this.data = t
      };
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(40))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(41))
        , u = s(i(42))
        , l = s(i(8))
        , d = s(i(10))
        , h = s(i(26))
        , f = s(i(33))
        , c = s(i(39))
        , p = s(i(4))
        , v = s(i(6))
        , y = new (function(e) {
          function t() {
              (0,
              n.default)(this, t);
              var e = (0,
              o.default)(this, (t.__proto__ || (0,
              a.default)(t)).call(this));
              return e.libName = "p2plib.js",
              e.loaded = !1,
              e.p2pLib = null,
              e.ON_LOAD = "on_load",
              e
          }
          return (0,
          u.default)(t, e),
          (0,
          r.default)(t, [{
              key: "isSupport",
              value: function() {
                  return window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection || window.PeerConnection || window.webkitPeerConnection || window.mozPeerConnection
              }
          }, {
              key: "loadLib",
              value: function(e) {
                  this.loaded ? this.trigger(this.ON_LOAD) : l.default.loadLib(e, this.libName, this.onLoaded.bind(this))
              }
          }, {
              key: "onLoaded",
              value: function() {
                  this.loaded = !0,
                  this.p2pLib = new P2PLib({
                      userInfo: h.default,
                      roomInfo: null,
                      config: f.default,
                      TafLink: c.default,
                      Timer: d.default,
                      TimeUtil: v.default,
                      logger: p.default
                  }),
                  this.trigger(this.ON_LOAD)
              }
          }, {
              key: "playStream",
              value: function(e) {
                  return this.p2pLib.playStream(e)
              }
          }, {
              key: "removeStream",
              value: function(e) {
                  e && this.p2pLib.removeStream(e)
              }
          }, {
              key: "clearPunch",
              value: function() {
                  this.p2pLib && this.p2pLib.clearPunch()
              }
          }, {
              key: "clearVideo",
              value: function() {
                  this.p2pLib && this.p2pLib.clearVideo()
              }
          }]),
          t
      }(s(i(207)).default));
      t.default = y
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.listeners = {}
          }
          return (0,
          n.default)(e, [{
              key: "clear",
              value: function() {
                  this.listeners = {}
              }
          }, {
              key: "has",
              value: function(e, t, i) {
                  var s = this.listeners[e];
                  if (!s)
                      return !1;
                  for (var a = 0, n = s.length; a < n; a++) {
                      var r = s[a];
                      if (r.callback == t && r.thisObj == i)
                          return !0
                  }
                  return !1
              }
          }, {
              key: "on",
              value: function(e, t, i, s) {
                  if (!this.has(e, t, i)) {
                      var a = this.listeners[e] || [];
                      a.push({
                          priority: s || 0,
                          callback: t,
                          thisObj: i,
                          bindCallback: i ? t.bind(i) : t
                      }),
                      a.sort(function(e, t) {
                          return t.priority - e.priority
                      }),
                      this.listeners[e] = a
                  }
              }
          }, {
              key: "off",
              value: function(e, t, i) {
                  var s = this.listeners[e];
                  if (s)
                      for (var a = s.length - 1; a >= 0; a--) {
                          var n = s[a];
                          if (n.callback == t && n.thisObj == i)
                              return void s.splice(a, 1)
                      }
              }
          }, {
              key: "trigger",
              value: function(e, t) {
                  var i = this.listeners[e];
                  i && i.forEach(function(e) {
                      (0,
                      e.bindCallback)(t)
                  })
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e)
          }
          return (0,
          n.default)(e, [{
              key: "onNoVideo",
              value: function() {}
          }, {
              key: "onRestart",
              value: function(e) {}
          }, {
              key: "turnToFlv",
              value: function(e) {}
          }, {
              key: "onGetToken",
              value: function(e) {}
          }, {
              key: "autoReport",
              value: function() {}
          }, {
              key: "getBufferLen",
              value: function() {
                  return 0
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          KEEP: 0,
          DIF_STREAM: 1,
          P2P_TO_FLV: 2,
          FLV_TO_P2P: 3,
          SIGNAL: 4
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              t && t.xhrSetup && (this.xhrSetup = t.xhrSetup)
          }
          return (0,
          n.default)(e, [{
              key: "destroy",
              value: function() {
                  this.abort(),
                  this.loader = null
              }
          }, {
              key: "abort",
              value: function() {
                  this.loader && (this.stats.aborted = !0,
                  this.loader.abort()),
                  this.timeoutHandle && window.clearTimeout(this.timeoutHandle)
              }
          }, {
              key: "load",
              value: function(e, t, i, s, a, n, r, o) {
                  var u = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null;
                  this.url = e,
                  this.responseType = t,
                  this.onSuccess = i,
                  this.onError = s,
                  this.onTimeout = a,
                  this.onProgress = u,
                  this.stats = {
                      trequest: performance.now(),
                      retry: 0
                  },
                  this.timeout = n,
                  this.maxRetry = r,
                  this.retryDelay = o,
                  this.timeoutHandle = window.setTimeout(this.loadtimeout.bind(this), n),
                  this.loadInternal()
              }
          }, {
              key: "loadInternal",
              value: function() {
                  var e = this.loader = new XMLHttpRequest;
                  e.onload = this.loadsuccess.bind(this),
                  e.onerror = this.loaderror.bind(this),
                  e.onprogress = this.loadprogress.bind(this),
                  e.onloadend = this.loadend.bind(this),
                  e.responseType = this.responseType,
                  e.open("GET", this.url, !0),
                  null != this.fromByte && null != this.toByte && e.setRequestHeader("Range", "bytes=" + this.fromByte + "-" + this.toByte),
                  this.stats.tstart = null,
                  this.stats.loaded = 0,
                  this.xhrSetup && this.xhrSetup(e),
                  this.stats.tstart = performance.now(),
                  e.send()
              }
          }, {
              key: "loadsuccess",
              value: function(e) {
                  window.clearTimeout(this.timeoutHandle),
                  this.stats.tload = performance.now(),
                  e.requestURL = this.url,
                  this.onSuccess(e, this.stats)
              }
          }, {
              key: "loaderror",
              value: function(e) {
                  404 !== e.currentTarget.status && 0 !== e.currentTarget.status ? this.stats.retry < this.maxRetry ? (r.default.warn("XhrLoader.loaderror url=" + this.url + " retryDelay=" + this.retryDelay),
                  this.destroy(),
                  window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                  this.retryDelay = Math.min(2 * this.retryDelay, 64e3),
                  this.stats.retry++) : (window.clearTimeout(this.timeoutHandle),
                  r.default.warn("XhrLoader.loaderror reach max retry url=" + this.url),
                  this.onError(e)) : this.onError(e)
              }
          }, {
              key: "loadtimeout",
              value: function() {
                  this.stats.retry < this.maxRetry ? (r.default.warn("XhrLoader.loadtimeout url=" + this.url + " retryDelay=" + this.retryDelay),
                  this.destroy(),
                  window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                  this.retryDelay = Math.min(2 * this.retryDelay, 64e3),
                  this.stats.retry++) : (window.clearTimeout(this.timeoutHandle),
                  r.default.warn("XhrLoader.loadtimeout max retry url=" + this.url),
                  this.onTimeout())
              }
          }, {
              key: "loadprogress",
              value: function(e) {
                  var t = this.stats;
                  null === t.tfirst && (t.tfirst = performance.now()),
                  t.loaded = e.loaded,
                  this.onProgress && this.onProgress(e, t)
              }
          }, {
              key: "loadend",
              value: function(e) {
                  404 === e.currentTarget.status && this.loaderror(e)
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(20))
        , n = s(i(16))
        , r = s(i(46))
        , o = s(i(7))
        , u = s(i(0))
        , l = s(i(1))
        , d = s(i(8))
        , h = s(i(4))
        , f = s(i(12))
        , c = s(i(26))
        , p = s(i(309))
        , v = s(i(10))
        , y = new (function() {
          function e() {
              (0,
              u.default)(this, e),
              this.streamPlayer = null,
              this.streamMap = new o.default
          }
          return (0,
          l.default)(e, [{
              key: "onTurnBack",
              value: function(e) {
                  this.streamMap.has(e.info.sStreamName) && (this.streamPlayer.hyPlayer.trigger(f.default.SIGNAL_ERROR, e.info.oStreamName),
                  this.stopStream(e.info.sStreamName))
              }
          }, {
              key: "start",
              value: function(e) {
                  var t = (0,
                  r.default)(e).replace(/\,/g, "\n").replace(/[\"\{\}]/g, "");
                  if (!e.groupId)
                      return console.error("StreamMod.start 参数不完整！\n" + t),
                      this.streamPlayer.trigger(f.default.SIGNAL_ERROR),
                      !1;
                  h.default.log("StreamMod.start \n" + t),
                  c.default.convertUid = d.default.rotUid(c.default.uuid, e.presenterUid);
                  var i = !0
                    , s = !1
                    , o = void 0;
                  try {
                      for (var u, l = (0,
                      n.default)(e.groupId); !(i = (u = l.next()).done); i = !0) {
                          var y = u.value
                            , m = y.replace(":", "-");
                          if (!this.streamMap.has(m)) {
                              var _ = (0,
                              a.default)({}, e);
                              _.sStreamName = m,
                              _.oStreamName = y;
                              var P = new p.default(_);
                              P.onTurnBack = this.onTurnBack.bind(this),
                              this.streamMap.set(_.sStreamName, P)
                          }
                      }
                  } catch (e) {
                      s = !0,
                      o = e
                  } finally {
                      try {
                          !i && l.return && l.return()
                      } finally {
                          if (s)
                              throw o
                      }
                  }
                  v.default.add(this.onCheckTimer, this, 1e3)
              }
          }, {
              key: "stop",
              value: function() {
                  this.sendMetric(!0);
                  var e = !0
                    , t = !1
                    , i = void 0;
                  try {
                      for (var s, a = (0,
                      n.default)(this.streamMap.values()); !(e = (s = a.next()).done); e = !0)
                          s.value.stop()
                  } catch (e) {
                      t = !0,
                      i = e
                  } finally {
                      try {
                          !e && a.return && a.return()
                      } finally {
                          if (t)
                              throw i
                      }
                  }
                  this.streamMap.clear(),
                  v.default.remove(this.onCheckTimer, this)
              }
          }, {
              key: "stopStream",
              value: function(e) {
                  e = e.replace(":", "-"),
                  this.streamMap.has(e) && (this.streamMap.get(e).stop(),
                  this.streamMap.delete(e))
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  if (t % 20 == 0) {
                      var i = !0
                        , s = !1
                        , a = void 0;
                      try {
                          for (var r, o = (0,
                          n.default)(this.streamMap.values()); !(i = (r = o.next()).done); i = !0)
                              r.value.printInfo()
                      } catch (e) {
                          s = !0,
                          a = e
                      } finally {
                          try {
                              !i && o.return && o.return()
                          } finally {
                              if (s)
                                  throw a
                          }
                      }
                      this.sendMetric(!1)
                  }
              }
          }, {
              key: "sendMetric",
              value: function(e) {
                  if (this.streamMap.size > 0) {
                      var t = []
                        , i = !0
                        , s = !1
                        , a = void 0;
                      try {
                          for (var r, o = (0,
                          n.default)(this.streamMap.values()); !(i = (r = o.next()).done); i = !0) {
                              var u = r.value.getMetric(e);
                              u && t.push(u)
                          }
                      } catch (e) {
                          s = !0,
                          a = e
                      } finally {
                          try {
                              !i && o.return && o.return()
                          } finally {
                              if (s)
                                  throw a
                          }
                      }
                      t.length > 0 && this.streamPlayer.hyPlayer.sendMetrics(t)
                  }
              }
          }]),
          e
      }());
      t.default = y
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      t.__esModule = !0;
      var a = s(i(315))
        , n = s(i(16));
      t.default = function(e, t) {
          if (Array.isArray(e))
              return e;
          if ((0,
          a.default)(Object(e)))
              return function(e, t) {
                  var i = []
                    , s = !0
                    , a = !1
                    , r = void 0;
                  try {
                      for (var o, u = (0,
                      n.default)(e); !(s = (o = u.next()).done) && (i.push(o.value),
                      !t || i.length !== t); s = !0)
                          ;
                  } catch (e) {
                      a = !0,
                      r = e
                  } finally {
                      try {
                          !s && u.return && u.return()
                      } finally {
                          if (a)
                              throw r
                      }
                  }
                  return i
              }(e, t);
          throw new TypeError("Invalid attempt to destructure non-iterable instance")
      }
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          FRAMETYPE_VIDEO_I: 0,
          FRAMETYPE_VIDEO_P: 1,
          FRAMETYPE_VIDEO_B: 2,
          FRAMETYPE_VIDEO_SP: 3
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(20))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(12))
        , u = s(i(33))
        , l = s(i(39))
        , d = s(i(4))
        , h = s(i(6))
        , f = s(i(22))
        , c = s(i(24))
        , p = s(i(265))
        , v = s(i(121))
        , y = s(i(266))
        , m = s(i(277))
        , _ = s(i(302))
        , P = s(i(308))
        , T = s(i(313))
        , S = s(i(314))
        , g = s(i(338))
        , I = s(i(339))
        , E = s(i(340))
        , k = s(i(13))
        , C = s(i(26))
        , R = s(i(10))
        , A = function() {
          function e(t) {
              (0,
              n.default)(this, e),
              h.default.now();
              var i = Number(localStorage.sdkLogLevel);
              isNaN(i) || this.setLogLevel(i),
              C.default.initUUId(),
              this.uuid = C.default.uuid;
              var s = c.default.platform + " " + c.default.name + " " + c.default.version.string;
              d.default.warn("SDK 1909271530 | 2019-09-27 15:30:49 | RELEASE | " + s + " | " + this.uuid),
              this.config = u.default,
              this.config.init(t);
              var a = new v.default;
              a.trigger = function(e) {
                  for (var t = arguments.length, i = Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++)
                      i[s - 1] = arguments[s];
                  setTimeout(function() {
                      var t = i;
                      "Array" == i.constructor.name && (t = i[0]),
                      e == o.default.PLAY_STATUS ? d.default.log("%c" + e + " %c" + t.status, "color:#F9F900;background:gray", "color:#53FF53;background:gray") : e != o.default.H264_SEI_PLAY && e != o.default.AUDIO_SOUND && e != o.default.SIGNAL_DATA && e != o.default.UPDATE_INTERSITY && d.default.log("%c" + e, "color:#F9F900;background:gray", t),
                      a.emit.apply(a, [e, e].concat(i))
                  }, 0)
              }
              ,
              a.off = function(e) {
                  for (var t = arguments.length, i = Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++)
                      i[s - 1] = arguments[s];
                  a.removeListener.apply(a, [e].concat(i))
              }
              ,
              this.on = a.on.bind(a),
              this.off = a.off.bind(a),
              this.trigger = a.trigger.bind(a),
              this.volume = 1,
              this._type = 0,
              this.player = null,
              this.lastFlvInfo = null,
              this.lastP2PInfo = null,
              this.p2pCooling = !1,
              this.noPictureSended = !1,
              this.playingMgr = null,
              this.flacMgr = null,
              this.flacLibURL = "flaclib.js",
              this.videoPlaybackrateAccess = !c.default.firefox,
              this.huyaMgr = new S.default(this),
              this.voiceStreamMgr = new g.default(this,this.huyaMgr),
              this.liveMeetingMgr = new I.default(this,this.huyaMgr),
              this.stat = new E.default,
              this.metrics = new p.default,
              this.tsdbUtil = new f.default(this),
              this.enableLowLatency = !1,
              window.HYApplication && (window.HYApplication.tafHandler && l.default.setTafHandler(window.HYApplication.tafHandler),
              window.HYApplication.config && this.config.init(window.HYApplication.config)),
              this.stat.setComDim(k.default.DIM_COM.BROWSER_NAME, c.default.name),
              this.stat.setComDim(k.default.DIM_COM.BROWSER_VERSION, c.default.version.major)
          }
          return (0,
          r.default)(e, null, [{
              key: "isSupported",
              value: function() {
                  return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"')
              }
          }, {
              key: "Events",
              get: function() {
                  return o.default
              }
          }]),
          (0,
          r.default)(e, [{
              key: "isBrowserSupport",
              value: function() {
                  return c.default.firefox || c.default.opera || c.default.chrome && 53 != c.default.version.major
              }
          }, {
              key: "isNeedAud",
              value: function() {
                  return c.default.chrome && c.default.version.major >= 73
              }
          }, {
              key: "isP2PCooling",
              value: function() {
                  return 1 === Number(this.config.needCooling) && 1 == localStorage.getItem("__p2p_cooling_play")
              }
          }, {
              key: "checkCooling",
              value: function() {
                  if (this.p2pCooling = !1,
                  this.stat.delDim(k.default.DIM_COM.P2P_COOL_FLAG),
                  localStorage.hasOwnProperty("p2p_cooling_time")) {
                      var e = new Date
                        , t = new Date(Number(localStorage.getItem("p2p_cooling_time")));
                      this.p2pCooling = !(e.getFullYear() != t.getFullYear() || e.getMonth() != t.getMonth() || e.getDate() != t.getDate()),
                      this.p2pCooling && this.stat.setComDim(k.default.DIM_COM.P2P_COOL_FLAG, 1)
                  }
              }
          }, {
              key: "setIDs",
              value: function() {}
          }, {
              key: "setExtendConfig",
              value: function(e) {
                  var t = {};
                  e.p2pConfig && ((0,
                  a.default)(t, e.p2pConfig),
                  delete e.p2pConfig),
                  e.sdk && (e.sdk.p2pConfig && ((0,
                  a.default)(t, e.sdk.p2pConfig),
                  delete e.sdk.p2pConfig),
                  (0,
                  a.default)(t, e.sdk),
                  delete e.sdk),
                  (0,
                  a.default)(t, e),
                  this.config.init(t)
              }
          }, {
              key: "setConfig",
              value: function(e, t) {
                  this.config[e] != t && (this.config[e] = t,
                  d.default.log("HYPlayer.setConfig " + e + "=" + t))
              }
          }, {
              key: "getConfig",
              value: function(e) {
                  return this.config[e]
              }
          }, {
              key: "getVolume",
              value: function() {
                  return this.volume
              }
          }, {
              key: "setVolume",
              value: function(e) {
                  var t = Math.max(0, Number(e));
                  t = Math.min(1, t),
                  this.volume = t,
                  this.flacMgr && this.flacMgr.isPlaying() ? (t = 0,
                  this.flacMgr.setVolume(this.volume),
                  this.setVideoPlaybackrateAccess(!1)) : this.setVideoPlaybackrateAccess(!0),
                  this.player && this.player.setVolume(t),
                  this.huyaMgr.setVolume(t)
              }
          }, {
              key: "setLogLevel",
              value: function(e) {
                  d.default.setLevel(e)
              }
          }, {
              key: "getLog",
              value: function() {
                  return d.default.getLog()
              }
          }, {
              key: "getMetrics",
              value: function() {
                  return this.metrics.getResult()
              }
          }, {
              key: "getCurrentTime",
              value: function() {
                  return this.player ? this.player.getCurrentTime() : 0
              }
          }, {
              key: "sendMetrics",
              value: function(e) {
                  this.trigger(o.default.DATA_METRIC2, e)
              }
          }, {
              key: "start",
              value: function(t) {
                  switch (t = (0,
                  a.default)({
                      uuid: this.uuid,
                      type: 0,
                      lineType: -1,
                      curBitrate: 0,
                      originalBitrate: 0
                  }, t),
                  this.stop(),
                  d.default.log("HYPlayer.start type=" + t.type, t),
                  this._type = t.type,
                  t.uid && (C.default.uid = t.uid),
                  this.noPictureSended || t.type !== e.FLV && t.type !== e.P2P || R.default.once(this.onNoPictureFlv, this, 1e4),
                  t.type) {
                  case e.FLV:
                      this.player = new y.default(this,t),
                      this.lastFlvInfo = t;
                      break;
                  case e.P2P:
                      if (!this.isSupportP2P)
                          throw new Error("xxxxxxx " + c.default.name + " " + c.default.version.major + " unsupport p2p !");
                      this.player = new m.default(this),
                      this.lastP2PInfo = t,
                      R.default.once(this.onNoPictureP2P, this, 5e3);
                      break;
                  case e.HLS:
                      this.player = new _.default(this);
                      break;
                  case e.HUYA:
                      this.player = this.huyaMgr;
                      break;
                  case e.STREAM:
                      this.player = new P.default(this),
                      this.lastP2PInfo = t;
                      break;
                  default:
                      return void d.default.error("HYPlayer.start Unknown type[" + t.type + "]")
                  }
                  this.checkCooling(),
                  t.type == e.P2P && t.p2purl ? this.player.startP2PUrl(t.p2purl) : t.type == e.HUYA ? (this.player.init(t),
                  this.player.start(t.curBitrate)) : this.player.start(t),
                  this.enableLowLatency && this.player && this.player.setEnableLowLatency && this.player.setEnableLowLatency(!0),
                  this.voiceStreamMgr.getLivingStreamInfo(t),
                  this.player.setPlaybackrateAccess && this.player.setPlaybackrateAccess(this.videoPlaybackrateAccess),
                  this.playingMgr = this.player
              }
          }, {
              key: "onNoPictureP2P",
              value: function() {
                  this.player && this.onNoPicture()
              }
          }, {
              key: "onNoPictureFlv",
              value: function() {
                  this.player && this.isFlv && this.onNoPicture()
              }
          }, {
              key: "onNoPicture",
              value: function() {
                  var e = [this.stat.createAct(k.default.ACT.NO_PICTURE, {
                      value: [this.player.isPlaying ? 0 : 100]
                  })];
                  this.trigger(o.default.DATA_METRIC2, e)
              }
          }, {
              key: "stop",
              value: function() {
                  d.default.group("HYPlayer.stop"),
                  R.default.remove(this.onNoPictureFlv, this),
                  R.default.remove(this.onNoPictureP2P, this),
                  this.player && (this.player.stop(),
                  this.player.destroy && this.player.destroy(),
                  this.player = null),
                  this.stopFlac(),
                  this.huyaMgr.stop(),
                  this.stopLiveMeeting(),
                  d.default.groupEnd()
              }
          }, {
              key: "stopStream",
              value: function(e) {
                  d.default.log("HYPlayer.stopStream", e),
                  this.player && this.player.stopStream && this.player.stopStream(e)
              }
          }, {
              key: "setTafHandler",
              value: function(e) {
                  l.default.setTafHandler(e)
              }
          }, {
              key: "flvBackToP2P",
              value: function() {
                  if (this.lastP2PInfo) {
                      this.trigger(o.default.FLV_TO_P2P);
                      var e = this
                        , t = new HUYA.GetCdnTokenExReq;
                      t.sFlvUrl = this.lastP2PInfo.sFlvUrl,
                      t.sStreamName = this.lastP2PInfo.sStreamName,
                      l.default.sendWup("liveui", "getCdnTokenInfoEx", t, function(t) {
                          d.default.log("flvBackToP2P.getCdnTokenInfoEx", e.lastP2PInfo.sStreamName, t.sFlvToken),
                          e.lastP2PInfo.sFlvAntiCode = t.sFlvToken,
                          e.start(e.lastP2PInfo)
                      }, !0, l.default.getRequestId())
                  }
                  this.flacMgr && this.player && (this.stopFlac(),
                  this.trigger(o.default.FLAC_AUDIO_NEED_RETRY))
              }
          }, {
              key: "startLiveMeeting",
              value: function(e, t, i) {
                  this.liveMeetingMgr.start(e, t, i),
                  this.enableLowLatency = !0,
                  this.player && this.player.setEnableLowLatency && this.player.setEnableLowLatency(!0)
              }
          }, {
              key: "stopLiveMeeting",
              value: function() {
                  this.liveMeetingMgr.stop()
              }
          }, {
              key: "startFlac",
              value: function(e, t) {
                  var i = t + this.flacLibURL;
                  this.flacMgr || (this.flacMgr = new T.default(this,i)),
                  this.flacMgr && this.flacMgr.play(e)
              }
          }, {
              key: "stopFlac",
              value: function() {
                  this.flacMgr && this.flacMgr.stop()
              }
          }, {
              key: "flacPlayStatusChange",
              value: function() {
                  this.setVolume(this.volume)
              }
          }, {
              key: "setVideoPlaybackrateAccess",
              value: function(e) {
                  this.player && this.player.setPlaybackrateAccess && this.player.setPlaybackrateAccess(!!this.videoPlaybackrateAccess && e)
              }
          }, {
              key: "isSupportP2P",
              get: function() {
                  return this.isBrowserSupport() && !this.isP2PCooling()
              }
          }, {
              key: "type",
              get: function() {
                  return this._type
              }
          }, {
              key: "isFlv",
              get: function() {
                  return this._type == e.FLV
              }
          }, {
              key: "isP2P",
              get: function() {
                  return this._type == e.P2P
              }
          }, {
              key: "isHls",
              get: function() {
                  return this._type == e.HLS
              }
          }, {
              key: "isHuya",
              get: function() {
                  return this._type == e.HUYA
              }
          }]),
          e
      }();
      A.FLV = 1,
      A.P2P = 2,
      A.HLS = 3,
      A.HUYA = 4,
      A.STREAM = 5,
      t.default = A,
      window.HYPlayer = A,
      window.H5Player = A
  }
  , function(e, t, i) {
      i(216),
      e.exports = i(11).Object.assign
  }
  , function(e, t, i) {
      var s = i(14);
      s(s.S + s.F, "Object", {
          assign: i(217)
      })
  }
  , function(e, t, i) {
      var s = i(19)
        , a = i(53)
        , n = i(76)
        , r = i(57)
        , o = i(36)
        , u = i(69)
        , l = Object.assign;
      e.exports = !l || i(31)(function() {
          var e = {}
            , t = {}
            , i = Symbol()
            , s = "abcdefghijklmnopqrst";
          return e[i] = 7,
          s.split("").forEach(function(e) {
              t[e] = e
          }),
          7 != l({}, e)[i] || Object.keys(l({}, t)).join("") != s
      }) ? function(e, t) {
          for (var i = o(e), l = arguments.length, d = 1, h = n.f, f = r.f; l > d; )
              for (var c, p = u(arguments[d++]), v = h ? a(p).concat(h(p)) : a(p), y = v.length, m = 0; y > m; )
                  c = v[m++],
                  s && !f.call(p, c) || (i[c] = p[c]);
          return i
      }
      : l
  }
  , function(e, t, i) {
      var s = i(35)
        , a = i(54)
        , n = i(219);
      e.exports = function(e) {
          return function(t, i, r) {
              var o, u = s(t), l = a(u.length), d = n(r, l);
              if (e && i != i) {
                  for (; l > d; )
                      if ((o = u[d++]) != o)
                          return !0
              } else
                  for (; l > d; d++)
                      if ((e || d in u) && u[d] === i)
                          return e || d || 0;
              return !e && -1
          }
      }
  }
  , function(e, t, i) {
      var s = i(72)
        , a = Math.max
        , n = Math.min;
      e.exports = function(e, t) {
          return (e = s(e)) < 0 ? a(e + t, 0) : n(e, t)
      }
  }
  , function(e, t, i) {
      e.exports = {
          default: i(221),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      i(222);
      var s = i(11).Object;
      e.exports = function(e, t, i) {
          return s.defineProperty(e, t, i)
      }
  }
  , function(e, t, i) {
      var s = i(14);
      s(s.S + s.F * !i(19), "Object", {
          defineProperty: i(18).f
      })
  }
  , function(e, t, i) {
      var s = i(11)
        , a = s.JSON || (s.JSON = {
          stringify: JSON.stringify
      });
      e.exports = function(e) {
          return a.stringify.apply(a, arguments)
      }
  }
  , function(e, t, i) {
      e.exports = {
          default: i(225),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      i(37),
      i(47),
      e.exports = i(78).f("iterator")
  }
  , function(e, t, i) {
      var s = i(72)
        , a = i(71);
      e.exports = function(e) {
          return function(t, i) {
              var n, r, o = String(a(t)), u = s(i), l = o.length;
              return u < 0 || u >= l ? e ? "" : void 0 : (n = o.charCodeAt(u)) < 55296 || n > 56319 || u + 1 === l || (r = o.charCodeAt(u + 1)) < 56320 || r > 57343 ? e ? o.charAt(u) : n : e ? o.slice(u, u + 2) : r - 56320 + (n - 55296 << 10) + 65536
          }
      }
  }
  , function(e, t, i) {
      var s = i(59)
        , a = i(45)
        , n = i(60)
        , r = {};
      i(27)(r, i(15)("iterator"), function() {
          return this
      }),
      e.exports = function(e, t, i) {
          e.prototype = s(r, {
              next: a(1, i)
          }),
          n(e, t + " Iterator")
      }
  }
  , function(e, t, i) {
      var s = i(18)
        , a = i(28)
        , n = i(53);
      e.exports = i(19) ? Object.defineProperties : function(e, t) {
          a(e);
          for (var i, r = n(t), o = r.length, u = 0; o > u; )
              s.f(e, i = r[u++], t[i]);
          return e
      }
  }
  , function(e, t, i) {
      var s = i(21).document;
      e.exports = s && s.documentElement
  }
  , function(e, t, i) {
      var s = i(231)
        , a = i(117)
        , n = i(38)
        , r = i(35);
      e.exports = i(77)(Array, "Array", function(e, t) {
          this._t = r(e),
          this._i = 0,
          this._k = t
      }, function() {
          var e = this._t
            , t = this._k
            , i = this._i++;
          return !e || i >= e.length ? (this._t = void 0,
          a(1)) : a(0, "keys" == t ? i : "values" == t ? e[i] : [i, e[i]])
      }, "values"),
      n.Arguments = n.Array,
      s("keys"),
      s("values"),
      s("entries")
  }
  , function(e, t) {
      e.exports = function() {}
  }
  , function(e, t, i) {
      e.exports = {
          default: i(233),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      i(234),
      i(81),
      i(237),
      i(238),
      e.exports = i(11).Symbol
  }
  , function(e, t, i) {
      var a = i(21)
        , n = i(32)
        , r = i(19)
        , o = i(14)
        , u = i(115)
        , l = i(79).KEY
        , d = i(31)
        , h = i(74)
        , f = i(60)
        , c = i(56)
        , p = i(15)
        , v = i(78)
        , y = i(80)
        , m = i(235)
        , _ = i(118)
        , P = i(28)
        , T = i(23)
        , S = i(36)
        , g = i(35)
        , I = i(68)
        , E = i(45)
        , k = i(59)
        , C = i(236)
        , R = i(120)
        , A = i(76)
        , U = i(18)
        , L = i(53)
        , M = R.f
        , b = U.f
        , w = C.f
        , D = a.Symbol
        , O = a.JSON
        , F = O && O.stringify
        , N = p("_hidden")
        , V = p("toPrimitive")
        , x = {}.propertyIsEnumerable
        , B = h("symbol-registry")
        , G = h("symbols")
        , H = h("op-symbols")
        , q = Object.prototype
        , j = "function" == typeof D && !!A.f
        , W = a.QObject
        , K = !W || !W.prototype || !W.prototype.findChild
        , Y = r && d(function() {
          return 7 != k(b({}, "a", {
              get: function() {
                  return b(this, "a", {
                      value: 7
                  }).a
              }
          })).a
      }) ? function(e, t, i) {
          var s = M(q, t);
          s && delete q[t],
          b(e, t, i),
          s && e !== q && b(q, t, s)
      }
      : b
        , z = function(e) {
          var t = G[e] = k(D.prototype);
          return t._k = e,
          t
      }
        , J = j && "symbol" == s(D.iterator) ? function(e) {
          return "symbol" == (void 0 === e ? "undefined" : s(e))
      }
      : function(e) {
          return e instanceof D
      }
        , X = function e(t, i, s) {
          return t === q && e(H, i, s),
          P(t),
          i = I(i, !0),
          P(s),
          n(G, i) ? (s.enumerable ? (n(t, N) && t[N][i] && (t[N][i] = !1),
          s = k(s, {
              enumerable: E(0, !1)
          })) : (n(t, N) || b(t, N, E(1, {})),
          t[N][i] = !0),
          Y(t, i, s)) : b(t, i, s)
      }
        , Q = function(e, t) {
          P(e);
          for (var i, s = m(t = g(t)), a = 0, n = s.length; n > a; )
              X(e, i = s[a++], t[i]);
          return e
      }
        , Z = function(e) {
          var t = x.call(this, e = I(e, !0));
          return !(this === q && n(G, e) && !n(H, e)) && (!(t || !n(this, e) || !n(G, e) || n(this, N) && this[N][e]) || t)
      }
        , $ = function(e, t) {
          if (e = g(e),
          t = I(t, !0),
          e !== q || !n(G, t) || n(H, t)) {
              var i = M(e, t);
              return !i || !n(G, t) || n(e, N) && e[N][t] || (i.enumerable = !0),
              i
          }
      }
        , ee = function(e) {
          for (var t, i = w(g(e)), s = [], a = 0; i.length > a; )
              n(G, t = i[a++]) || t == N || t == l || s.push(t);
          return s
      }
        , te = function(e) {
          for (var t, i = e === q, s = w(i ? H : g(e)), a = [], r = 0; s.length > r; )
              !n(G, t = s[r++]) || i && !n(q, t) || a.push(G[t]);
          return a
      };
      j || (u((D = function() {
          if (this instanceof D)
              throw TypeError("Symbol is not a constructor!");
          var e = c(arguments.length > 0 ? arguments[0] : void 0)
            , t = function t(i) {
              this === q && t.call(H, i),
              n(this, N) && n(this[N], e) && (this[N][e] = !1),
              Y(this, e, E(1, i))
          };
          return r && K && Y(q, e, {
              configurable: !0,
              set: t
          }),
          z(e)
      }
      ).prototype, "toString", function() {
          return this._k
      }),
      R.f = $,
      U.f = X,
      i(119).f = C.f = ee,
      i(57).f = Z,
      A.f = te,
      r && !i(55) && u(q, "propertyIsEnumerable", Z, !0),
      v.f = function(e) {
          return z(p(e))
      }
      ),
      o(o.G + o.W + o.F * !j, {
          Symbol: D
      });
      for (var ie = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), se = 0; ie.length > se; )
          p(ie[se++]);
      for (var ae = L(p.store), ne = 0; ae.length > ne; )
          y(ae[ne++]);
      o(o.S + o.F * !j, "Symbol", {
          for: function(e) {
              return n(B, e += "") ? B[e] : B[e] = D(e)
          },
          keyFor: function(e) {
              if (!J(e))
                  throw TypeError(e + " is not a symbol!");
              for (var t in B)
                  if (B[t] === e)
                      return t
          },
          useSetter: function() {
              K = !0
          },
          useSimple: function() {
              K = !1
          }
      }),
      o(o.S + o.F * !j, "Object", {
          create: function(e, t) {
              return void 0 === t ? k(e) : Q(k(e), t)
          },
          defineProperty: X,
          defineProperties: Q,
          getOwnPropertyDescriptor: $,
          getOwnPropertyNames: ee,
          getOwnPropertySymbols: te
      });
      var re = d(function() {
          A.f(1)
      });
      o(o.S + o.F * re, "Object", {
          getOwnPropertySymbols: function(e) {
              return A.f(S(e))
          }
      }),
      O && o(o.S + o.F * (!j || d(function() {
          var e = D();
          return "[null]" != F([e]) || "{}" != F({
              a: e
          }) || "{}" != F(Object(e))
      })), "JSON", {
          stringify: function(e) {
              for (var t, i, s = [e], a = 1; arguments.length > a; )
                  s.push(arguments[a++]);
              if (i = t = s[1],
              (T(t) || void 0 !== e) && !J(e))
                  return _(t) || (t = function(e, t) {
                      if ("function" == typeof i && (t = i.call(this, e, t)),
                      !J(t))
                          return t
                  }
                  ),
                  s[1] = t,
                  F.apply(O, s)
          }
      }),
      D.prototype[V] || i(27)(D.prototype, V, D.prototype.valueOf),
      f(D, "Symbol"),
      f(Math, "Math", !0),
      f(a.JSON, "JSON", !0)
  }
  , function(e, t, i) {
      var s = i(53)
        , a = i(76)
        , n = i(57);
      e.exports = function(e) {
          var t = s(e)
            , i = a.f;
          if (i)
              for (var r, o = i(e), u = n.f, l = 0; o.length > l; )
                  u.call(e, r = o[l++]) && t.push(r);
          return t
      }
  }
  , function(e, t, i) {
      var a = i(35)
        , n = i(119).f
        , r = {}.toString
        , o = "object" == ("undefined" == typeof window ? "undefined" : s(window)) && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      e.exports.f = function(e) {
          return o && "[object Window]" == r.call(e) ? function(e) {
              try {
                  return n(e)
              } catch (e) {
                  return o.slice()
              }
          }(e) : n(a(e))
      }
  }
  , function(e, t, i) {
      i(80)("asyncIterator")
  }
  , function(e, t, i) {
      i(80)("observable")
  }
  , function(e, t, i) {
      i(240),
      e.exports = i(11).Object.getPrototypeOf
  }
  , function(e, t, i) {
      var s = i(36)
        , a = i(116);
      i(241)("getPrototypeOf", function() {
          return function(e) {
              return a(s(e))
          }
      })
  }
  , function(e, t, i) {
      var s = i(14)
        , a = i(11)
        , n = i(31);
      e.exports = function(e, t) {
          var i = (a.Object || {})[e] || Object[e]
            , r = {};
          r[e] = t(i),
          s(s.S + s.F * n(function() {
              i(1)
          }), "Object", r)
      }
  }
  , function(e, t, i) {
      e.exports = {
          default: i(243),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      i(244),
      e.exports = i(11).Object.setPrototypeOf
  }
  , function(e, t, i) {
      var s = i(14);
      s(s.S, "Object", {
          setPrototypeOf: i(245).set
      })
  }
  , function(e, t, i) {
      var s = i(23)
        , a = i(28)
        , n = function(e, t) {
          if (a(e),
          !s(t) && null !== t)
              throw TypeError(t + ": can't set as prototype!")
      };
      e.exports = {
          set: Object.setPrototypeOf || ("__proto__"in {} ? function(e, t, s) {
              try {
                  (s = i(30)(Function.call, i(120).f(Object.prototype, "__proto__").set, 2))(e, []),
                  t = !(e instanceof Array)
              } catch (e) {
                  t = !0
              }
              return function(e, i) {
                  return n(e, i),
                  t ? e.__proto__ = i : s(e, i),
                  e
              }
          }({}, !1) : void 0),
          check: n
      }
  }
  , function(e, t, i) {
      e.exports = {
          default: i(247),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      i(248);
      var s = i(11).Object;
      e.exports = function(e, t) {
          return s.create(e, t)
      }
  }
  , function(e, t, i) {
      var s = i(14);
      s(s.S, "Object", {
          create: i(59)
      })
  }
  , function(e, t, i) {
      i(81),
      i(37),
      i(47),
      i(250),
      i(255),
      i(257),
      i(258),
      e.exports = i(11).Map
  }
  , function(e, t, i) {
      var s = i(122)
        , a = i(85);
      e.exports = i(127)("Map", function(e) {
          return function() {
              return e(this, arguments.length > 0 ? arguments[0] : void 0)
          }
      }, {
          get: function(e) {
              var t = s.getEntry(a(this, "Map"), e);
              return t && t.v
          },
          set: function(e, t) {
              return s.def(a(this, "Map"), 0 === e ? 0 : e, t)
          }
      }, s, !0)
  }
  , function(e, t, i) {
      var s = i(21)
        , a = i(11)
        , n = i(18)
        , r = i(19)
        , o = i(15)("species");
      e.exports = function(e) {
          var t = "function" == typeof a[e] ? a[e] : s[e];
          r && t && !t[o] && n.f(t, o, {
              configurable: !0,
              get: function() {
                  return this
              }
          })
      }
  }
  , function(e, t, i) {
      var s = i(30)
        , a = i(69)
        , n = i(36)
        , r = i(54)
        , o = i(253);
      e.exports = function(e, t) {
          var i = 1 == e
            , u = 2 == e
            , l = 3 == e
            , d = 4 == e
            , h = 6 == e
            , f = 5 == e || h
            , c = t || o;
          return function(t, o, p) {
              for (var v, y, m = n(t), _ = a(m), P = s(o, p, 3), T = r(_.length), S = 0, g = i ? c(t, T) : u ? c(t, 0) : void 0; T > S; S++)
                  if ((f || S in _) && (y = P(v = _[S], S, m),
                  e))
                      if (i)
                          g[S] = y;
                      else if (y)
                          switch (e) {
                          case 3:
                              return !0;
                          case 5:
                              return v;
                          case 6:
                              return S;
                          case 2:
                              g.push(v)
                          }
                      else if (d)
                          return !1;
              return h ? -1 : l || d ? d : g
          }
      }
  }
  , function(e, t, i) {
      var s = i(254);
      e.exports = function(e, t) {
          return new (s(e))(t)
      }
  }
  , function(e, t, i) {
      var s = i(23)
        , a = i(118)
        , n = i(15)("species");
      e.exports = function(e) {
          var t;
          return a(e) && ("function" != typeof (t = e.constructor) || t !== Array && !a(t.prototype) || (t = void 0),
          s(t) && null === (t = t[n]) && (t = void 0)),
          void 0 === t ? Array : t
      }
  }
  , function(e, t, i) {
      var s = i(14);
      s(s.P + s.R, "Map", {
          toJSON: i(128)("Map")
      })
  }
  , function(e, t, i) {
      var s = i(61);
      e.exports = function(e, t) {
          var i = [];
          return s(e, !1, i.push, i, t),
          i
      }
  }
  , function(e, t, i) {
      i(129)("Map")
  }
  , function(e, t, i) {
      i(130)("Map")
  }
  , function(e, t, i) {
      i(47),
      i(37),
      e.exports = i(260)
  }
  , function(e, t, i) {
      var s = i(28)
        , a = i(83);
      e.exports = i(11).getIterator = function(e) {
          var t = a(e);
          if ("function" != typeof t)
              throw TypeError(e + " is not iterable!");
          return s(t.call(e))
      }
  }
  , function(e, t, i) {
      i(37),
      i(262),
      e.exports = i(11).Array.from
  }
  , function(e, t, i) {
      var s = i(30)
        , a = i(14)
        , n = i(36)
        , r = i(125)
        , o = i(126)
        , u = i(54)
        , l = i(263)
        , d = i(83);
      a(a.S + a.F * !i(264)(function(e) {
          Array.from(e)
      }), "Array", {
          from: function(e) {
              var t, i, a, h, f = n(e), c = "function" == typeof this ? this : Array, p = arguments.length, v = p > 1 ? arguments[1] : void 0, y = void 0 !== v, m = 0, _ = d(f);
              if (y && (v = s(v, p > 2 ? arguments[2] : void 0, 2)),
              null == _ || c == Array && o(_))
                  for (i = new c(t = u(f.length)); t > m; m++)
                      l(i, m, y ? v(f[m], m) : f[m]);
              else
                  for (h = _.call(f),
                  i = new c; !(a = h.next()).done; m++)
                      l(i, m, y ? r(h, v, [a.value, m], !0) : a.value);
              return i.length = m,
              i
          }
      })
  }
  , function(e, t, i) {
      var s = i(18)
        , a = i(45);
      e.exports = function(e, t, i) {
          t in e ? s.f(e, t, a(0, i)) : e[t] = i
      }
  }
  , function(e, t, i) {
      var s = i(15)("iterator")
        , a = !1;
      try {
          var n = [7][s]();
          n.return = function() {
              a = !0
          }
          ,
          Array.from(n, function() {
              throw 2
          })
      } catch (e) {}
      e.exports = function(e, t) {
          if (!t && !a)
              return !1;
          var i = !1;
          try {
              var n = [7]
                , r = n[s]();
              r.next = function() {
                  return {
                      done: i = !0
                  }
              }
              ,
              n[s] = function() {
                  return r
              }
              ,
              e(n)
          } catch (e) {}
          return i
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(25))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.speed = new r.default(20),
              this.rtt = new r.default(20),
              this.p2p = 0
          }
          return (0,
          n.default)(e, [{
              key: "addSpeed",
              value: function(e) {
                  var t = parseInt(e.replace("KB", ""));
                  this.speed.add(t)
              }
          }, {
              key: "addRtt",
              value: function(e) {
                  this.rtt.add(e)
              }
          }, {
              key: "setP2p",
              value: function(e) {
                  this.p2p = e
              }
          }, {
              key: "getP2p",
              value: function() {
                  return this.p2p
              }
          }, {
              key: "getResult",
              value: function() {
                  return {
                      speed: this.speed.getSamples(),
                      rtt: this.rtt.getSamples(),
                      p2p: this.p2p
                  }
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(46))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(29))
        , u = s(i(4))
        , l = s(i(10))
        , d = (s(i(8)),
      s(i(6)))
        , h = s(i(66))
        , f = i(12)
        , c = s(i(199))
        , p = s(i(274))
        , v = s(i(22))
        , y = s(i(13))
        , m = s(i(275))
        , _ = s(i(276))
        , P = s(i(33))
        , T = s(i(109))
        , S = function() {
          function e(t, i) {
              var s = i.isPureAudio;
              (0,
              n.default)(this, e),
              this.hyPlayer = t,
              this.stat = t.stat,
              this.startTs = 0,
              this.started = !1,
              this.startTime = 0,
              this.info = null,
              this.url = null,
              this.lineType = 0,
              this.loader = new c.default(this),
              this.recvTime = 0,
              this.connectTime = 0,
              this.mse = new h.default(this,"flv",!0,s),
              this.pauseStartTs = 0,
              this.metadataTick = new T.default(t,this.mse),
              this.pauseCnt = 0,
              this.pauseTime = 0,
              this.pauseCnt5 = 0,
              this.pauseTime5 = 0,
              this.pauseReason = 0,
              this.pauseCheckLock = !1,
              this.loadTime = 0,
              this.connectTime = 0,
              this.cdnip = "",
              this.videoStatus = f.Status.VIDEO_STOP,
              void 0 !== m.default && (this.qaStat = new m.default(this)),
              this.playedStat = null,
              this.flowSize = 0,
              this.backToP2P = new p.default(this)
          }
          return (0,
          r.default)(e, [{
              key: "reset",
              value: function() {
                  this.started && (u.default.log("FlvPlayer.reset"),
                  l.default.remove(this.onCheckTimer, this),
                  l.default.remove(this.onCheckFastTimer, this),
                  this.loader.close(),
                  this.mse.destroy(),
                  this.mse = new h.default(this,"flv"),
                  this.mse.setPushGop(this.getConfig("pushGop")),
                  this.pauseStartTs = 0,
                  this.qaStat.isFirstReport = !0,
                  this.metadataTick.reset(),
                  this.metadataTick.mse = this.mse,
                  this.startTs = 0,
                  this.recvTime = 0,
                  this.startTime = 0,
                  this.pauseCnt = 0,
                  this.pauseTime = 0,
                  this.pauseCnt5 = 0,
                  this.pauseTime5 = 0,
                  this.pauseCheckLock = !1,
                  this.loadTime = 0,
                  this.connectTime = 0,
                  this.flowSize = 0,
                  this.cdnip = "",
                  this.backToP2P.reset(),
                  this.stat.reset(),
                  this.videoStatus = f.Status.VIDEO_STOP)
              }
          }, {
              key: "start",
              value: function(e) {
                  if (e && e.url) {
                      this.hyPlayer.playingMgr = this,
                      this.reset(),
                      this.initDomain(e),
                      this.info = e,
                      -1 !== e.url.indexOf("va.huya.com") && (e.url += "&https=1"),
                      this.url = e.url,
                      this.lineType = e.lineType;
                      var t = d.default.now();
                      this.startTs = t,
                      this.startTime = t,
                      this.started = !0,
                      this.backToP2P.initJumpTs(t),
                      this.mse.setPushGop(this.getConfig("pushGop")),
                      this.hyPlayer.isNeedAud() ? this.mse.setDeleteH264Aud(-1 === P.default.deleteH264Aud.indexOf(e.presenterUid) ? 0 : 1) : this.mse.setDeleteH264Aud(0),
                      this.mse.setJitter(this.getConfig("jitBufLen"), this.getConfig("jitMinBufLen"), this.getConfig("jitMaxBufLen")),
                      void 0 === _.default || this.playedStat || (this.playedStat = new _.default(this),
                      l.default.once(this.playedStat.send, this.playedStat, 1e4)),
                      this.stat.setComDim(y.default.DIM_COM.ORIGINAL_BITRATE, 0 === e.originalBitrate ? 1 : 0),
                      this.stat.setComDim(y.default.DIM_COM.P2P, y.default.LIVE_TYPE.FLV),
                      this.loader.connect(e.url),
                      l.default.add(this.onCheckTimer, this, 1e3),
                      l.default.add(this.onCheckFastTimer, this, 100)
                  } else
                      u.default.error("FlvPlayer.start invalid argument", (0,
                      a.default)(e))
              }
          }, {
              key: "stop",
              value: function() {
                  this._reportFlvFlow(),
                  this.started && (u.default.log("FlvPlayer.stopFlv"),
                  this.reset(),
                  this.started = !1)
              }
          }, {
              key: "initDomain",
              value: function(e) {
                  if (!e.inited) {
                      e.inited = !0;
                      var t = e.domainList;
                      if (t && t.length) {
                          var i = e.url.match(/\/\/(.+?)\//i);
                          e._domain = i ? i[1] : "",
                          u.default.log("FlvPlayer.initDomain:\n\t" + t.join("\n\t"));
                          var s = t.shift();
                          this.cdnip = s,
                          this.stat.setExtDim(y.default.DIM_EXT.CDN_IP, s),
                          e.url = e.url.replace(/\/\/(.+?)\//, "//" + s + "/" + e._domain + "/")
                      }
                  }
              }
          }, {
              key: "setEnableLowLatency",
              value: function(e) {
                  this.mse && this.mse.setEnableLowLatency(e)
              }
          }, {
              key: "requestUrl",
              value: function() {
                  this._reportFlvFlow();
                  var e = this.info
                    , t = e.domainList;
                  if (t && e._domain) {
                      var i = new RegExp("//(.*?)" + e._domain + "/")
                        , s = t.shift();
                      return s ? (this.cdnip = s,
                      this.stat.setExtDim(y.default.DIM_EXT.CDN_IP, s),
                      u.default.warn("FlvPlayer.requestUrl change domain to " + s),
                      e.url = e.url.replace(i, "//" + s + "/" + e._domain + "/")) : (this.cdnip = "",
                      this.stat.delDim(y.default.DIM_EXT.CDN_IP),
                      u.default.warn("FlvPlayer.requestUrl change domain to " + e._domain),
                      e.url = e.url.replace(i, "//" + e._domain + "/"),
                      delete e.domainList),
                      void this.start(e)
                  }
                  this.hyPlayer.trigger(f.Event.FLV_URL_UNAVAILABLE)
              }
          }, {
              key: "setConfig",
              value: function(e, t) {
                  this.hyPlayer.setConfig(e, t)
              }
          }, {
              key: "getConfig",
              value: function(e) {
                  return this.hyPlayer.getConfig(e)
              }
          }, {
              key: "setVolume",
              value: function(e) {
                  this.mse.setVolume(e)
              }
          }, {
              key: "setMuted",
              value: function(e) {
                  this.mse.setMuted(e)
              }
          }, {
              key: "getMuted",
              value: function() {
                  return this.mse.getMuted()
              }
          }, {
              key: "getBufferLen",
              value: function() {
                  return this.mse.getBufferLen()
              }
          }, {
              key: "getCurrentTime",
              value: function() {
                  return this.mse.getCurrentRealTime()
              }
          }, {
              key: "setPlaybackrateAccess",
              value: function(e) {
                  this.mse && this.mse.setPlaybackrateAccess(e)
              }
          }, {
              key: "onConnected",
              value: function() {
                  this.connectTime = d.default.now(),
                  u.default.log("%c[TIME] connectTime=" + (this.connectTime - this.startTs), "color:#A23400;background:#FFF5C2")
              }
          }, {
              key: "onClosed",
              value: function() {
                  this._reportFlvFlow(),
                  this.reset()
              }
          }, {
              key: "onError",
              value: function() {
                  this._reportFlvFlow(),
                  this.reset(),
                  this.hyPlayer.trigger(f.Event.ANCHOR_STOP, {
                      video: this.mse.getPlayVideo()
                  })
              }
          }, {
              key: "onData",
              value: function(e) {
                  var t = new Uint8Array(e);
                  this.flowSize += t.byteLength,
                  this.stat.addCore(y.default.CORE.CDN_TOTAL_BW, t.byteLength),
                  this.mse.appendFlv(t);
                  var i = d.default.now();
                  0 == this.recvTime && u.default.log("%c[TIME] firstPkgTime=" + (i - this.connectTime), "color:#A23400;background:#FFF5C2"),
                  this.recvTime = i
              }
          }, {
              key: "onPlayVideo",
              value: function(e, t, i) {
                  if (this.setVolume(this.hyPlayer.getVolume()),
                  0 !== this.startTs) {
                      this.loadTime = d.default.now() - this.startTs;
                      var s = this.connectTime - this.startTs;
                      this.hyPlayer.tsdbUtil.sendFlvTime(this.loadTime, s),
                      u.default.log("%cFlvMgr.onPlayVideo loadTime=" + this.loadTime, "color:#A23400;background:#FFF5C2"),
                      this.startTs = 0
                  }
                  this.hyPlayer.trigger(f.Event.VIDEO_PLAY, {
                      video: e,
                      width: t,
                      height: i
                  }),
                  this.updateStatus(f.Status.VIDEO_PLAYING)
              }
          }, {
              key: "onVideoStop",
              value: function(e, t) {
                  this._reportFlvFlow(),
                  u.default.log("FlvPlayer.onVideoStop hasVideo=" + t),
                  t && this.updateStatus(f.Status.VIDEO_STOP),
                  this.hyPlayer.trigger(f.Event.VIDEO_STOP, {
                      video: e,
                      hasVideo: t
                  })
              }
          }, {
              key: "onSendSeiData",
              value: function(e, t, i) {
                  this.hyPlayer.trigger(f.Event.H264_SEI_PLAY, {
                      data: e,
                      ts: t,
                      now: (new Date).getTime(),
                      vt: i
                  })
              }
          }, {
              key: "onSendScriptVolumeInfo",
              value: function(e, t) {
                  Number(localStorage._printAudioIntensity) && u.default.log("onSendScriptVolumeInfo uid:" + e + "  intensity:" + t),
                  this.hyPlayer.trigger(f.Event.UPDATE_INTERSITY, {
                      uid: e,
                      intensity: t
                  })
              }
          }, {
              key: "onPlayerError",
              value: function(e) {
                  this._reportFlvFlow(),
                  this.hyPlayer.trigger(f.Event.H5_PLAYER_ERROR)
              }
          }, {
              key: "onPlayPause",
              value: function(e, t) {
                  this.pauseStartTs = e,
                  this.pauseCheckLock = !1,
                  t && this.updateStatus(f.Status.VIDEO_CACHING)
              }
          }, {
              key: "onPlayResume",
              value: function(e, t) {
                  if (this.pauseStartTs > 0) {
                      var i = e - this.pauseStartTs;
                      i > 200 && (u.default.warn("FlvPlayer.onPlayResume pauseTime=" + i),
                      this.pauseCnt++,
                      this.pauseTime += i,
                      this.pauseCnt5++,
                      this.pauseTime5 += i),
                      this.pauseStartTs = 0
                  }
                  t && this.updateStatus(f.Status.VIDEO_PLAYING)
              }
          }, {
              key: "updateStatus",
              value: function(e) {
                  this.videoStatus !== e && (this.videoStatus = e,
                  this.hyPlayer.trigger(f.Event.PLAY_STATUS, {
                      status: e
                  }))
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  if (this.started) {
                      if (this.connected && this.recvTime > 0 && e - this.recvTime > 8e3) {
                          var i = this.getBufferLen();
                          return u.default.warn("FlvPlayer.onCheckTimer no data received " + (e - this.recvTime) + " buffLen=" + i),
                          this.hyPlayer.trigger(f.Event.NO_DATA_RECEIVED),
                          void this.reset()
                      }
                      if (this.loader.onCheckTimer(e, t),
                      this.mse.onCheckTimer(e, t),
                      this.metadataTick.onCheckTimer(e, t),
                      this.connected) {
                          if (t % 20 == 0) {
                              if (this.pauseStartTs > 0) {
                                  var s = e - this.pauseStartTs;
                                  s > 200 && (u.default.warn("FlvPlayer.onCheckTimer pauseTime=" + s),
                                  this.pauseTime += s,
                                  this.pauseStartTs = e,
                                  t % 300 == 0 && (this.pauseTime5 += s))
                              }
                              if (this.qaStat) {
                                  0 == this.pauseTime && (this.pauseReason = 0);
                                  var a = this.pauseStartTs > 0;
                                  this.qaStat.record(t, this.pauseCnt, this.pauseTime, a, this.flowSize, this.pauseReason)
                              }
                              this.pauseCnt = 0,
                              this.pauseTime = 0,
                              this.pauseReason = 0,
                              this.flowSize = 0
                          }
                          t % 300 == 0 && (this.hyPlayer.tsdbUtil.sendMetrics([{
                              sMetricName: v.default.METRIC.VIDEO_VIDEO_BAD_QUALITY_5M_RATIO,
                              vField: {
                                  value: this.pauseCnt5 > 0 ? 100 : 0
                              }
                          }]),
                          this.pauseCnt5 = 0,
                          this.pauseTime5 = 0),
                          this.backToP2P.onCheckTimer(e, t)
                      }
                  }
              }
          }, {
              key: "onCheckFastTimer",
              value: function(e, t) {
                  this.started && (this.mse.onCheckFastTimer(e, t),
                  this.backToP2P.onCheckFastTimer(e, t),
                  !this.pauseCheckLock && this.pauseStartTs > 0 && e - this.pauseStartTs > 200 && (this.pauseCheckLock = !0,
                  this.pauseCheck(e)))
              }
          }, {
              key: "_reportFlvFlow",
              value: function() {
                  this.flowSize > 0 && (this.qaStat && this.qaStat.sendFlow(this.flowSize),
                  this.flowSize = 0)
              }
          }, {
              key: "pauseCheck",
              value: function(e) {
                  if (this.started) {
                      var t = 0
                        , i = this.info.curBitrate / 8 - 10
                        , s = this.loader.speed / 1024 | 0;
                      t = s > 0 && s < i ? o.default.pauseReason.FLV_NET_SLOW : o.default.pauseReason.FLV_NO_BUFF,
                      this.recvTime > 0 && e - this.recvTime > 2e3 && (t = o.default.pauseReason.FLV_NO_DATA);
                      var a = this.getBufferLen();
                      a > 1e3 && (t = o.default.pauseReason.FLV_UNKNOW_PAUSE),
                      t > this.pauseReason && (this.pauseReason = t),
                      u.default.warn("FlvPlayer.pauseCheck curReason=" + t + " reportReason=" + this.pauseReason + " buffLen=" + a)
                  }
              }
          }, {
              key: "connected",
              get: function() {
                  return this.loader && this.loader.connected
              }
          }, {
              key: "isPlaying",
              get: function() {
                  return this.videoStatus !== f.Status.VIDEO_STOP
              }
          }]),
          e
      }();
      t.default = S
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(16))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(4))
        , u = (s(i(196)),
      s(i(197)))
        , l = function() {
          function e(t, i) {
              (0,
              n.default)(this, e),
              this.mse = t,
              this.remuxer = i,
              this.width = 0,
              this.height = 0,
              this.lastSN = 0,
              this.lastLevel = 0,
              this.PES_TIMESCALE = 9e4
          }
          return (0,
          r.default)(e, [{
              key: "getFps",
              value: function() {
                  return 0
              }
          }, {
              key: "destroy",
              value: function() {
                  this.switchLevel(),
                  this.duration = 0,
                  this._initPTS = this._initDTS = void 0
              }
          }, {
              key: "probe",
              value: function(e) {
                  return e.length >= 564 && 71 === e[0] && 71 === e[188] && 71 === e[376]
              }
          }, {
              key: "switchLevel",
              value: function() {
                  this.pmtParsed = !1,
                  this._pmtId = -1,
                  this._avcTrack = {
                      type: "video",
                      id: -1,
                      sn: 0,
                      samples: [],
                      len: 0,
                      naluCnt: 0
                  },
                  this._aacTrack = {
                      type: "audio",
                      id: -1,
                      sn: 0,
                      samples: [],
                      len: 0
                  },
                  this._id3Track = {
                      type: "id3",
                      id: -1,
                      sn: 0,
                      samples: [],
                      len: 0
                  },
                  this.remuxer.switchLevel()
              }
          }, {
              key: "insertDiscontinuity",
              value: function() {
                  this.switchLevel(),
                  this.remuxer.insertDiscontinuity()
              }
          }, {
              key: "parseTs",
              value: function(e) {
                  var t = e.data
                    , i = e.audioCodec
                    , s = e.videoCodec
                    , a = e.timeOffset
                    , n = e.duration
                    , r = e.discontinuity
                    , u = e.level
                    , l = e.sn
                    , d = (t = new Uint8Array(t)).length;
                  if (this.probe(t)) {
                      this.audioCodec = i,
                      this.videoCodec = s,
                      this.timeOffset = a,
                      this.duration = n,
                      this.contiguous = !1,
                      r ? (o.default.log("TsParser.parseTs discontinuity detected"),
                      this.insertDiscontinuity()) : u !== this.lastLevel ? (o.default.log("TsParser.parseTs level switch detected"),
                      this.switchLevel(),
                      this.lastLevel = u) : l === this.lastSN + 1 && (this.contiguous = !0),
                      this.lastSN = l,
                      this.contiguous || (this.aacOverFlow = null),
                      this._avcTrack || this.insertDiscontinuity();
                      for (var h, f, c, p, v, y, m, _, P = this.pmtParsed, T = this._avcTrack.id, S = this._aacTrack.id, g = this._id3Track.id, I = 0; I < d; I += 188)
                          if (71 === t[I]) {
                              if (p = !!(64 & t[I + 1]),
                              v = ((31 & t[I + 1]) << 8) + t[I + 2],
                              (48 & t[I + 3]) >> 4 > 1) {
                                  if ((y = I + 5 + t[I + 4]) === I + 188)
                                      continue
                              } else
                                  y = I + 4;
                              P ? (m = (_ = I + 188) - y,
                              v === T ? (p && (h && this._parseAVCPES(this._parsePES(h)),
                              h = {
                                  data: [],
                                  size: 0
                              }),
                              h && (h.data.push(t.subarray(y, _)),
                              h.size += m)) : v === S ? (p && (f && this._parseAACPES(this._parsePES(f)),
                              f = {
                                  data: [],
                                  size: 0
                              }),
                              f && (f.data.push(t.subarray(y, _)),
                              f.size += m)) : v === g && (p && (c && this._parseID3PES(this._parsePES(c)),
                              c = {
                                  data: [],
                                  size: 0
                              }),
                              c && (c.data.push(t.subarray(y, _)),
                              c.size += m))) : (p && (y += t[y] + 1),
                              0 === v ? this._parsePAT(t, y) : v === this._pmtId && (this._parsePMT(t, y),
                              P = this.pmtParsed = !0,
                              T = this._avcTrack.id,
                              S = this._aacTrack.id,
                              g = this._id3Track.id))
                          } else
                              o.default.error("TsParser.parseTs ERROR: TS packet did not start with 0x47");
                      h && this._parseAVCPES(this._parsePES(h)),
                      f && this._parseAACPES(this._parsePES(f)),
                      c && this._parseID3PES(this._parsePES(c)),
                      this._aacTrack.sn = this._avcTrack.sn = l,
                      this.remuxer.remux(this._aacTrack, this._avcTrack, this.timeOffset, this.contiguous)
                  }
              }
          }, {
              key: "_parsePAT",
              value: function(e, t) {
                  var i = e[t + 8] << 8 | e[t + 9];
                  1 == i && (this._pmtId = (31 & e[t + 10]) << 8 | e[t + 11]),
                  o.default.log("TsParser._parsePAT program_number=" + i + " pmtId=" + this._pmtId)
              }
          }, {
              key: "_parsePMT",
              value: function(e, t) {
                  var i = t + 3 + ((15 & e[t + 1]) << 8 | e[t + 2]) - 4;
                  for (t += 12 + ((15 & e[t + 10]) << 8 | e[t + 11]); t < i; ) {
                      var s = e[t]
                        , a = (31 & e[t + 1]) << 8 | e[t + 2];
                      switch (s) {
                      case 15:
                          this._aacTrack.id = a;
                          break;
                      case 21:
                          this._id3Track.id = a;
                          break;
                      case 27:
                          this._avcTrack.id = a;
                          break;
                      default:
                          o.default.log("unkown stream type:" + e[t])
                      }
                      t += 5 + ((15 & e[t + 3]) << 8 | e[t + 4])
                  }
                  o.default.log("TsParser._parsePMT aacTrack.id=" + this._aacTrack.id + " avcTrack.id=" + this._avcTrack.id)
              }
          }, {
              key: "_parsePES",
              value: function(e) {
                  var t = e.data[0];
                  if (1 != (t[0] << 16) + (t[1] << 8) + t[2])
                      return null;
                  var i, s, a = (t[4] << 8) + t[5], n = t[7];
                  192 & n && ((i = 536870912 * (14 & t[9]) + 4194304 * (255 & t[10]) + 16384 * (254 & t[11]) + 128 * (255 & t[12]) + (254 & t[13]) / 2) > 4294967295 && (i -= 8589934592),
                  64 & n ? (s = 536870912 * (14 & t[14]) + 4194304 * (255 & t[15]) + 16384 * (254 & t[16]) + 128 * (255 & t[17]) + (254 & t[18]) / 2) > 4294967295 && (s -= 8589934592) : s = i);
                  var r = t[8] + 9;
                  e.data[0] = e.data[0].subarray(r),
                  e.size -= r;
                  for (var o = 0, u = new Uint8Array(e.size); e.data.length; )
                      t = e.data.shift(),
                      u.set(t, o),
                      o += t.byteLength;
                  return {
                      data: u,
                      pts: i,
                      dts: s,
                      len: a
                  }
              }
          }, {
              key: "_parseAVCPES",
              value: function(e) {
                  if (null != e) {
                      var t, i = this._avcTrack, s = i.samples, n = this._parseAVCNALu(e.data), r = [], l = 0;
                      0 === n.length && s.length > 0 && this._pushToPreUnit(e.data),
                      e.data = null;
                      var d = !1
                        , h = !1
                        , f = !1
                        , c = !1
                        , p = !1
                        , v = ""
                        , y = !0
                        , m = !1
                        , _ = void 0;
                      try {
                          for (var P, T = (0,
                          a.default)(n); !(y = (P = T.next()).done); y = !0) {
                              var S = P.value;
                              switch (S.type) {
                              case 1:
                                  p = !0;
                                  break;
                              case 5:
                                  d = !0,
                                  p = !0,
                                  c = !0;
                                  break;
                              case 6:
                                  p = !0;
                                  break;
                              case 7:
                                  if (f = !0,
                                  p = !0,
                                  !i.sps) {
                                      i.sps = [S.data],
                                      i.timescale = this.remuxer.timescale,
                                      i.duration = this.remuxer.timescale * this.duration;
                                      var g = new u.default(S.data).readSPS();
                                      this.width = i.width = g.width,
                                      this.height = i.height = g.height;
                                      for (var I = S.data.subarray(1, 4), E = "avc1.", k = 0; k < 3; k++) {
                                          var C = I[k].toString(16);
                                          C.length < 2 && (C = "0" + C),
                                          E += C
                                      }
                                      i.codec = E
                                  }
                                  break;
                              case 8:
                                  h = !0,
                                  p = !0,
                                  i.pps || (i.pps = [S.data]);
                                  break;
                              case 9:
                                  p = !0;
                                  break;
                              default:
                                  p = !1,
                                  v += "unknown NAL " + S.type + " "
                              }
                              p && (r.push(S),
                              l += S.data.byteLength)
                          }
                      } catch (e) {
                          m = !0,
                          _ = e
                      } finally {
                          try {
                              !y && T.return && T.return()
                          } finally {
                              if (m)
                                  throw _
                          }
                      }
                      v.length && o.default.log(v),
                      (!0 !== f && !0 !== h || !1 !== d) && r.length && (!0 === c || i.sps) && (t = {
                          units: r,
                          dts: e.dts,
                          pts: e.pts,
                          key: c
                      },
                      s.push(t),
                      i.len += l,
                      i.naluCnt += r.length)
                  } else
                      o.default.error("TsParser._parseAVCPES pes is null.")
              }
          }, {
              key: "_parseAVCNALu",
              value: function(e) {
                  for (var t, i, s, a, n, r, o = 0, u = e.byteLength, l = 0, d = []; o < u; )
                      switch (t = e[o++],
                      l) {
                      case 0:
                          0 === t && (l = 1);
                          break;
                      case 1:
                          l = 0 === t ? 2 : 0;
                          break;
                      case 2:
                      case 3:
                          0 === t ? l = 3 : 1 === t ? (a = 31 & e[o],
                          n ? (s = {
                              data: e.subarray(n, o - l - 1),
                              type: r
                          },
                          d.push(s)) : (i = o - l - 1) && this._pushToPreUnit(e.subarray(0, i)),
                          n = o,
                          r = a,
                          1 !== a && 5 !== a || (o = u),
                          l = 0) : l = 0
                      }
                  return n && (s = {
                      data: e.subarray(n, u),
                      type: r
                  },
                  d.push(s)),
                  d
              }
          }, {
              key: "_pushToPreUnit",
              value: function(e) {
                  var t = this._avcTrack.samples.length;
                  if (0 != t) {
                      var i = this._avcTrack.samples[t - 1]
                        , s = i.units[i.units.length - 1]
                        , a = new Uint8Array(s.data.byteLength + e.byteLength);
                      a.set(s.data, 0),
                      a.set(e, s.data.byteLength),
                      s.data = a,
                      this._avcTrack.len += e.byteLength
                  }
              }
          }, {
              key: "_parseAACPES",
              value: function(e) {
                  if (null != e) {
                      var t, i, s, a, n, r, u, l, d = this._aacTrack, h = e.data, f = h.length, c = 0;
                      if (this.aacOverFlow) {
                          var p = new Uint8Array(this.aacOverFlow.byteLength + h.byteLength);
                          p.set(this.aacOverFlow, 0),
                          p.set(h, this.aacOverFlow.byteLength),
                          h = p,
                          this.aacOverFlow = null
                      }
                      for (i = 0; i < f - 1 && (255 !== h[i] || 240 != (240 & h[i + 1])); i++)
                          ;
                      if (i && (i < f - 1 ? (u = "AAC PES did not start with ADTS header, offset:" + i,
                      l = !1) : (u = "no ADTS header found in AAC PES",
                      l = !0),
                      o.default.error("TsParser._parseAACPES ERROR:" + u),
                      l))
                          return;
                      if (!d.audiosamplerate) {
                          var v = this._ADTStoAudioConfig(h, i, this.audioCodec);
                          d.config = v.config,
                          d.audiosamplerate = v.samplerate,
                          d.channelCount = v.channelCount,
                          d.codec = v.codec,
                          d.timescale = this.remuxer.timescale,
                          d.duration = this.remuxer.timescale * this.duration,
                          o.default.log("TsParser._parseAACPES parsed codec:" + d.codec + ",rate:" + v.samplerate + ",nb channel:" + v.channelCount)
                      }
                      for (; i + 5 < f; ) {
                          if (s = 1 & h[i + 1] ? 7 : 9,
                          a = (3 & h[i + 3]) << 11,
                          a |= h[i + 4] << 3,
                          a |= (224 & h[i + 5]) >>> 5,
                          (a -= s) < 0)
                              return void o.default.error("TsParser._parseAACPES adtsFrameSize:" + a + ", adtsStartOffset:" + i + ", len:" + f);
                          if (0 != a) {
                              if (!((n = i + s) + a <= f))
                                  break;
                              for (r = Math.round(e.pts + 1024 * c * this.PES_TIMESCALE / d.audiosamplerate),
                              t = {
                                  unit: h.subarray(n, n + a),
                                  pts: r,
                                  dts: r
                              },
                              d.samples.push(t),
                              d.len += a,
                              i += s + a,
                              c++; i < f - 1 && (255 !== h[i] || 240 != (240 & h[i + 1])); i++)
                                  ;
                          } else
                              i += s
                      }
                      i < f && (this.aacOverFlow = h.subarray(i, f))
                  } else
                      o.default.error("TsParser._parseAACPES pes is null.")
              }
          }, {
              key: "_ADTStoAudioConfig",
              value: function(t, i, s) {
                  var a = e.AdtsSampleingRates
                    , n = 1 + ((192 & t[i + 2]) >>> 6)
                    , r = (60 & t[i + 2]) >>> 2;
                  if (!(r > a.length - 1)) {
                      var u = (1 & t[i + 2]) << 2 | (192 & t[i + 3]) >>> 6;
                      o.default.log("TsParser._ADTStoAudioConfig manifest codec:" + s + ", [ADTS] type:" + n + ",sampleingIndex:" + r + "[" + a[r] + "kHz],channelConfig:" + u);
                      var l, d, h = navigator.userAgent.toLowerCase();
                      return -1 !== h.indexOf("firefox") ? r >= 6 ? (n = 5,
                      d = new Array(4),
                      l = r - 3) : (n = 2,
                      d = new Array(2),
                      l = r) : -1 !== h.indexOf("android") ? -1 !== h.indexOf("mqqbrowser") ? (n = 2,
                      d = new Array(2),
                      l = r) : (n = 5,
                      d = new Array(4),
                      l = r) : (n = 5,
                      d = new Array(4),
                      s && (-1 !== s.indexOf("mp4a.40.29") || -1 !== s.indexOf("mp4a.40.5")) || !s && r >= 6 ? l = r - 3 : (s && -1 !== s.indexOf("mp4a.40.2") && (r >= 6 || 1 === u) && (n = 2,
                      d = new Array(2)),
                      l = r)),
                      d[0] = n << 3,
                      d[0] |= (14 & r) >> 1,
                      d[1] |= (1 & r) << 7,
                      d[1] |= u << 3,
                      5 === n && (d[1] |= (14 & l) >> 1,
                      d[2] = (1 & l) << 7,
                      d[2] |= 8,
                      d[3] = 0),
                      {
                          config: d,
                          samplerate: a[r],
                          channelCount: u,
                          codec: "mp4a.40." + n
                      }
                  }
                  o.default.error("TsParser._ADTStoAudioConfig ERROR:invalid ADTS sampling index:" + r)
              }
          }, {
              key: "_parseID3PES",
              value: function(e) {
                  this._id3Track.samples.push(e)
              }
          }]),
          e
      }();
      l.AdtsSampleingRates = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350],
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e)
          }
          return (0,
          n.default)(e, null, [{
              key: "init",
              value: function() {
                  var t;
                  for (t in e.types = {
                      avc1: [],
                      avcC: [],
                      hvc1: [],
                      hvcC: [],
                      btrt: [],
                      dinf: [],
                      dref: [],
                      esds: [],
                      ftyp: [],
                      hdlr: [],
                      mdat: [],
                      mdhd: [],
                      mdia: [],
                      mfhd: [],
                      minf: [],
                      moof: [],
                      moov: [],
                      mp4a: [],
                      mvex: [],
                      mvhd: [],
                      sdtp: [],
                      stbl: [],
                      stco: [],
                      stsc: [],
                      stsd: [],
                      stsz: [],
                      stts: [],
                      tfdt: [],
                      tfhd: [],
                      traf: [],
                      trak: [],
                      trun: [],
                      trex: [],
                      tkhd: [],
                      vmhd: [],
                      smhd: []
                  },
                  e.types)
                      e.types.hasOwnProperty(t) && (e.types[t] = [t.charCodeAt(0), t.charCodeAt(1), t.charCodeAt(2), t.charCodeAt(3)]);
                  var i = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0])
                    , s = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
                  e.HDLR_TYPES = {
                      video: i,
                      audio: s
                  };
                  var a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1])
                    , n = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                  e.STTS = e.STSC = e.STCO = n,
                  e.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
                  e.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
                  e.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]),
                  e.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]);
                  var r = new Uint8Array([105, 115, 111, 109])
                    , o = new Uint8Array([97, 118, 99, 49])
                    , u = new Uint8Array([0, 0, 0, 1]);
                  e.FTYP = e.box(e.types.ftyp, r, u, r, o),
                  e.DINF = e.box(e.types.dinf, e.box(e.types.dref, a))
              }
          }, {
              key: "box",
              value: function(e) {
                  for (var t, i = Array.prototype.slice.call(arguments, 1), s = 8, a = i.length, n = a; a--; )
                      s += i[a].byteLength;
                  for ((t = new Uint8Array(s))[0] = s >> 24 & 255,
                  t[1] = s >> 16 & 255,
                  t[2] = s >> 8 & 255,
                  t[3] = 255 & s,
                  t.set(e, 4),
                  a = 0,
                  s = 8; a < n; a++)
                      t.set(i[a], s),
                      s += i[a].byteLength;
                  return t
              }
          }, {
              key: "hdlr",
              value: function(t) {
                  return e.box(e.types.hdlr, e.HDLR_TYPES[t])
              }
          }, {
              key: "mdat",
              value: function(t) {
                  return e.box(e.types.mdat, t)
              }
          }, {
              key: "mdhd",
              value: function(t, i) {
                  return e.box(e.types.mdhd, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, 255 & t, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, 85, 196, 0, 0]))
              }
          }, {
              key: "mdia",
              value: function(t) {
                  return e.box(e.types.mdia, e.mdhd(t.timescale, t.duration), e.hdlr(t.type), e.minf(t))
              }
          }, {
              key: "mfhd",
              value: function(t) {
                  return e.box(e.types.mfhd, new Uint8Array([0, 0, 0, 0, t >> 24, t >> 16 & 255, t >> 8 & 255, 255 & t]))
              }
          }, {
              key: "minf",
              value: function(t) {
                  return "audio" === t.type ? e.box(e.types.minf, e.box(e.types.smhd, e.SMHD), e.DINF, e.stbl(t)) : e.box(e.types.minf, e.box(e.types.vmhd, e.VMHD), e.DINF, e.stbl(t))
              }
          }, {
              key: "moof",
              value: function(t, i, s) {
                  return e.box(e.types.moof, e.mfhd(t), e.traf(s, i))
              }
          }, {
              key: "moov",
              value: function(t) {
                  for (var i = t.length, s = []; i--; )
                      s[i] = e.trak(t[i]);
                  return e.box.apply(null, [e.types.moov, e.mvhd(t[0].timescale, t[0].duration)].concat(s).concat(e.mvex(t)))
              }
          }, {
              key: "mvex",
              value: function(t) {
                  for (var i = t.length, s = []; i--; )
                      s[i] = e.trex(t[i]);
                  return e.box.apply(null, [e.types.mvex].concat(s))
              }
          }, {
              key: "mvhd",
              value: function(t, i) {
                  var s = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, 255 & t, i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, 255 & i, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
                  return e.box(e.types.mvhd, s)
              }
          }, {
              key: "sdtp",
              value: function(t) {
                  var i, s, a = t.samples || [], n = new Uint8Array(4 + a.length);
                  for (s = 0; s < a.length; s++)
                      i = a[s].flags,
                      n[s + 4] = i.dependsOn << 4 | i.isDependedOn << 2 | i.hasRedundancy;
                  return e.box(e.types.sdtp, n)
              }
          }, {
              key: "stbl",
              value: function(t) {
                  return e.box(e.types.stbl, e.stsd(t), e.box(e.types.stts, e.STTS), e.box(e.types.stsc, e.STSC), e.box(e.types.stsz, e.STSZ), e.box(e.types.stco, e.STCO))
              }
          }, {
              key: "avc1",
              value: function(t) {
                  var i, s, a, n = [], r = [];
                  for (i = 0; i < t.sps.length; i++)
                      a = (s = t.sps[i]).byteLength,
                      n.push(a >>> 8 & 255),
                      n.push(255 & a),
                      n = n.concat(Array.prototype.slice.call(s));
                  for (i = 0; i < t.pps.length; i++)
                      a = (s = t.pps[i]).byteLength,
                      r.push(a >>> 8 & 255),
                      r.push(255 & a),
                      r = r.concat(Array.prototype.slice.call(s));
                  var o = e.box(e.types.avcC, new Uint8Array([1, n[3], n[4], n[5], 255, 224 | t.sps.length].concat(n).concat([t.pps.length]).concat(r)))
                    , u = t.width
                    , l = t.height;
                  return e.box(e.types.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, u >> 8 & 255, 255 & u, l >> 8 & 255, 255 & l, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 255, 255]), o, e.box(e.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])))
              }
          }, {
              key: "hvc1",
              value: function(t) {
                  var i, s, a, n = [], r = [], o = [];
                  for (n.push(161),
                  n.push(t.vps.length >>> 8 & 255),
                  n.push(255 & t.vps.length),
                  i = 0; i < t.vps.length; i++)
                      a = (s = t.vps[i]).byteLength,
                      n.push(a >>> 8 & 255),
                      n.push(255 & a),
                      n = n.concat(Array.prototype.slice.call(s));
                  for (r.push(162),
                  r.push(t.sps.length >>> 8 & 255),
                  r.push(255 & t.sps.length),
                  i = 0; i < t.sps.length; i++)
                      a = (s = t.sps[i]).byteLength,
                      r.push(a >>> 8 & 255),
                      r.push(255 & a),
                      r = r.concat(Array.prototype.slice.call(s));
                  var u = []
                    , l = 0;
                  for (i = 0; i < r.length; )
                      s = r[i],
                      2 !== l || 3 !== s ? (0 === s ? l++ : l = 0,
                      u.push(s),
                      ++i) : (++i,
                      l = 0);
                  for (o.push(163),
                  o.push(t.pps.length >>> 8 & 255),
                  o.push(255 & t.pps.length),
                  i = 0; i < t.pps.length; i++)
                      a = (s = t.pps[i]).byteLength,
                      o.push(a >>> 8 & 255),
                      o.push(255 & a),
                      o = o.concat(Array.prototype.slice.call(s));
                  var d = e.box(e.types.hvcC, new Uint8Array([1, u[8], u[9], u[10], u[11], u[12], u[13], u[14], u[15], u[16], u[17], u[18], u[19], 240, 0, 255, 253, 248, 248, 0, 0, 15].concat([3]).concat(n).concat(r).concat(o)))
                    , h = t.width
                    , f = t.height;
                  return e.box(e.types.hvc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h >> 8 & 255, 255 & h, f >> 8 & 255, 255 & f, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 255, 255]), d, e.box(e.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])))
              }
          }, {
              key: "esds",
              value: function(e) {
                  var t = e.config.length;
                  return new Uint8Array([0, 0, 0, 0, 3, 23 + t, 0, 1, 0, 4, 15 + t, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([t]).concat(e.config).concat([6, 1, 2]))
              }
          }, {
              key: "mp4a",
              value: function(t) {
                  var i = t.audiosamplerate;
                  return e.box(e.types.mp4a, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t.channelCount, 0, 16, 0, 0, 0, 0, i >> 8 & 255, 255 & i, 0, 0]), e.box(e.types.esds, e.esds(t)))
              }
          }, {
              key: "stsd",
              value: function(t) {
                  return "audio" === t.type ? e.box(e.types.stsd, e.STSD, e.mp4a(t)) : t.isHevc ? e.box(e.types.stsd, e.STSD, e.hvc1(t)) : e.box(e.types.stsd, e.STSD, e.avc1(t))
              }
          }, {
              key: "tkhd",
              value: function(t) {
                  var i = t.id
                    , s = t.duration
                    , a = t.width
                    , n = t.height;
                  return e.box(e.types.tkhd, new Uint8Array([0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, 255 & i, 0, 0, 0, 0, s >> 24, s >> 16 & 255, s >> 8 & 255, 255 & s, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, a >> 8 & 255, 255 & a, 0, 0, n >> 8 & 255, 255 & n, 0, 0]))
              }
          }, {
              key: "traf",
              value: function(t, i) {
                  var s = e.sdtp(t)
                    , a = t.id;
                  return e.box(e.types.traf, e.box(e.types.tfhd, new Uint8Array([0, 0, 0, 0, a >> 24, a >> 16 & 255, a >> 8 & 255, 255 & a])), e.box(e.types.tfdt, new Uint8Array([0, 0, 0, 0, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i])), e.trun(t, s.length + 16 + 16 + 8 + 16 + 8 + 8), s)
              }
          }, {
              key: "trak",
              value: function(t) {
                  return t.duration = t.duration || 4294967295,
                  e.box(e.types.trak, e.tkhd(t), e.mdia(t))
              }
          }, {
              key: "trex",
              value: function(t) {
                  var i = t.id;
                  return e.box(e.types.trex, new Uint8Array([0, 0, 0, 0, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]))
              }
          }, {
              key: "trun",
              value: function(t, i) {
                  var s, a, n, r, o, u, l = t.samples || [], d = l.length, h = 12 + 16 * d, f = new Uint8Array(h);
                  for (i += 8 + h,
                  f.set([0, 0, 15, 1, d >>> 24 & 255, d >>> 16 & 255, d >>> 8 & 255, 255 & d, i >>> 24 & 255, i >>> 16 & 255, i >>> 8 & 255, 255 & i], 0),
                  s = 0; s < d; s++)
                      n = (a = l[s]).duration,
                      r = a.size,
                      o = a.flags,
                      u = a.cts,
                      f.set([n >>> 24 & 255, n >>> 16 & 255, n >>> 8 & 255, 255 & n, r >>> 24 & 255, r >>> 16 & 255, r >>> 8 & 255, 255 & r, o.isLeading << 2 | o.dependsOn, o.isDependedOn << 6 | o.hasRedundancy << 4 | o.paddingValue << 1 | o.isNonSync, 61440 & o.degradPrio, 15 & o.degradPrio, u >>> 24 & 255, u >>> 16 & 255, u >>> 8 & 255, 255 & u], 12 + 16 * s);
                  return e.box(e.types.trun, f)
              }
          }, {
              key: "initSegment",
              value: function(t) {
                  e.types || e.init();
                  var i, s = e.moov(t);
                  return (i = new Uint8Array(e.FTYP.byteLength + s.byteLength)).set(e.FTYP),
                  i.set(s, e.FTYP.byteLength),
                  i
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = (s(i(6)),
      s(i(198)))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.size = 0,
              this.buffers = []
          }
          return (0,
          n.default)(e, [{
              key: "destroy",
              value: function() {
                  this.reset()
              }
          }, {
              key: "reset",
              value: function() {
                  this.size = 0,
                  this.buffers = []
              }
          }, {
              key: "append",
              value: function(e) {
                  0 !== e.length && (this.buffers.push(e),
                  this.size += e.length)
              }
          }, {
              key: "getByte",
              value: function(e) {
                  for (var t = 0, i = 0; i < this.buffers.length; ++i) {
                      var s = this.buffers[i];
                      if (t + s.length > e)
                          return s[e - t];
                      t += s.length
                  }
                  return r.default.warn("FlvCacher.getByte has no offset=" + e),
                  0
              }
          }, {
              key: "popFrame",
              value: function() {
                  if (0 === this.size)
                      return null;
                  if (0 === this.buffers.length)
                      return r.default.error("FlvCacher.popFront error no buffers, size:" + this.size + " not eq 0"),
                      this.reset(),
                      null;
                  if (this.size <= o.default.TAG_HEADER_LEN + o.default.PREV_TAG_SIZE_LEN)
                      return null;
                  var e = (this.getByte(1) << 16) + (this.getByte(2) << 8) + this.getByte(3)
                    , t = o.default.TAG_HEADER_LEN + e + o.default.PREV_TAG_SIZE_LEN;
                  if (this.size < t)
                      return null;
                  if (1 === this.buffers.length) {
                      if (this.buffers[0].length === t)
                          return this.size -= t,
                          this.buffers.shift();
                      var i = this.buffers[0].slice(0, t);
                      return this.buffers[0] = this.buffers[0].slice(t),
                      this.size -= t,
                      i
                  }
                  for (var s = new Uint8Array(t), a = 0, n = 0, u = void 0; a < t; ) {
                      var l = t - a;
                      if (this.buffers[0].length > l) {
                          u = this.buffers[0].slice(0, l),
                          s.set(u, n),
                          n += l,
                          a += l,
                          this.buffers[0] = this.buffers[0].slice(l),
                          this.size -= l;
                          break
                      }
                      u = this.buffers.shift(),
                      s.set(u, n),
                      n += u.length,
                      a += u.length,
                      this.size -= u.length
                  }
                  return s
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a, n = s(i(0)), r = s(i(1)), o = (a = new ArrayBuffer(2),
      new DataView(a).setInt16(0, 256, !0),
      256 === new Int16Array(a)[0]), u = function() {
          function e() {
              (0,
              n.default)(this, e)
          }
          return (0,
          r.default)(e, null, [{
              key: "parseObject",
              value: function(t, i, s) {
                  var a = e.parseString(t, i)
                    , n = e.parseScript(t, i + a.size);
                  return {
                      data: {
                          name: a.data,
                          value: n.data
                      },
                      size: n.size
                  }
              }
          }, {
              key: "parseVariable",
              value: function(t, i, s) {
                  return e.parseObject(t, i, s)
              }
          }, {
              key: "parseDate",
              value: function(e, t, i) {
                  if (i < 10)
                      throw new Error("Data size invalid when parse Date");
                  var s = new DataView(e,t)
                    , a = s.getFloat64(0, !o)
                    , n = s.getInt16(8, !o);
                  return {
                      data: new Date(a += 60 * n * 1e3),
                      size: 10
                  }
              }
          }, {
              key: "parseString",
              value: function(e, t) {
                  var i = new DataView(e,t)
                    , s = i.getUint16(0, !o)
                    , a = "";
                  if (s > 0)
                      for (var n = 0; n < s; n++)
                          a += String.fromCharCode(i.getUint8(n + 2));
                  return {
                      data: a,
                      size: 2 + s
                  }
              }
          }, {
              key: "parseMetadata",
              value: function(t) {
                  var i = e.parseScript(t, 0);
                  return e.parseScript(t, i.size, t.length - i.size)
              }
          }, {
              key: "parseScript",
              value: function(t, i, s) {
                  var a = i
                    , n = new Uint8Array(t).buffer
                    , r = new DataView(n,0,s)
                    , u = null
                    , l = r.getUint8(a);
                  switch (a += 1,
                  l) {
                  case 0:
                      u = r.getFloat64(a, !o),
                      a += 8;
                      break;
                  case 1:
                      u = !!r.getUint8(a),
                      a += 1;
                      break;
                  case 2:
                      var d = e.parseString(n, a);
                      u = d.data,
                      a += d.size;
                      break;
                  case 3:
                      for (u = {}; a < s - 3; ) {
                          var h = e.parseObject(n, a, s - i);
                          if (u[h.data.name] = h.data.value,
                          a = h.size,
                          0 === r.getUint8(a) && 0 === r.getUint8(a + 1) && 9 === r.getUint8(a + 2)) {
                              a += 3;
                              break
                          }
                      }
                      break;
                  case 8:
                      for (u = {},
                      a += 4; a < s - 8; ) {
                          var f = e.parseVariable(n, a);
                          u[f.data.name] = f.data.value,
                          a = f.size
                      }
                      a <= s - 3 && 9 == (16777215 & r.getUint32(a - 1, !o)) && (a += 3);
                      break;
                  case 10:
                      u = [];
                      var c = r.getUint32(a, !o);
                      a += 4;
                      for (var p = 0; p < c; p++) {
                          var v = e.parseScript(n, a);
                          u.push(v.data),
                          a = v.size
                      }
                      break;
                  case 11:
                      var y = e.parseDate(n, a + 1, s - 1);
                      u = y.data,
                      a += y.size;
                      break;
                  case 12:
                      var m = e.parseString(n, a + 1);
                      u = m.data,
                      a += m.size;
                      break;
                  default:
                      a = s,
                      console.log("AMF", "Unsupported AMF value type " + l)
                  }
                  return {
                      data: u,
                      size: a
                  }
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.fpsArr = [],
              this.fpsMap = new a.default
          }
          return (0,
          r.default)(e, [{
              key: "reset",
              value: function() {
                  this.fpsArr = [],
                  this.fpsMap.clear()
              }
          }, {
              key: "addDts",
              value: function(e) {
                  var t = parseInt(e / 1e3);
                  if (this.fpsMap.has(t))
                      this.fpsMap.set(t, this.fpsMap.get(t) + 1);
                  else if (this.fpsArr.push(t),
                  this.fpsMap.set(t, 1),
                  this.fpsArr.length > 10) {
                      var i = this.fpsArr.shift();
                      this.fpsMap.delete(i)
                  }
              }
          }, {
              key: "getFps",
              value: function() {
                  if (this.fpsArr.length > 1) {
                      var t = this.fpsArr[1]
                        , i = this.fpsMap.get(t)
                        , s = 0
                        , a = i;
                      return e.FIXED_FPS.forEach(function(e) {
                          var t = e > i ? e - i : i - e;
                          t < 3 && (0 === s || t < s) && (s = t,
                          a = e)
                      }),
                      a
                  }
                  return 0
              }
          }]),
          e
      }();
      o.FIXED_FPS = [0, 15, 20, 24, 30, 40, 48, 60],
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.seiList = [],
              this.player = t,
              this.lastTs = -1,
              this.internal = 10,
              this.timerStart = !1
          }
          return (0,
          n.default)(e, [{
              key: "add",
              value: function(e, t) {
                  var i = this.seiList.length;
                  if (this.seiList.length > 0)
                      for (i = this.seiList.length - 1; i > 0 && !(e > this.seiList[i].timeStamp); i--)
                          ;
                  this.seiList.splice(i + 1, 0, {
                      timeStamp: e,
                      data: t
                  }),
                  this.timerStart || (this.timerStart = !0,
                  setTimeout(this.checkDispatchSei.bind(this), this.internal))
              }
          }, {
              key: "checkDispatchSei",
              value: function() {
                  if (this.timerStart) {
                      for (var e = this.player.getCurrentRealTime(), t = 0, i = null; t < this.seiList.length - 2; ) {
                          if (e >= this.seiList[t].timeStamp && this.seiList[t + 1].timeStamp > e) {
                              i = this.seiList[t + 1].data,
                              this.player.onH264Sei(i, this.seiList[t + 1].timeStamp),
                              this.seiList.splice(0, t + 1);
                              break
                          }
                          t++
                      }
                      setTimeout(this.checkDispatchSei.bind(this), this.internal)
                  }
              }
          }, {
              key: "reset",
              value: function() {
                  this.seiList = [],
                  this.player = null,
                  this.lastTs = -1,
                  this.timerStart = !1
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.volumeList = [],
              this.player = t,
              this.lastTs = -1,
              this.internal = 10,
              this.timerStart = !1
          }
          return (0,
          n.default)(e, [{
              key: "add",
              value: function(e, t) {
                  var i = this.volumeList.length;
                  if (this.volumeList.length > 0)
                      for (i = this.volumeList.length - 1; i > 0 && !(e > this.volumeList[i].timeStamp); i--)
                          ;
                  this.volumeList.splice(i + 1, 0, {
                      timeStamp: e,
                      data: t
                  }),
                  this.timerStart || (this.timerStart = !0,
                  setTimeout(this.checkDispatchVolume.bind(this), this.internal))
              }
          }, {
              key: "checkDispatchVolume",
              value: function() {
                  if (this.timerStart) {
                      for (var e = this.player.getCurrentRealTime(), t = 0; t < this.volumeList.length - 2; ) {
                          if (e >= this.volumeList[t].timeStamp && this.volumeList[t + 1].timeStamp > e) {
                              var i = this.volumeList[t + 1].data.split("_");
                              i.length > 1 && this.player.onScriptVolumeInfo(i[0], i[1]),
                              this.volumeList.splice(0, t + 1);
                              break
                          }
                          t++
                      }
                      this.volumeList.length > 0 ? setTimeout(this.checkDispatchVolume.bind(this), this.internal) : this.timerStart = !1
                  }
              }
          }, {
              key: "reset",
              value: function() {
                  this.volumeList = [],
                  this.player = null,
                  this.lastTs = -1,
                  this.timerStart = !1
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(10))
        , o = s(i(4))
        , u = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.flvPlayer = t,
              this.hyPlayer = t.hyPlayer,
              this.jumpToP2PCd = 24e4,
              this.nextJumpToP2PTs = 0,
              this.waitPlayEnd = !1
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.waitPlayEnd = !1
              }
          }, {
              key: "initJumpTs",
              value: function(e) {
                  0 == this.nextJumpToP2PTs && (this.nextJumpToP2PTs = e + this.jumpToP2PCd)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  if (!this.waitPlayEnd && this.hyPlayer.isSupportP2P && !(e < this.nextJumpToP2PTs)) {
                      var i = this.flvPlayer
                        , s = this.hyPlayer.lastP2PInfo;
                      if (s && s.lineType == i.lineType) {
                          var a = s.sStreamName;
                          a && i.url && -1 != i.url.indexOf(a) && (i.getBufferLen() < i.mse.JITTER_BUFLEN || (i.loader && (o.default.warn("BackToP2P.tryPlayP2P"),
                          i.loader.close()),
                          this.waitPlayEnd = !0))
                      }
                  }
              }
          }, {
              key: "onCheckFastTimer",
              value: function(e, t) {
                  this.hyPlayer;
                  var i = this.flvPlayer.getBufferLen();
                  this.waitPlayEnd && i < 1e3 && (this.waitPlayEnd = !1,
                  this.jumpToP2PCd < 18e5 && (this.jumpToP2PCd += 12e4),
                  this.nextJumpToP2PTs = e + this.jumpToP2PCd,
                  o.default.warn("BackToP2P.onCheckFastTimer jumpToP2PCd=" + this.jumpToP2PCd / 6e4 + "min"),
                  this.hyPlayer.metrics.setP2p(1),
                  this.hyPlayer.flvBackToP2P(),
                  r.default.once(this.tryPlayP2PTimeout, this, 3e3))
              }
          }, {
              key: "tryPlayP2PTimeout",
              value: function() {
                  var e = this.hyPlayer
                    , t = e.player;
                  e.isP2P && t.isPlaying || e.lastFlvInfo && (o.default.warn("BackToP2P.tryPlayP2PTimeout"),
                  e.start(e.lastFlvInfo))
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = s(i(6))
        , u = s(i(22))
        , l = s(i(29))
        , d = s(i(13))
        , h = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.flvPlayer = t,
              this.hyPlayer = t.hyPlayer,
              this.stat = t.hyPlayer.stat,
              this.data = {
                  act: "webhuyah5qa",
                  uid: 0,
                  sid: 0,
                  subsid: 0,
                  linetype: -1,
                  sendcnt: 0,
                  paucount: 0,
                  paulength: 0,
                  bflength: 0,
                  vr: 0,
                  httphead: "",
                  rel: "jsscene",
                  ref: location.href,
                  isp2p: 0
              },
              this.img = null,
              this.pausedCount = 0,
              this.pausedTime = 0,
              this.isPaused = !1,
              this.isFirstReport = !0
          }
          return (0,
          n.default)(e, [{
              key: "send",
              value: function() {
                  var e = this.data
                    , t = this.flvPlayer
                    , i = "//ylog.huya.com/d.gif?rid=ods_action_log&pro=huya_web&sdver=1&cutc=" + o.default.utc();
                  for (var s in e.uid = t.info.uuid,
                  e.sid = t.info.sid,
                  e.subsid = t.info.subSid,
                  e.linetype = t.info.lineType,
                  e.sendcnt++,
                  e.paucount = this.pausedCount,
                  e.paulength = this.pausedTime > 12e4 ? 12e4 : this.pausedTime,
                  e.bflength = this.flvPlayer.mse.getBufferLen(),
                  this.pausedCount = 0,
                  this.pausedTime = 0,
                  e)
                      i += "&" + s + "=" + e[s];
                  r.default.log("QAStat sendcnt=" + e.sendcnt + " paucount=" + e.paucount + " paulength=" + e.paulength + " bflength=" + e.bflength),
                  this.img || (this.img = new Image),
                  this.img.src = i
              }
          }, {
              key: "sendFlow",
              value: function(e) {
                  var t = [{
                      sMetricName: u.default.METRIC.VIDEO_FLOW_LINE,
                      vField: {
                          value: e
                      }
                  }];
                  this.stat.fill(t, !0),
                  this.hyPlayer.tsdbUtil.sendMetrics(t)
              }
          }, {
              key: "record",
              value: function(e, t, i, s, a, n) {
                  this.pausedCount += t,
                  this.pausedTime += i;
                  var r = this.hyPlayer.tsdbUtil;
                  if (e % 120 == 0 && (s && this.pausedCount++,
                  this.send()),
                  s && (this.isPaused = !0),
                  e % 20 == 0) {
                      var o = 0;
                      o = this.flvPlayer.getConfig(100) ? this.flvPlayer.getConfig(101) ? this.hyPlayer.isBrowserSupport() ? this.hyPlayer.isP2PCooling() ? l.default.userProperty.P2P_COOLING : 1 == r.turnToFlvTimes && 0 == r.restartTimes ? r.turnToFlvReason == l.default.turnToFlvReason.FULL_CONNECT_TIMEOUT ? l.default.userProperty.FIRST_FULL_CONNECT_TIMEOUT : r.turnToFlvReason == l.default.turnToFlvReason.FULL_NO_DATA ? l.default.userProperty.FIRST_FULL_NO_DATA : r.turnToFlvReason == l.default.turnToFlvReason.FULL_PLAY_FAIL ? l.default.userProperty.FIRST_FULL_PLAY_FAIL : r.turnToFlvReason == l.default.turnToFlvReason.SUB_CONNECT_TIMEOUT ? l.default.userProperty.SUB_CONNECT_TIMEOUT : r.turnToFlvReason == l.default.turnToFlvReason.SUB_NO_DATA ? l.default.userProperty.SUB_NO_DATA : r.turnToFlvReason == l.default.turnToFlvReason.P2P_ARGS_ERROR ? l.default.userProperty.P2P_ARGS_ERROR : r.turnToFlvReason == l.default.turnToFlvReason.P2P_COOLING ? l.default.userProperty.P2P_COOLING : l.default.userProperty.UNKNOW : r.turnToFlvReason == l.default.turnToFlvReason.FULL_CONNECT_TIMEOUT || r.turnToFlvReason == l.default.turnToFlvReason.FULL_NO_DATA || r.turnToFlvReason == l.default.turnToFlvReason.FULL_PLAY_FAIL ? r.restartReason == l.default.restartReason.RANGE_SEQ_MAX ? l.default.userProperty.RESTART_RANGE_MAX : r.restartReason == l.default.restartReason.RANGE_SEQ_LARGE ? l.default.userProperty.RESTART_RANGE_LARGE : r.restartReason == l.default.restartReason.CONNECT ? l.default.userProperty.RESTART_CONNECT : r.restartReason == l.default.restartReason.MULTI_CDN ? l.default.userProperty.RESTART_MUTI_CDN : r.restartReason == l.default.restartReason.PLAYER_NO_DATA ? l.default.userProperty.RESTART_PLAYER_NO_DATA : r.restartReason == l.default.restartReason.PLAYER_ERROR ? l.default.userProperty.RESTART_PLAYER_ERROR : r.restartReason == l.default.restartReason.FLV_TO_P2P ? l.default.userProperty.FLV_TO_P2P : r.restartReason == l.default.restartReason.LOST_SEQ ? l.default.userProperty.LOST_SEQ : l.default.userProperty.UNKNOW : r.turnToFlvReason == l.default.turnToFlvReason.SUB_CONNECT_TIMEOUT ? l.default.userProperty.SUB_CONNECT_TIMEOUT : r.turnToFlvReason == l.default.turnToFlvReason.SUB_NO_DATA ? l.default.userProperty.SUB_NO_DATA : r.turnToFlvReason == l.default.turnToFlvReason.P2P_ARGS_ERROR ? l.default.userProperty.P2P_ARGS_ERROR : r.turnToFlvReason == l.default.turnToFlvReason.P2P_COOLING ? l.default.userProperty.P2P_COOLING : l.default.userProperty.UNKNOW : l.default.userProperty.BROWSER_UN_SUPPORT : l.default.userProperty.CLIENT_CLOSE : l.default.userProperty.SERVER_CLOSE,
                      this.stat.setCoreDim(d.default.DIM_CORE.USER_PROPERTY, o);
                      var h = this.flvPlayer.mse.parser.timeStampStat
                        , f = [{
                          sMetricName: u.default.METRIC.VIDEO_FLOW_LINE,
                          vField: {
                              value: a
                          }
                      }, {
                          sMetricName: u.default.METRIC.SDK_P2P_SERVER_OPEN,
                          vField: {
                              value: 1 == o ? 0 : 100
                          }
                      }, {
                          sMetricName: u.default.METRIC.SDK_P2P_USER_PROPERTY,
                          vDimension: {
                              success: o
                          }
                      }];
                      h.reset();
                      var c = this.flvPlayer.info;
                      this.stat.setCoreDim(d.default.DIM_CORE.VIDEO_BAD_QUALITY_OLD, s ? 100 : 0),
                      this.stat.setCoreDim(d.default.DIM_CORE.VIDEO_BAD_QUALITY, s || t > 0 ? 100 : 0),
                      this.stat.setCoreDim(d.default.DIM_CORE.VIDEO_BAD_REASON, n),
                      this.flvPlayer.mse.metadata && this.flvPlayer.mse.metadata.codecname && this.stat.setComDim(d.default.DIM_COM.SPHD_TYPE, this.flvPlayer.mse.metadata.codecname),
                      this.isFirstReport ? this.isFirstReport = !1 : f.push({
                          sMetricName: u.default.METRIC.VIDEO_BAD_QUALITY_RATIO,
                          vField: {
                              value: this.isPaused ? 100 : 0,
                              pausecnt: t
                          },
                          vDimension: {
                              p2p: 0,
                              originalBitrate: 0 === c.originalBitrate ? 1 : 0,
                              p2pCooling: this.hyPlayer.p2pCooling ? 1 : 0,
                              topSid: c.sid,
                              reason: n,
                              quality: s || t > 0 ? 100 : 0
                          },
                          vExLog: {
                              cdnip: this.flvPlayer.cdnip
                          }
                      }),
                      this.stat.fill(f),
                      this.hyPlayer.tsdbUtil.sendMetrics(f),
                      this.isPaused = !1
                  }
              }
          }, {
              key: "getHost",
              value: function(e) {
                  return e.replace("https*://", "").split("/")[0]
              }
          }, {
              key: "setHttpHead",
              value: function(e) {
                  this.data.httphead = this.getHost(e)
              }
          }]),
          e
      }();
      t.default = h
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(6))
        , o = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.flvPlayer = t,
              this.data = {
                  act: "webhuyaplayed",
                  uid: 0,
                  sid: 0,
                  subsid: 0,
                  linetype: -1,
                  status: 0,
                  recode: 0,
                  vtime: -1,
                  isp2p: 0
              }
          }
          return (0,
          n.default)(e, [{
              key: "send",
              value: function() {
                  var e = this.data
                    , t = this.flvPlayer
                    , i = this.flvPlayer.loader ? this.flvPlayer.loader.status : 200
                    , s = "//ylog.huya.com/d.gif?rid=ods_action_log&pro=huya_web&sdver=1&cutc=" + r.default.utc();
                  for (var a in e.uid = t.info.uuid,
                  e.sid = t.info.sid,
                  e.subsid = t.info.subSid,
                  e.linetype = t.info.lineType,
                  e.status = i || 1,
                  0 == i ? e.recode = 2 : (i < 200 || i >= 300) && (e.recode = 1),
                  e.vtime = t.loadTime || -1,
                  e)
                      s += "&" + a + "=" + e[a];
                  (new Image).src = s
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(20))
        , n = s(i(46))
        , r = s(i(0))
        , o = s(i(1))
        , u = s(i(4))
        , l = s(i(10))
        , d = s(i(6))
        , h = s(i(22))
        , f = s(i(13))
        , c = i(12)
        , p = s(i(202))
        , v = s(i(2))
        , y = s(i(278))
        , m = (s(i(204)),
      s(i(280)))
        , _ = s(i(292))
        , P = s(i(293))
        , T = s(i(294))
        , S = s(i(295))
        , g = s(i(29))
        , I = s(i(5))
        , E = s(i(297))
        , k = s(i(298))
        , C = s(i(26))
        , R = s(i(299))
        , A = s(i(300))
        , U = s(i(33))
        , L = s(i(209))
        , M = function() {
          function e(t) {
              (0,
              r.default)(this, e),
              u.default.log("P2PPlayer version " + C.default.version),
              this.hyPlayer = t,
              this.stat = t.stat,
              this.tsdbUtil = t.tsdbUtil,
              this.G = new p.default,
              this.fastTimerInterval = 10,
              this.restartTimes = 0,
              this.resetProperty(),
              this.p2pStat = new T.default(this),
              this.qaStat = new P.default(this),
              this.playedStat = new _.default(this),
              this.wakeChecker = new E.default(t),
              this.url = null,
              this.info = null,
              this.player = null,
              this.sliceProtoHandler = new A.default,
              this.streamDomain = new R.default,
              this.p2pMgr = new S.default(this),
              this.loaderMgr = new y.default(this),
              this.userClose = new k.default(this)
          }
          return (0,
          o.default)(e, [{
              key: "getCdnip",
              value: function() {
                  return this.p2pMgr.stream ? this.p2pMgr.stream.stat.core.cdnip : this.streamDomain.cdnip
              }
          }, {
              key: "addHandler",
              value: function() {
                  this.sliceProtoHandler.on(v.default.PP2pSliceData, this.onFastSliceData, this)
              }
          }, {
              key: "delHandler",
              value: function() {
                  this.sliceProtoHandler.off(v.default.PP2pSliceData, this.onFastSliceData, this)
              }
          }, {
              key: "addTimer",
              value: function() {
                  l.default.add(this.onCheckTimer, this, 1e3),
                  l.default.add(this.onCheckFastTimer, this, this.fastTimerInterval)
              }
          }, {
              key: "delTimer",
              value: function() {
                  l.default.remove(this.onCheckTimer, this),
                  l.default.remove(this.onCheckFastTimer, this)
              }
          }, {
              key: "delTimerOnce",
              value: function() {
                  l.default.remove(this.playedStat.send, this),
                  l.default.remove(this.playTimeout, this),
                  l.default.remove(this.onFastTimeOver, this)
              }
          }, {
              key: "resetProperty",
              value: function() {
                  this.loadStream = !1,
                  this.started = !1,
                  this.startTs = 0,
                  this.loadTime = 0,
                  this.pauseStartTs = 0,
                  this.hasEmptyFrames = !1,
                  this.videoStatus = c.Status.VIDEO_STOP,
                  this.isEverSuccessPlayed = !1,
                  this.fastTimeOver = !1,
                  this.firstSlicePrinted = !1,
                  this.pauseCnt = 0,
                  this.pauseTime = 0,
                  this.pauseCnt5 = 0,
                  this.pauseTime5 = 0,
                  this.pauseCheckLock = !1,
                  this.loaderErrorTimes = 0
              }
          }, {
              key: "stop",
              value: function() {
                  this.started && (u.default.log("P2PPlayer.stop"),
                  this.p2pStat.reportFlow(),
                  this.delHandler(),
                  this.delTimer(),
                  this.delTimerOnce(),
                  this.loaderMgr.stop(),
                  this.p2pMgr.stop(),
                  this.disposePlayer(),
                  this.resetProperty())
              }
          }, {
              key: "destroy",
              value: function() {
                  this.stop(),
                  this.p2pMgr.destroy()
              }
          }, {
              key: "disposePlayer",
              value: function() {
                  this.player && (this.player.dispose(),
                  this.player = null)
              }
          }, {
              key: "resetRestart",
              value: function() {
                  this.loaderMgr.reset(),
                  this.disposePlayer(),
                  this.loadStream = !1,
                  this.startTs = 0,
                  this.loadTime = 0,
                  this.pauseCnt = 0,
                  this.pauseTime = 0,
                  this.pauseCnt5 = 0,
                  this.pauseTime5 = 0,
                  this.pauseStartTs = 0,
                  this.pauseCheckLock = !1,
                  this.hasEmptyFrames = !1,
                  this.firstSlicePrinted = !1,
                  this.isEverSuccessPlayed = !1,
                  this.videoStatus = c.Status.VIDEO_STOP,
                  this.loaderErrorTimes = 0,
                  this.qaStat.isFirstReport = !0
              }
          }, {
              key: "removeTimer",
              value: function() {
                  l.default.remove(this.onCheckTimer, this),
                  l.default.remove(this.onCheckFastTimer, this),
                  l.default.remove(this.playTimeout, this),
                  l.default.remove(this.onFastTimeOver, this)
              }
          }, {
              key: "resetGlobal",
              value: function() {
                  var e = this.G;
                  e.streamSeqSN = 0,
                  e.quickAccessBeginIndex = 0,
                  e.quickAccessEndIndex = 0,
                  e.quickTime = 0,
                  e.exip = 0,
                  e.sslUrl = "",
                  e.myIp = "",
                  e.wanIp = "",
                  e.wanPort = 0,
                  e.cdnpConnected = 0
              }
          }, {
              key: "reset",
              value: function(e) {
                  u.default.group("P2PPlayer.reset"),
                  this.resetRestart(),
                  this.wakeChecker.reset(),
                  this.removeTimer(),
                  this.resetGlobal(),
                  this.p2pMgr.stop(e),
                  this.stat.reset(),
                  this.p2pStat.reset(),
                  u.default.groupEnd()
              }
          }, {
              key: "start",
              value: function(e) {
                  var t = (0,
                  n.default)(e).replace(/\,/g, "\n").replace(/[\"\{\}]/g, "");
                  if (!(e.sP2pUrl && e.sStreamName && e.sFlvUrl && e.sFlvAntiCode && void 0 !== e.curBitrate && void 0 !== e.lineType))
                      return console.error("P2PPlayer.start P2P参数不完整，跳转至FLV！\n" + t),
                      void this.turnToFlv(g.default.turnToFlvReason.P2P_ARGS_ERROR, !0);
                  u.default.log("P2PPlayer.start \n" + t),
                  this.stop(),
                  this.info = e,
                  this.started = !0,
                  this.startTs = d.default.now(),
                  this.stat.setComDim(f.default.DIM_COM.ORIGINAL_BITRATE, 0 === e.originalBitrate ? 1 : 0),
                  this.stat.setComDim(f.default.DIM_COM.P2P, f.default.LIVE_TYPE.P2P);
                  var i = this.G;
                  i.isStartFromUrl = !1,
                  (0,
                  a.default)(i, e),
                  i.initUid(this.hyPlayer.uuid),
                  i.streamId = this.createStreamId(Number(e.iIsP2PSupport)),
                  e.sP2pUrl = this.streamDomain.initDomain(e.sP2pUrl, e.domainList ? e.domainList.slice() : []),
                  this.statDomain(),
                  this.loaderMgr.init(e.sP2pUrl, e.sFlvAntiCode),
                  this.player = new m.default(this),
                  this.checkAud(),
                  this.quickAccessVideoOnly(),
                  this.addHandler(),
                  this.addTimer(),
                  this.playedStat.sended || l.default.once(this.playedStat.send, this.playedStat, 1e4),
                  l.default.once(this.playTimeout, this, 4e3),
                  this.wakeChecker.startWakeTimeoutChecker()
              }
          }, {
              key: "checkAud",
              value: function() {
                  this.hyPlayer.isNeedAud() ? this.player.msePlayer.setDeleteH264Aud(-1 === U.default.deleteH264Aud.indexOf(this.G.presenterUid) ? 0 : 1) : this.player.msePlayer.setDeleteH264Aud(0)
              }
          }, {
              key: "changeDomain",
              value: function() {
                  var e = this.streamDomain.changeDomain();
                  return e && (this.info.sP2pUrl = this.streamDomain.sP2pUrl),
                  this.statDomain(),
                  e
              }
          }, {
              key: "setEnableLowLatency",
              value: function(e) {
                  this.player && this.player.msePlayer.setEnableLowLatency(e)
              }
          }, {
              key: "statDomain",
              value: function() {
                  "" === this.streamDomain.cdnip ? this.stat.delDim(f.default.DIM_EXT.CDN_IP) : this.stat.setExtDim(f.default.DIM_EXT.CDN_IP, this.streamDomain.cdnip)
              }
          }, {
              key: "getCurrentTime",
              value: function() {
                  return this.player ? this.player.getCurrentRealTime() : 0
              }
          }, {
              key: "playTimeout",
              value: function() {
                  var e = 0
                    , t = 0;
                  this.isPlaying ? (this.p2pStat.printLoadFail(!1),
                  e = 100) : (this.p2pStat.printLoadFail(!0),
                  this.p2pStat.p2pState = 0,
                  t = this.tsdbUtil.httpError ? 1 : 2);
                  var i = [{
                      sMetricName: h.default.METRIC.WEB_P2P_LOAD_RATIO,
                      vField: {
                          value: e
                      },
                      vDimension: {
                          success: t
                      }
                  }];
                  i.push(this.stat.createAct(f.default.ACT.P2P_LOAD_VIDEO, {
                      value: [e, t]
                  })),
                  this.tsdbUtil.sendMetrics(i)
              }
          }, {
              key: "onRenderTimeout",
              value: function() {
                  this.started && !this.isPlaying && (u.default.warn("VideoLoader.onRenderTimeout"),
                  this.turnToFlv(g.default.turnToFlvReason.FULL_PLAY_FAIL),
                  this.loaderErrorTimes++)
              }
          }, {
              key: "turnToFlv",
              value: function(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                  (this.started || t) && (u.default.warn("P2PPlayer.turnToFlv reason=" + e),
                  this.tsdbUtil.turnToFlvReason = e,
                  this.tsdbUtil.turnToFlvTimes++,
                  this.stop(),
                  this.hyPlayer.trigger(c.Event.P2P_TIMEOUT))
              }
          }, {
              key: "quickAccessVideoOnly",
              value: function() {
                  var e = this.G
                    , t = d.default.now();
                  e.initUseTime(t),
                  e.quickTime = 2e3,
                  e.quickAccessBeginIndex = e.exip = 0,
                  this.loadFullStream("quickTime"),
                  l.default.once(this.onFastTimeOver, this, Number(U.default.fastTime))
              }
          }, {
              key: "onFastTimeOver",
              value: function() {
                  this.fastTimeOver = !0,
                  this.checkStartP2P()
              }
          }, {
              key: "checkStartP2P",
              value: function() {
                  this.fastTimeOver && this.videoStatus !== c.Status.VIDEO_STOP && (this.loaderMgr.stopFullStream(),
                  this.p2pMgr.start())
              }
          }, {
              key: "startP2PUrl",
              value: function(e) {
                  u.default.log("P2PPlayer.startP2PUrl " + e),
                  this.hyPlayer.playingMgr = this,
                  this.reset(L.default.KEEP),
                  l.default.add(this.onCheckTimer, this, 1e3),
                  l.default.add(this.onCheckFastTimer, this, this.fastTimerInterval);
                  var t = this.G;
                  t.isStartFromUrl = !0,
                  this.url = e,
                  this.started = !0,
                  this.startTs = d.default.now(),
                  this.player = new m.default(this),
                  t.initUseTime(this.startTs),
                  t.getVPTime = this.startTs,
                  t.connectVpTime = this.startTs,
                  t.connectVideoTime = this.startTs,
                  t.loginTime = this.startTs,
                  this.loaderMgr.fullLoader.connect(e)
              }
          }, {
              key: "onRestart",
              value: function(e) {
                  u.default.log("%cCdnMgr.restart", "background:#FFBFFF", e),
                  this.checkSendRestart(e);
                  var t = this.G;
                  if (e === g.default.restartReason.FLV_TO_P2P || t.isStartFromUrl)
                      t.isStartFromUrl ? this.startP2PUrl(this.url) : this.start(this.info);
                  else {
                      if (this.restartTimes >= 5)
                          return void this.turnToFlv(g.default.turnToFlvReason.RESTART_TIMES);
                      this.restartTimes++,
                      this.p2pStat.reportFlow(),
                      this.loaderMgr.stopFullStream(),
                      this.disposePlayer(),
                      this.resetProperty(),
                      this.p2pMgr.onRestart(),
                      this.started = !0,
                      this.player = new m.default(this),
                      this.quickAccessVideoOnly()
                  }
              }
          }, {
              key: "checkSendRestart",
              value: function(e) {
                  if (e) {
                      this.tsdbUtil.restartReason = e,
                      this.tsdbUtil.restartTimes++;
                      var t = !0;
                      if (e === g.default.restartReason.LOST_SEQ_JUMP || e === g.default.restartReason.CONNECT) {
                          var i = d.default.now();
                          this.restartStamp > 0 && i - this.restartStamp < 2e4 && (t = !1),
                          this.restartStamp = i
                      }
                      if (t) {
                          var s = [{
                              sMetricName: h.default.METRIC.WEB_P2P_CDN_RESTART,
                              vDimension: {
                                  success: e
                              }
                          }];
                          s.push(this.stat.createAct(f.default.ACT.P2P_RESTART, {
                              value: [e]
                          })),
                          this.tsdbUtil.sendMetrics(s)
                      }
                  }
              }
          }, {
              key: "setConfig",
              value: function(e, t) {
                  this.hyPlayer.setConfig(e, t)
              }
          }, {
              key: "getConfig",
              value: function(e) {
                  return this.hyPlayer.getConfig(e)
              }
          }, {
              key: "setPlaybackrateAccess",
              value: function(e) {
                  this.player && this.player.setPlaybackrateAccess(e)
              }
          }, {
              key: "createStreamId",
              value: function(e) {
                  e = e > 1 ? e : 0;
                  var t = this.info.sStreamName
                    , i = Number(this.info.bitrate);
                  -1 !== U.default.useChangeRate.indexOf(this.info.presenterUid) && (i = this.info.curBitrate),
                  i > 0 && i % 100 == 0 && (i = i <= 8e3 ? i / 100 + 400 | 0 : i / 100 + 1e3 | 0);
                  var s = new I.default;
                  return s.streamName = t,
                  s.codecType = i,
                  s.cdnBrand = e,
                  s
              }
          }, {
              key: "loadFullStream",
              value: function(e) {
                  this.loadStream || (u.default.log("%cQuickAccess from " + e, "background:#FFBFFF"),
                  this.loadStream = !0,
                  this.loaderMgr.loadFullStream(this.G.quickAccessBeginIndex))
              }
          }, {
              key: "onFastSliceData",
              value: function(e) {
                  this.p2pMgr && this.p2pMgr.onFastSliceData(e),
                  this.onSliceData(e)
              }
          }, {
              key: "onSliceData",
              value: function(e) {
                  var t = e.parent.uri === v.default.PP2pSliceVideoData;
                  if (e.parent.uri === v.default.PP2pSliceAudioData || t) {
                      if (!this.firstSlicePrinted) {
                          this.firstSlicePrinted = !0;
                          var i = "%cFirst Slice isVideo=" + t + " seq=" + e.parent.seq;
                          u.default.log(i, "background:#FFBFFF")
                      }
                      t ? this.player.onVideoStreamData(e.child) : this.player.onAudioStreamData(e.child)
                  }
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  t % 10 == 0 && (this.restartTimes = 0),
                  this.player && this.player.onCheckTimer(e, t),
                  this.p2pStat.onCheckTimer(e, t);
                  var i = this.G;
                  if (i.globalSpeedCalc.calculate(),
                  t % (Number(localStorage._speedPrintRate) || 20) == 0) {
                      var s = i.curBitrate / 8
                        , a = this.getGlobalSpeed();
                      u.default.log("P2PPlayer.onCheckTimer avgSpeed=" + a + "KB/s expectSpeed=" + s + "KB/s")
                  }
                  if (t % 20 == 0) {
                      if (this.pauseStartTs > 0) {
                          var n = e - this.pauseStartTs;
                          n > 200 && (this.pauseTime += n,
                          this.pauseStartTs = e,
                          t % 300 == 0 && (this.pauseTime5 += n))
                      }
                      this.loaderErrorTimes,
                      this.loaderErrorTimes = 0;
                      var r = this.player.getStat();
                      this.p2pStat.record.dropFrames = r.dropFrames,
                      this.p2pStat.record.playedFrames = r.playedFrames,
                      this.p2pStat.record.dtsJumpPauseTimes = r.dtsJumpPauseTimes,
                      this.p2pStat.record.skipFramePauseTimes = r.skipFramePauseTimes;
                      var o = r.dropFrames;
                      this.p2pStat.record.fullFrameRatio = 0 == o ? 100 : 0,
                      this.stat.setComp(f.default.FRAME_INFO.name, f.default.FRAME_INFO.LOSS_FRAMES, r.dropFrames),
                      this.stat.setComp(f.default.FRAME_INFO.name, f.default.FRAME_INFO.PLAY_FRAMES, r.playedFrames),
                      this.stat.setComp(f.default.FRAME_INFO.name, f.default.FRAME_INFO.DTS_JUMPPAUSE_CNT, r.dtsJumpPauseTimes),
                      this.stat.setComp(f.default.FRAME_INFO.name, f.default.FRAME_INFO.SKIP_PAUSE_CNT, r.skipFramePauseTimes),
                      this.stat.setComp(f.default.FRAME_INFO.name, f.default.FRAME_INFO.FULL_RATIO, 0 == o ? 100 : 0);
                      var l = this.pauseStartTs > 0;
                      this.qaStat.record(t, this.pauseCnt, this.pauseTime, l, 0, r.forceSkipFrameNums),
                      this.qaStat.hasEmptyFrames = this.hasEmptyFrames,
                      this.pauseCnt = 0,
                      this.pauseTime = 0
                  }
                  t % 300 == 0 && (this.tsdbUtil.sendMetrics([{
                      sMetricName: h.default.METRIC.VIDEO_VIDEO_BAD_QUALITY_5M_RATIO,
                      vField: {
                          value: this.pauseCnt5 > 0 ? 100 : 0
                      }
                  }]),
                  this.pauseCnt5 = 0,
                  this.pauseTime5 = 0)
              }
          }, {
              key: "onCheckFastTimer",
              value: function(e, t) {
                  this.started && (this.wakeChecker.onCheckFastTimer(e, t),
                  this.player && this.player.onCheckFastTimer(e, t),
                  !this.pauseCheckLock && this.pauseStartTs > 0 && e - this.pauseStartTs > 200 && (this.pauseCheckLock = !0))
              }
          }, {
              key: "getGlobalSpeed",
              value: function() {
                  var e = this.G.globalSpeedCalc.average();
                  return e = Math.round(e / 1024)
              }
          }, {
              key: "isLowNet",
              value: function() {
                  var e = this.G.curBitrate / 8;
                  return this.getGlobalSpeed() < e - 20
              }
          }, {
              key: "setVolume",
              value: function(e) {
                  this.player && this.player.msePlayer.setVolume(e)
              }
          }, {
              key: "setMuted",
              value: function(e) {
                  this.player && this.player.msePlayer.setMuted(e)
              }
          }, {
              key: "getMuted",
              value: function() {
                  return this.player ? this.player.msePlayer.getMuted() : -1
              }
          }, {
              key: "onPlayVideo",
              value: function(e, t, i, s) {
                  this.p2pStat.recordPlayBuf(),
                  this.p2pMgr.loadLib(),
                  this.checkStartP2P();
                  var a = this.G
                    , n = d.default.now();
                  0 !== this.startTs && (a.onPlayTime = n,
                  u.default.log("%c[TIME] onPlayTime=" + (n - a.firstRenderTime) + " totalTime=" + (n - a.startTime), "color:#A23400;background:#FFF5C2")),
                  e.autoplay = !0,
                  this.setVolume(this.hyPlayer.getVolume()),
                  this.hyPlayer.trigger(c.Event.VIDEO_PLAY, {
                      video: e,
                      width: t,
                      height: i,
                      hasVideo: s
                  }),
                  0 !== this.startTs ? (this.loadTime = n - this.startTs,
                  this.tsdbUtil.sendCdnTime(a, !0),
                  u.default.log("%cCdnMgr.onPlayVideo w/h=" + t + "/" + i + " loadTime=" + this.loadTime, "color:#A23400;background:#FFF5C2"),
                  this.startTs = 0,
                  a.printUseTime()) : u.default.log("P2PPlayer.onPlayVideo w/h=" + t + "/" + i),
                  this.isEverSuccessPlayed = !0,
                  this.updateStatus(c.Status.VIDEO_PLAYING)
              }
          }, {
              key: "onVideoStop",
              value: function(e, t) {
                  u.default.log("P2PPlayer.onVideoStop hasVideo=" + t),
                  t && (this.updateStatus(c.Status.VIDEO_STOP),
                  this.hyPlayer.trigger(c.Event.VIDEO_STOP, {
                      video: e,
                      haveVideo: !0
                  }))
              }
          }, {
              key: "onSendSeiData",
              value: function(e) {
                  this.hyPlayer.trigger(c.Event.H264_SEI_PLAY, {
                      data: e
                  })
              }
          }, {
              key: "onSendScriptVolumeInfo",
              value: function(e, t) {
                  this.hyPlayer.trigger(c.Event.UPDATE_INTERSITY, {
                      uid: e,
                      intensity: t
                  })
              }
          }, {
              key: "onPlayerError",
              value: function(e) {
                  e && (this.tsdbUtil.restartReason = g.default.restartReason.PLAYER_ERROR,
                  this.hyPlayer.trigger(c.Event.H5_PLAYER_ERROR)),
                  this.pauseStartTs = 0
              }
          }, {
              key: "onErrorEvent",
              value: function(e) {
                  if (3 === e.type) {
                      var t = this.player.getStat()
                        , i = t.dropFrames
                        , s = t.playedFrames;
                      u.default.log("P2PPlayer onErrorEvent dropFrames", i, "playedFrames", s)
                  }
                  var a = [{
                      sMetricName: h.default.METRIC.WEB_P2P_PLAY_FAIL,
                      vDimension: {
                          success: e.type
                      },
                      vField: {
                          frames: this.player.videoChain.size
                      }
                  }];
                  a.push(this.stat.createAct(f.default.ACT.P2P_PLAY_FAIL, {
                      value: [e.type, this.bufferLen]
                  })),
                  this.tsdbUtil.sendMetrics(a)
              }
          }, {
              key: "onPlayPause",
              value: function(e, t) {
                  this.pauseStartTs = e,
                  this.pauseCheckLock = !1,
                  t && this.updateStatus(c.Status.VIDEO_CACHING)
              }
          }, {
              key: "onPlayResume",
              value: function(e, t) {
                  if (this.pauseStartTs) {
                      var i = e - this.pauseStartTs;
                      i > 200 && (u.default.warn("P2PPlayer.onPlayResume pauseTime=" + i),
                      this.pauseCnt++,
                      this.pauseTime += i,
                      this.pauseCnt5++,
                      this.pauseTime5 += i),
                      this.pauseStartTs = 0
                  }
                  t && this.updateStatus(c.Status.VIDEO_PLAYING)
              }
          }, {
              key: "updateStatus",
              value: function(e) {
                  this.videoStatus !== e && (this.videoStatus = e,
                  this.hyPlayer.trigger(c.Event.PLAY_STATUS, {
                      status: e
                  }))
              }
          }, {
              key: "streamName",
              get: function() {
                  return this.info ? this.info.sStreamName : ""
              }
          }, {
              key: "isPlaying",
              get: function() {
                  return this.videoStatus !== c.Status.VIDEO_STOP
              }
          }, {
              key: "bufferLen",
              get: function() {
                  return this.player ? this.player.getBufferLen() : 0
              }
          }, {
              key: "configs",
              get: function() {
                  return this.hyPlayer.config
              }
          }]),
          e
      }();
      t.default = M
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = s(i(26))
        , u = s(i(204))
        , l = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.p2pPlayer = t,
              this.resetProperty(),
              this.fullLoader = new u.default(this)
          }
          return (0,
          n.default)(e, [{
              key: "init",
              value: function(e, t) {
                  this.p2pUrl = e,
                  this.antiCode = t;
                  var i = this.p2pPlayer.G;
                  if (!i.isStartFromUrl) {
                      "/" === this.p2pUrl.substr(-1) && (this.p2pUrl = this.p2pUrl.substr(0, this.p2pUrl.length - 1)),
                      this.p2pUrl = this.p2pUrl.replace(/^(http|ws)s?\:/i, ""),
                      this.streamName = i.streamId.text() + "_" + o.default.appid;
                      var s = !0;
                      if (-1 === self.location.protocol.indexOf("https")) {
                          var a = this.p2pPlayer.getConfig("p2pWssLines");
                          "string" == typeof a && (s = "all" == (a = a.toLowerCase()) || -1 != a.split(",").indexOf(i.lineType.toString()))
                      } else
                          s = !0;
                      void 0 === localStorage._testSSL ? this.openWss = s : this.openWss = Number(localStorage._testSSL) > 0
                  }
              }
          }, {
              key: "stop",
              value: function() {
                  r.default.log("LoaderMgr.stop"),
                  this.stopFullStream(),
                  this.resetProperty()
              }
          }, {
              key: "resetProperty",
              value: function() {
                  this.p2pUrl = null,
                  this.antiCode = "",
                  this.streamName = "",
                  this.openWss = !0
              }
          }, {
              key: "getUrl",
              value: function(e) {
                  var t = e === u.default.TYPE_RANGE || e === u.default.TYPE_FULL ? "http" : "ws";
                  this.openWss && (t += "s");
                  var i = ""
                    , s = this.p2pPlayer.G;
                  return this.p2pUrl.match(/al\.p2p\.huya\.com/) && e != u.default.TYPE_RANGE && e != u.default.TYPE_FULL && (i = "/websocket"),
                  this.url = t + ":" + this.p2pUrl + i + "/" + this.streamName + ".slice?" + this.antiCode + "&ex1=" + s.exip + "&baseIndex=",
                  this.url
              }
          }, {
              key: "loadFullStream",
              value: function(e) {
                  var t = this.p2pPlayer.G
                    , i = "";
                  isNaN(e) ? (r.default.error("LoaderMgr.loadSubStream baseIndex isNaN [" + e + "] change to 0."),
                  e = 0) : 0 == e && t.quickTime > 0 && (i = "&quickTime=" + t.quickTime);
                  var s = this.getUrl(u.default.TYPE_FULL) + e + i;
                  this.fullLoader.connect(s, t.lineType),
                  this.p2pPlayer.qaStat.setHttpHead(s)
              }
          }, {
              key: "stopFullStream",
              value: function() {
                  this.fullLoader.close()
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(2))
        , o = s(i(90))
        , u = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.loaderHandler = t,
              this.reset()
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.u8arr = new Uint8Array(0)
              }
          }, {
              key: "onData",
              value: function(e) {
                  var t = this.u8arr
                    , i = new Uint8Array(e);
                  0 === t.length ? this.u8arr = i : (this.u8arr = new Uint8Array(t.length + i.length),
                  this.u8arr.set(t, 0),
                  this.u8arr.set(i, t.length));
                  var s = this.onProto(this.u8arr);
                  s > 0 && (this.u8arr = this.u8arr.slice(s))
              }
          }, {
              key: "onProto",
              value: function(e) {
                  for (var t = new DataView(e.buffer), i = 0, s = 0, a = void 0, n = void 0, u = void 0, l = void 0, d = void 0; i + 10 < e.byteLength; ) {
                      if ((s = t.getUint16(i + 8, !0)) < 10)
                          return this.loaderHandler.onProtoError(s),
                          i;
                      if (i + s > e.byteLength)
                          return i;
                      u = t.getUint32(i, !0),
                      l = 4294967296 * t.getUint32(i + 4, !0) + u,
                      d = t.getUint32(i + 14, !0),
                      n = e.slice(i + 10, i + s),
                      (a = new o.default).seq = l,
                      a.uri = d,
                      a.payload = n,
                      this.loaderHandler.onSlice(r.default.PP2pSliceData, a),
                      i += s
                  }
                  return i
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(158))
        , n = s(i(281))
        , r = s(i(0))
        , o = s(i(1))
        , u = s(i(4))
        , l = s(i(8))
        , d = s(i(6))
        , h = s(i(24))
        , f = s(i(25))
        , c = s(i(205))
        , p = s(i(29))
        , v = s(i(287))
        , y = s(i(288))
        , m = s(i(66))
        , _ = i(12)
        , P = s(i(289))
        , T = s(i(290))
        , S = s(i(108))
        , g = s(i(109))
        , I = function() {
          function e(t) {
              (0,
              r.default)(this, e),
              this.p2pPlayer = t,
              this.PrintSkipFrame = !!Number(localStorage._printSkipFrame2),
              this.flvHeader = y.default.getFlvHeader(),
              this.msePlayer = new m.default(this.p2pPlayer,"yy"),
              this.msePlayer.appendFlv(this.flvHeader),
              this.msePlayer.setPushGop(t.getConfig("pushGop")),
              this.metadataTick = new g.default(t.hyPlayer,this.msePlayer),
              this.isAudioFrameTimeLenInited = !1,
              this.audioFrameTimeLen = v.default.MUSIC_MID_TIME_LEN,
              this.FIRST_TS_INIT = -1,
              this.FIRST_TS_AUDIO = 0,
              this.FIRST_TS_VIDEO = 2,
              this.firstTsStatus = this.FIRST_TS_INIT,
              this.firstTs = 0,
              this.firstOsTs = 0,
              this.lastLoopTs = 0,
              this.lastPlayTs = 0,
              this.lastPlayDts = 0,
              this.lastPlayVideoSeq = 0,
              this.lastPlayVideoKey = 0,
              this.lastPlayAudioKey = 0,
              this.aacConfig = null,
              this.avcConfig = null,
              this.lastATs = 0,
              this.vFrameId = 0,
              this.aFrameId = 0,
              this.videoChain = new c.default,
              this.audioChain = new c.default,
              this.dropFrames = 0,
              this.playedFrames = 0,
              this.dtsJumpPauseTimes = 0,
              this.skipFramePauseTimes = 0,
              this.forceSkipFrameNums = 0,
              this.JitterBufLen = Math.max(1e3, t.getConfig("jitBufLen")),
              this.JitterMaxBufLen = Math.max(5e3, t.getConfig("jitMaxBufLen")),
              this.JitterMinBufLen = Math.max(1e3, t.getConfig("jitMinBufLen")),
              u.default.log("VideoPlayer jitBufLen=" + this.JitterBufLen),
              this.msePlayer.setJitter(this.JitterBufLen, this.JitterMinBufLen, this.JitterMaxBufLen),
              this.lastRecvTs = 0,
              this.STOP_TIMEOUT = 2e4,
              this.resendTs = -1,
              this.waitFrameKey = 0,
              this.lastResendKey = 0,
              this.perFrameTs = 0,
              this.perFrameTsCalc = new f.default(100),
              this.nextFrameWaitingTime = 5e3,
              this.nextFrameResendTs = 0,
              this.isDispose = !1,
              this.printSubInfo = 1 === Number(localStorage._printSubInfo),
              this.lastPutAudioKey = 0
          }
          return (0,
          o.default)(e, [{
              key: "dispose",
              value: function() {
                  u.default.info("VideoPlayer.dispose"),
                  this.msePlayer && (this.msePlayer.destroy(),
                  this.msePlayer = null),
                  this.resetVideo(),
                  this.isDispose = !0
              }
          }, {
              key: "resetVideo",
              value: function() {
                  this.lastRecvTs && u.default.info("VideoPlayer.resetVideo"),
                  this.lastRecvTs = 0,
                  this.p2pPlayer.updateStatus(_.Status.VIDEO_STOP),
                  this.videoChain.reset(),
                  this.audioChain.reset(),
                  this.dropFrames = 0,
                  this.playedFrames = 0,
                  this.dtsJumpPauseTimes = 0,
                  this.skipFramePauseTimes = 0,
                  this.forceSkipFrameNums = 0,
                  this.nextFrameResendTs = 0,
                  this.forceSkipFrameNums = 0,
                  this.vFrameId = 0,
                  this.aFrameId = 0,
                  this.firstTs = 0,
                  this.firstOsTs = 0,
                  this.firstTsStatus = this.FIRST_TS_INIT,
                  this.lastLoopTs = 0,
                  this.lastPlayTs = 0,
                  this.lastPlayDts = 0,
                  this.lastPlayVideoKey = 0,
                  this.lastPlayVideoSeq = 0,
                  this.lastPlayAudioKey = 0,
                  this.resendTs = -1,
                  this.waitFrameKey = 0,
                  this.lastResendKey = 0,
                  this.perFrameTs = 0,
                  this.lastPutAudioKey = 0,
                  this.perFrameTsCalc.reset(),
                  this.metadataTick.reset(),
                  this.msePlayer && this.resetMsePlayer()
              }
          }, {
              key: "setLastPlayVideoSeq",
              value: function(e) {
                  this.lastPlayVideoSeq = e,
                  this.p2pPlayer.p2pMgr.setLastPlaySeq(e)
              }
          }, {
              key: "resetMsePlayer",
              value: function() {
                  u.default.log("VideoPlayer.resetMsePlayer");
                  var e = void 0
                    , t = void 0;
                  null !== this.msePlayer && (e = this.msePlayer.getWidth(),
                  t = this.msePlayer.getHeight(),
                  this.msePlayer.destroy()),
                  this.msePlayer = new m.default(this.p2pPlayer,"yy"),
                  this.msePlayer.appendFlv(this.flvHeader),
                  e && t && this.msePlayer.setResolution(e, t),
                  this.msePlayer.setJitter(this.JitterBufLen),
                  this.msePlayer.setPushGop(this.p2pPlayer.getConfig("pushGop")),
                  this.aacConfig = null,
                  this.avcConfig = null,
                  this.metadataTick && (this.metadataTick.mse = this.msePlayer)
              }
          }, {
              key: "getStat",
              value: function() {
                  var e = {
                      dropFrames: this.dropFrames,
                      playedFrames: this.playedFrames,
                      dtsJumpPauseTimes: this.dtsJumpPauseTimes,
                      skipFramePauseTimes: this.skipFramePauseTimes,
                      forceSkipFrameNums: this.forceSkipFrameNums
                  };
                  return this.dropFrames = 0,
                  this.playedFrames = 0,
                  this.dtsJumpPauseTimes = 0,
                  this.skipFramePauseTimes = 0,
                  this.forceSkipFrameNums = 0,
                  e
              }
          }, {
              key: "setPlaybackrateAccess",
              value: function(e) {
                  this.msePlayer.setPlaybackrateAccess(e)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  this.isDispose || (this.msePlayer && this.msePlayer.onCheckTimer(e, t),
                  this.perFrameTs = this.perFrameTsCalc.average(),
                  this.perFrameTs == l.default.UintMax && (this.perFrameTs = 0),
                  this.metadataTick.onCheckTimer(e, t))
              }
          }, {
              key: "onCheckFastTimer",
              value: function(e, t) {
                  this.isDispose || (this.msePlayer && t % 10 == 0 && this.msePlayer.onCheckFastTimer(e, t),
                  this.play2(e, t))
              }
          }, {
              key: "checkVideoPushPlay",
              value: function(e) {
                  if (!this.lastPlayTs)
                      for (var t = this.videoChain.head, i = 0; null !== t; ) {
                          var s = t.data;
                          if (s.isFull)
                              if (0 === i)
                                  s.dts === this.firstTs && (i = s.dts);
                              else if (s.dts - i >= 230) {
                                  var a = 230 + this.JitterBufLen - (e - this.firstOsTs);
                                  return this.firstOsTs -= a,
                                  void u.default.log("VideoPlayer.checkVideoPushPlay start=" + i + " end=" + s.dts + " firstOsTs=" + this.firstOsTs + " elapseTime=" + (e - this.firstOsTs) + " modifyTime=" + a)
                              }
                          (t = t.next) === this.videoChain.head && (t = null)
                      }
              }
          }, {
              key: "checkAudioPushPlay",
              value: function(e) {
                  if (!this.lastPlayTs)
                      for (var t = this.audioChain.head, i = 0; null !== t; ) {
                          var s = t.data;
                          if (0 === i)
                              i = s.dts;
                          else if (s.dts - i >= 500) {
                              var a = 500 + this.JitterBufLen - (e - this.firstOsTs);
                              return this.firstOsTs -= a,
                              void u.default.log("VideoPlayer.checkAudioPushPlay start=" + i + " end=" + s.dts + " firstOsTs=" + this.firstOsTs)
                          }
                          (t = t.next) === this.audioChain.head && (t = null)
                      }
              }
          }, {
              key: "play",
              value: function(e, t) {
                  if (this.firstTsStatus !== this.FIRST_TS_INIT && !(this.lastLoopTs > 0 && e - this.lastLoopTs < 20)) {
                      this.lastLoopTs = e,
                      this.firstTsStatus == this.FIRST_TS_VIDEO ? this.checkVideoPushPlay(e) : this.firstTsStatus == this.FIRST_TS_AUDIO && this.checkAudioPushPlay(e);
                      var i = e - this.firstOsTs;
                      if (!(i < this.JitterBufLen)) {
                          var s = this.firstTs + i - this.JitterBufLen;
                          this.checkSkipFrames(e);
                          for (var a = l.default.UintMax, n = null, r = this.videoChain.head; null !== r; ) {
                              if ((n = r.data).isFull && n.dts >= this.firstTs) {
                                  a = n.dts;
                                  break
                              }
                              (r = r.next) === this.videoChain.head && (r = null)
                          }
                          var o = !!Number(this.p2pPlayer.getConfig("urgentResend"));
                          if (o && r && r != this.videoChain.head) {
                              if (-1 == this.resendTs)
                                  return void (0 == this.lastPlayTs ? this.p2pPlayer.turnToFlv(p.default.turnToFlvReason.FLV_TO_P2P_FULL_STREAM_COMPLETE, !0) : (this.resendTs,
                                  0 == this.nextFrameResendTs && (this.nextFrameResendTs = e),
                                  this.tryResend()));
                              if (this.resendTs > 0 && e - this.resendTs < 200)
                                  return;
                              this.PrintSkipFrame && u.default.warn("VideoPlayer.play wait nothing")
                          }
                          this.resendTs = -1;
                          for (var d = this.lastPlayAudioKey + 1, h = this.getNextATs(), f = (this.getBufferLen(),
                          this.getPlayTime()), c = f > 0 && h - f > 400; a <= s || h <= s; )
                              if (h <= a) {
                                  var v = this.audioChain.peek();
                                  if (null !== v) {
                                      var y = v.key - d
                                        , m = v.dts - h;
                                      if (m <= -1 * this.audioFrameTimeLen) {
                                          this.audioChain.get();
                                          continue
                                      }
                                      m > (0 === y ? 10 : .5) * this.audioFrameTimeLen && (v = this.getEmptyAudioFrame(h, d))
                                  } else {
                                      if (c)
                                          break;
                                      v = this.getEmptyAudioFrame(h, d)
                                  }
                                  this.playAudio(v, e, h),
                                  d = this.lastPlayAudioKey + 1,
                                  h = this.getNextATs()
                              } else if ((n = r.data).isFull && n.key > this.lastPlayVideoKey && (0 == n.key - this.lastPlayVideoKey - 1 || n.isKeyFrame) && this.playVideo(n, e),
                              (r = r.next) === this.videoChain.head)
                                  a = l.default.UintMax;
                              else if ((n = r.data).isFull)
                                  a = n.dts;
                              else if (o && this.waitFrameKey < n.key) {
                                  this.waitFrameKey = n.key,
                                  this.PrintSkipFrame && u.default.log("---------- waitFrameKey", this.waitFrameKey);
                                  break
                              }
                          for (var _ = 0; null !== (n = this.videoChain.peek()) && n.key <= this.lastPlayVideoKey; )
                              (n = this.videoChain.get()).isFull && n.played || _++;
                          _ > 0 && (this.dropFrames += _,
                          u.default.log("VideoPlayer.play dropVideoFrame=" + _)),
                          s > this.lastPlayTs && (this.lastPlayTs = s),
                          this.playAsMoreAsPossible(s, e)
                      }
                  }
              }
          }, {
              key: "playAsMoreAsPossible",
              value: function(e, t) {
                  for (var i = null, s = null, a = 0, n = 0, r = 0; null !== (i = this.videoChain.peek()) && (a = i.stamp,
                  i.isFull && i.key === this.lastPlayVideoKey + 1); ) {
                      for (var o = !0; n = this.getNextATs(),
                      r = this.lastPlayAudioKey + 1,
                      !(n > a); ) {
                          if (null === (s = this.audioChain.peek())) {
                              o = !1;
                              break
                          }
                          if (s.key !== r) {
                              o = !1;
                              break
                          }
                          var l = s.dts - n;
                          if (l < -10 * this.audioFrameTimeLen) {
                              u.default.warn("VideoPlayer.playAsMoreAsPossible audioFrame key continue but dts smaller, curAts:" + n + " audio dts:" + s.dts),
                              this.audioChain.get(),
                              o = !1;
                              break
                          }
                          if (l >= 3 * this.audioFrameTimeLen) {
                              o = !1;
                              break
                          }
                          this.playAudio(s, t, n)
                      }
                      if (!o)
                          break;
                      this.playVideo(i, t),
                      i = this.videoChain.get()
                  }
              }
          }, {
              key: "play2",
              value: function(e, t) {
                  if (this.firstTsStatus !== this.FIRST_TS_INIT && !(this.lastLoopTs > 0 && e - this.lastLoopTs < 20)) {
                      this.lastLoopTs = e,
                      this.firstTsStatus == this.FIRST_TS_VIDEO ? this.checkVideoPushPlay(e) : this.firstTsStatus == this.FIRST_TS_AUDIO && this.checkAudioPushPlay(e);
                      var i = e - this.firstOsTs;
                      if (!(i < this.JitterBufLen)) {
                          var s = this.firstTs + i - this.JitterBufLen;
                          this.checkSkipFrames(e);
                          for (var a = l.default.UintMax, n = null, r = this.videoChain.head; null !== r; ) {
                              if ((n = r.data).isFull && n.dts >= this.firstTs) {
                                  a = n.dts;
                                  break
                              }
                              (r = r.next) === this.videoChain.head && (r = null)
                          }
                          var o = !!Number(this.p2pPlayer.getConfig("urgentResend"));
                          if (o && r && r != this.videoChain.head) {
                              if (-1 == this.resendTs)
                                  return void (0 == this.lastPlayTs ? this.p2pPlayer.turnToFlv(p.default.turnToFlvReason.FLV_TO_P2P_FULL_STREAM_COMPLETE, !0) : (this.resendTs,
                                  0 == this.nextFrameResendTs && (this.nextFrameResendTs = e),
                                  this.tryResend()));
                              if (this.resendTs > 0 && e - this.resendTs < 200)
                                  return;
                              this.PrintSkipFrame && u.default.warn("VideoPlayer.play wait nothing")
                          }
                          for (this.resendTs = -1; a <= s && !(this.audioChain.head && this.audioChain.head.data && 0 != this.lastPutAudioKey && this.audioChain.head.data.key > this.lastPutAudioKey + 1 && this.getBufferLen() > 2e3); ) {
                              var d = this.audioChain.peek();
                              if (d && d.dts <= a)
                                  this.playAudio(d, e, d.dts),
                                  this.lastPutAudioKey = d.key;
                              else if ((n = r.data).isFull && n.key > this.lastPlayVideoKey && (0 == n.key - this.lastPlayVideoKey - 1 || n.isKeyFrame) && this.playVideo(n, e),
                              (r = r.next) === this.videoChain.head)
                                  a = l.default.UintMax;
                              else if ((n = r.data).isFull)
                                  a = n.dts;
                              else if (o && this.waitFrameKey < n.key) {
                                  this.waitFrameKey = n.key,
                                  this.PrintSkipFrame && u.default.log("---------- waitFrameKey", this.waitFrameKey);
                                  break
                              }
                          }
                          for (var h = 0; null !== (n = this.videoChain.peek()) && n.key <= this.lastPlayVideoKey; )
                              (n = this.videoChain.get()).isFull && n.played || h++;
                          h > 0 && (this.dropFrames += h,
                          u.default.log("VideoPlayer.play dropVideoFrame=" + h)),
                          s > this.lastPlayTs && (this.lastPlayTs = s)
                      }
                  }
              }
          }, {
              key: "checkSkipFrames",
              value: function(e) {
                  if (this.nextFrameResendTs > 0 && e - this.nextFrameResendTs > this.nextFrameWaitingTime) {
                      this.nextFrameResendTs = e;
                      var t = this.videoChain.get()
                        , i = this.videoChain.peek()
                        , s = "VideoPlayer.checkSkipFrames";
                      t && (s += " resendTimes:" + t.urgentResendTimes + " key:" + t.key + " pktNum:" + t.pktNum + " seqs:" + t.getSeqs() + " tryResendSeqs:" + t.tryResendSeqs.join("-") + " lostSeqs:" + t.getLostSeqs().join("-"));
                      for (var a = 0; i && (!i.isKeyFrame || !i.isFull); )
                          this.videoChain.get(),
                          i = this.videoChain.peek(),
                          a++;
                      this.forceSkipFrameNums += a,
                      s += " skipNum:" + a + " cache:" + this.videoChain.size,
                      u.default.log(s)
                  }
              }
          }, {
              key: "playVideo",
              value: function(e, t) {
                  if (e.streamData) {
                      this.nextFrameResendTs = 0,
                      this.playedFrames++;
                      var i = e.key - this.lastPlayVideoKey - 1;
                      if (0 == i && this.lastPlayDts > 0 && this.perFrameTsCalc.add(e.dts - this.lastPlayDts),
                      i > 0 && this.PrintSkipFrame) {
                          var s = this.lastPlayVideoKey + 1;
                          i > 1 && (s += "~" + (e.key - 1));
                          var a = this.getBufferLen();
                          u.default.warn("VideoPlayer.play skipFrame=" + i + " frameId=" + s + " bufLen=" + a)
                      }
                      if (this.lastPlayDts > 0 && e.dts - this.lastPlayDts > 200 + this.perFrameTs && (0 == i ? this.dtsJumpPauseTimes++ : this.skipFramePauseTimes++,
                      u.default.warn("VideoPlayer.playVideo skipFrame=" + i + " jumpDts=" + (e.dts - this.lastPlayDts))),
                      this.lastPlayDts = e.dts,
                      e.isKeyFrame) {
                          var n = y.default.getAvc(e);
                          if (!this.isEqualArray(n, this.avcConfig)) {
                              this.avcConfig = n;
                              var r = y.default.packAvcFlvTag(e.dts, n);
                              this.msePlayer && this.msePlayer.appendFlv(r)
                          }
                          y.default.trimIFrame(e, n.length)
                      }
                      var o = e.dts - this.firstTs;
                      y.default.setFrameTimestamp(o, e.streamData),
                      this.avcConfig && (this.msePlayer && this.msePlayer.appendFlv(e.streamData),
                      e.streamData = null),
                      e.played = !0,
                      this.lastPlayVideoKey = e.key,
                      this.setLastPlayVideoSeq(e.lastPktSeq);
                      var l = this.p2pPlayer.G;
                      0 == l.firstRenderTime && (l.firstRenderTime = t,
                      u.default.log("%c[TIME] firstRenderTime=" + (t - l.firstIFrameTime2) + " totalTime=" + (t - l.startTime), "color:#A23400;background:#FFF5C2"))
                  } else
                      u.default.warn("FlvWrapper.playVideo frame.streamData is null.")
              }
          }, {
              key: "playAudio",
              value: function(e, t, i) {
                  this.nextFrameResendTs = 0,
                  e.aacConfig && (u.default.log("VideoPlayer.playAudio aacConfig change"),
                  this.msePlayer && this.msePlayer.appendFlv(e.aacConfig),
                  e.aacConfig = null);
                  var s = i - this.firstTs;
                  y.default.setFrameTimestamp(s, e.streamData),
                  this.msePlayer && s >= 0 && this.msePlayer.appendFlv(e.streamData),
                  e.streamData = null,
                  this.lastPlayAudioKey = e.key,
                  this.incAts(1),
                  e.isEmpty || this.audioChain.get();
                  var a = this.p2pPlayer.G;
                  0 == a.firstRenderTime && (a.firstRenderTime = t,
                  u.default.log("%c[TIME] firstRenderTime=" + (t - a.firstAudioPkgTime) + " totalTime=" + (t - a.startTime), "color:#A23400;background:#FFF5C2"))
              }
          }, {
              key: "getCurrentRealTime",
              value: function() {
                  return this.msePlayer.getCurrentRealTime() + this.firstTs
              }
          }, {
              key: "tryResend",
              value: function() {
                  for (var e = this, t = 0, i = 0, s = new n.default, r = this.videoChain.head, o = r.data, l = []; !o.isFull; ) {
                      if (o.key > this.lastResendKey) {
                          o.urgentResendTimes++,
                          this.lastResendKey = o.key,
                          l.push(o.key);
                          var d = o.getLostSeqs();
                          if (o.tryResendSeqs = d.slice(),
                          d.forEach(function(t) {
                              t > e.lastPlayVideoSeq && s.add(t)
                          }),
                          t > 0 && o.key > t + 1)
                              for (var h = i + 1; h < d[0]; h++)
                                  s.add(h);
                          t = o.key,
                          i = d[d.length - 1]
                      }
                      if (s.size > 640)
                          break;
                      if ((r = r.next) === this.videoChain.head)
                          break;
                      o = r.data
                  }
                  if (s.size > 0) {
                      var f = (0,
                      a.default)(s);
                      u.default.log("VideoPlayer.tryResend seqCnt=" + f.length + " firstSeq=" + f[0] + " frameCnt=" + l.length),
                      this.p2pPlayer.p2pMgr.urgentResend(f)
                  }
              }
          }, {
              key: "getEmptyAudioFrame",
              value: function(e, t) {
                  var i = new P.default;
                  i.key = t,
                  i.codec = 1,
                  i.isEmpty = !0,
                  i.dts = e;
                  var s = new Uint8Array(S.default.emptyAacFrameAdts);
                  h.default.chrome && h.default.version.major < 50 && (s = S.default.getSilentFrame(5, 2));
                  var a = 1 & s[0] ? 7 : 9;
                  if (null === this.aacConfig) {
                      var n = s.subarray(0, a)
                        , r = y.default.adtsToConfig(n);
                      r = y.default.packAudioFlvTag(0, r, 0),
                      this.aacConfig = r,
                      this.msePlayer && this.msePlayer.appendFlv(r),
                      u.default.log("VideoPlayer.getEmptyAudioFrame append aacConfig=" + r.slice(-8, -4).toString())
                  } else
                      Number(localStorage._printPreEmpytFrame) && u.default.log("VideoPlayer.getEmptyAudioFrame key=" + t + " dts=" + e);
                  return s = s.subarray(a),
                  i.streamData = y.default.packAudioFlvTag(e, s, 1),
                  i
              }
          }, {
              key: "trimAudioBeforeDts",
              value: function(e) {
                  for (var t = this.audioChain.peek(); t && t.dts < e; )
                      this.audioChain.get(),
                      t = this.audioChain.peek();
                  return t
              }
          }, {
              key: "trimVideoBeforeDts",
              value: function(e) {
                  for (var t = this.videoChain.peek(); t && t.dts < e; )
                      this.videoChain.get(),
                      t = this.videoChain.peek();
                  return t
              }
          }, {
              key: "setLastAts",
              value: function(e) {
                  this.lastATs = Math.max(1, e - this.audioFrameTimeLen)
              }
          }, {
              key: "getNextATs",
              value: function() {
                  return Math.round(this.lastATs + this.audioFrameTimeLen)
              }
          }, {
              key: "incAts",
              value: function(e) {
                  this.lastATs += this.audioFrameTimeLen * e
              }
          }, {
              key: "setFirstTs",
              value: function(e, t, i) {
                  var s = this.firstTsStatus;
                  if (!(s >= e))
                      if (this.firstTs = t,
                      this.firstOsTs = i,
                      this.firstTsStatus = e,
                      u.default.log("VideoPlayer.setFirstTs status=" + s + "->" + e + " firstTs=" + t + " firstOsTs=" + this.firstOsTs + " jitBufLen=" + this.JitterBufLen),
                      s == this.FIRST_TS_AUDIO && e == this.FIRST_TS_VIDEO && this.updateFirstTsForce(),
                      this.firstTsStatus == this.FIRST_TS_VIDEO || this.firstTsStatus == this.FIRST_TS_VIDEO_PUSH) {
                          var a = this.trimVideoBeforeDts(this.firstTs);
                          this.lastPlayVideoKey = a.key - 1,
                          this.setLastPlayVideoSeq(a.lastPktSeq - 1),
                          u.default.log("VideoPlayer.setFirstTs first video key=" + this.lastPlayVideoKey + " ts=" + a.dts);
                          var n = this.trimAudioBeforeDts(this.firstTs);
                          !n || n.dts - this.firstTs > this.audioFrameTimeLen ? (this.lastPlayAudioKey = 0,
                          this.setLastAts(this.firstTs)) : (this.lastPlayAudioKey = n.key - 1,
                          this.setLastAts(n.dts)),
                          u.default.log("VideoPlayer.setFirstTs first audio key=" + this.lastPlayAudioKey + " ts=" + this.lastATs),
                          this.msePlayer && this.aacConfig && this.msePlayer.appendFlv(this.aacConfig)
                      } else if (this.firstTsStatus == this.FIRST_TS_AUDIO) {
                          var r = this.trimAudioBeforeDts(this.firstTs);
                          r && r.dts === this.firstTs && (this.lastPlayAudioKey = r.key - 1,
                          this.setLastAts(r.dts),
                          u.default.log("VideoPlayer.setFirstTs first pure audio key=" + this.lastPlayAudioKey + " ts=" + this.lastATs))
                      }
              }
          }, {
              key: "updateFirstTsForce",
              value: function() {
                  u.default.info("VideoPlayer.updateFirstTsForce"),
                  this.resetMsePlayer(),
                  this.lastPlayTs = 0,
                  this.lastPlayAudioKey = 0,
                  this.lastPlayVideoKey = 0
              }
          }, {
              key: "getPlayTime",
              value: function() {
                  if (!this.msePlayer)
                      return 0;
                  var e = this.msePlayer.getCurrentDts();
                  return e > 0 && (e += this.firstTs),
                  e
              }
          }, {
              key: "getBufferLen",
              value: function() {
                  return this.msePlayer ? this.msePlayer.getBufferLen() : 0
              }
          }, {
              key: "getCurrentTime",
              value: function() {
                  return this.msePlayer ? this.msePlayer.getCurrentTime() : 0
              }
          }, {
              key: "isEqualArray",
              value: function(e, t) {
                  if (!e && t || e && !t)
                      return !1;
                  var i = e.length;
                  if (i != t.length)
                      return !1;
                  for (var s = 0; s < i; s++)
                      if (e[s] != t[s])
                          return !1;
                  return !0
              }
          }, {
              key: "onVideoStreamData",
              value: function(t) {
                  var i = d.default.now();
                  if (this.lastRecvTs = i,
                  t.seq <= this.lastPlayVideoSeq)
                      return e.RECV_TOO_LATE;
                  t.config.has(12) && (this.msePlayer.metadata.codecname = t.config.get(12));
                  var s = e.RECV_SUCCESS
                    , a = this.videoChain.getOrNewNode(t.frameId);
                  if (!a)
                      return e.RECV_ERROR;
                  var n = null;
                  null === a.data ? ((n = new T.default).append(t),
                  a.data = n) : (n = a.data).append(t);
                  var r = this.p2pPlayer.G;
                  if (0 == r.firstVideoPkgTime && (r.firstVideoPkgTime = i,
                  u.default.log("%c[TIME] firstVideoPkgTime=" + (i - r.connectVideoTime) + " totalTime=" + (i - r.startTime) + " seq=" + t.seq + " frameType=" + n.frameType, "color:#A23400;background:#FFF5C2")),
                  0 == r.firstIFrameTime1 && 0 == n.frameType && (r.firstIFrameTime1 = i,
                  u.default.log("%c[TIME] firstIFrameTime1=" + (i - r.connectVideoTime) + " totalTime=" + (i - r.startTime) + " seq=" + t.seq + " sliceNum=" + n.pktNum, "color:#A23400;background:#FFF5C2")),
                  n.isFull && Number(localStorage._printFrameWarning)) {
                      var o = n.key;
                      this.vFrameId > 0 && o - this.vFrameId != 1 && u.default.warn("VideoPlayer video frameId discontinuous, lastFrameId=" + this.vFrameId + " curFrameId=" + o + " jump=" + (o - this.vFrameId)),
                      this.vFrameId = o
                  }
                  return this.firstTsStatus < this.FIRST_TS_VIDEO && n.isFull && n.isKeyFrame && (this.setFirstTs(this.FIRST_TS_VIDEO, n.dts, n.recvTs),
                  r.firstIFrameTime2 = i,
                  u.default.log("%c[TIME] firstIFrameTime2=" + (i - r.firstIFrameTime1) + " totalTime=" + (i - r.startTime) + " seq=" + t.seq + " sliceNum=" + n.pktNum, "color:#A23400;background:#FFF5C2")),
                  s
              }
          }, {
              key: "onAudioStreamData",
              value: function(e) {
                  var t = d.default.now();
                  this.lastRecvTs = t;
                  var i = this.p2pPlayer.G;
                  0 == i.firstAudioPkgTime && (i.firstAudioPkgTime = t,
                  u.default.log("%c[TIME] firstAudioPkgTime=" + (t - i.connectVideoTime) + " totalTime=" + (t - i.startTime), "color:#A23400;background:#FFF5C2")),
                  this.isAudioFrameTimeLenInited || (this.isAudioFrameTimeLenInited = !0,
                  this.audioFrameTimeLen = v.default.getAudioTimeLen(e.codecType),
                  u.default.log("VideoPlayer.onAudioStreamData codecType=" + e.codecType + " aacTimeLen=" + this.audioFrameTimeLen));
                  var s = e.streamData
                    , a = s.length
                    , n = !1
                    , r = 11 + ((s[1] << 16) + (s[2] << 8) + s[3]) + 4
                    , o = s.slice(0, r);
                  null === this.aacConfig ? (this.aacConfig = o,
                  this.msePlayer && this.msePlayer.appendFlv(o),
                  u.default.log("VideoPlayer.onAudioStreamData append aacConfig=" + o.slice(-8, -4).toString())) : this.aacConfig.toString() != o.toString() && (n = !0,
                  u.default.warn("VideoPlayer.onAudioStreamData aacConfig change, " + this.aacConfig.slice(-8, -4).toString() + " -> " + o.slice(-8, -4).toString()),
                  this.aacConfig = o),
                  Number(localStorage._printAudioFrame) && u.default.debug("-".repeat(64));
                  for (var l = this.firstTsStatus < this.FIRST_TS_AUDIO, h = new DataView(s.buffer), f = void 0, c = void 0, p = void 0, y = void 0; r < a; ) {
                      f = h.getUint32(r, !0),
                      c = h.getUint32(r + 4, !0),
                      p = s.slice(r + 8, r + f),
                      r += f,
                      y = ((255 & p[7]) << 24 >>> 0) + ((255 & p[4]) << 16) + ((255 & p[5]) << 8) + (255 & p[6]);
                      var m = new P.default;
                      if (m.seq = e.seq,
                      m.key = c,
                      m.codec = e.codecType,
                      m.dts = y,
                      m.streamData = p,
                      n && (m.aacConfig = o),
                      m.recvTs = t,
                      this.audioChain.put(m),
                      l && (l = !1,
                      this.setFirstTs(this.FIRST_TS_AUDIO, m.dts, m.recvTs)),
                      Number(localStorage._printAudioFrame)) {
                          var _ = y - this.lastDts
                            , T = _ > 100 ? "background:#FF9797" : ""
                            , S = _ > 100 ? "-.-" : "";
                          u.default.debug("%cAudio seq=" + e.seq + " frameId=" + c + " dts=" + y + " %c^dts=" + _, "color:#090", T, S),
                          this.lastDts = m.dts
                      }
                      Number(localStorage._printFrameWarning) && (this.aFrameId > 0 && c - this.aFrameId != 1 && u.default.warn("VideoPlayer audio frameId discontinuous, lastFrameId=" + this.aFrameId + " curFrameId=" + c + " jump=" + (c - this.aFrameId)),
                      this.aFrameId = c)
                  }
              }
          }]),
          e
      }();
      I.RECV_SUCCESS = 0,
      I.DOWNLINK_RESEND = 1,
      I.RECV_TOO_LATE = 3,
      I.RECV_ERROR = 4,
      I.TEMP_BUFFERED = 5,
      t.default = I
  }
  , function(e, t, i) {
      e.exports = {
          default: i(282),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      i(81),
      i(37),
      i(47),
      i(283),
      i(284),
      i(285),
      i(286),
      e.exports = i(11).Set
  }
  , function(e, t, i) {
      var s = i(122)
        , a = i(85);
      e.exports = i(127)("Set", function(e) {
          return function() {
              return e(this, arguments.length > 0 ? arguments[0] : void 0)
          }
      }, {
          add: function(e) {
              return s.def(a(this, "Set"), e = 0 === e ? 0 : e, e)
          }
      }, s)
  }
  , function(e, t, i) {
      var s = i(14);
      s(s.P + s.R, "Set", {
          toJSON: i(128)("Set")
      })
  }
  , function(e, t, i) {
      i(129)("Set")
  }
  , function(e, t, i) {
      i(130)("Set")
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          MUSIC_MID: 1,
          MUSIC_MID_TIME_LEN: 2048e3 / 44100,
          MUSIC_MID_128: 35,
          MUSIC_MID_128_TIME_LEN: 1024e3 / 44100,
          MUSIC_MID_160: 36,
          MUSIC_MID_160_TIME_LEN: 1024e3 / 44100,
          MUSIC_MID_192: 37,
          MUSIC_MID_192_TIME_LEN: 1024e3 / 44100,
          MUSIC_MID_48K_MONO: 100,
          MUSIC_MID_48K_STEREO: 101,
          MUSIC_MID_48K_TIME_LEN: 1024e3 / 48e3,
          VOICE_HIGHER: 2,
          VOICE_HIGHER_TIME_LEN: 20,
          VOICE_HIGHER_FRAME_LEN: 882,
          VOICE_HIGHER_QUALITY1: 22,
          VOICE_HIGHER_QUALITY1_TIME_LEN: 20,
          VOICE_HIGHER_QUALITY1_FRAME_LEN: 882,
          getAudioTimeLen: function(e) {
              switch (e) {
              case this.MUSIC_MID:
                  return this.MUSIC_MID_TIME_LEN;
              case this.MUSIC_MID_128:
                  return this.MUSIC_MID_128_TIME_LEN;
              case this.MUSIC_MID_160:
                  return this.MUSIC_MID_160_TIME_LEN;
              case this.MUSIC_MID_192:
                  return this.MUSIC_MID_192_TIME_LEN;
              case this.MUSIC_MID_48K_MONO:
              case this.MUSIC_MID_48K_STEREO:
                  return this.MUSIC_MID_48K_TIME_LEN;
              case this.VOICE_HIGHER:
                  return this.VOICE_HIGHER_TIME_LEN;
              default:
                  return this.MUSIC_MID_TIME_LEN
              }
          }
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e)
          }
          return (0,
          n.default)(e, null, [{
              key: "getFlvHeader",
              value: function() {
                  var e = new Uint8Array(13)
                    , t = 0;
                  return e[t++] = 70,
                  e[t++] = 76,
                  e[t++] = 86,
                  e[t++] = 1,
                  e[t++] = 5,
                  e[t++] = 0,
                  e[t++] = 0,
                  e[t++] = 0,
                  e[t++] = 9,
                  e[t++] = 0,
                  e[t++] = 0,
                  e[t++] = 0,
                  e[t++] = 0,
                  e
              }
          }, {
              key: "packAudioFlvTag",
              value: function(e, t) {
                  var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1
                    , s = t.length + 2
                    , a = new Uint8Array(11 + s + 4)
                    , n = 0;
                  return a[n++] = 8,
                  a[n++] = s >> 16 & 255,
                  a[n++] = s >> 8 & 255,
                  a[n++] = 255 & s,
                  a[n++] = e >> 16 & 255,
                  a[n++] = e >> 8 & 255,
                  a[n++] = 255 & e,
                  a[n++] = e >> 24 & 255,
                  a[n++] = 0,
                  a[n++] = 0,
                  a[n++] = 0,
                  -1 != i && (a[n++] = 175,
                  a[n++] = i),
                  a.set(t, n),
                  n += t.length,
                  s += 11,
                  a[n++] = s >> 24 & 255,
                  a[n++] = s >> 16 & 255,
                  a[n++] = s >> 8 & 255,
                  a[n++] = 255 & s,
                  a
              }
          }, {
              key: "packAvcFlvTag",
              value: function(e, t) {
                  var i = t.length + 5
                    , s = new Uint8Array(11 + i + 4)
                    , a = 0;
                  s[a++] = 9,
                  s[a++] = i >> 16 & 255,
                  s[a++] = i >> 8 & 255,
                  s[a++] = 255 & i,
                  s[a++] = e >> 16 & 255,
                  s[a++] = e >> 8 & 255,
                  s[a++] = 255 & e,
                  s[a++] = e >> 24 & 255,
                  s[a++] = 0,
                  s[a++] = 0,
                  s[a++] = 0,
                  s[a++] = 23,
                  s[a++] = 0,
                  s[a++] = 0,
                  s[a++] = 0,
                  s[a++] = 0,
                  s.set(t, a),
                  a += t.length;
                  var n = 11 + i;
                  return s[a++] = n >> 24 & 255,
                  s[a++] = n >> 16 & 255,
                  s[a++] = n >> 8 & 255,
                  s[a++] = 255 & n,
                  s
              }
          }, {
              key: "adtsToConfig",
              value: function(e) {
                  var t = new Uint8Array(2)
                    , i = 1 + ((192 & e[2]) >> 6)
                    , s = (60 & e[2]) >> 2
                    , a = (1 & e[2]) << 2 | (192 & e[3]) >> 6;
                  return t[0] = i << 3 | (14 & s) >> 1,
                  t[1] = (1 & s) << 7 | a << 3,
                  t
              }
          }, {
              key: "setFrameTimestamp",
              value: function(e, t) {
                  t[4] = e >> 16 & 255,
                  t[5] = e >> 8 & 255,
                  t[6] = 255 & e,
                  t[7] = e >> 24 & 255
              }
          }, {
              key: "getAvc",
              value: function(e) {
                  var t = e.streamData[0];
                  return t += e.streamData[1] << 8,
                  t += e.streamData[2] << 16,
                  t += e.streamData[3] << 24 >>> 0,
                  e.streamData.slice(4, 4 + t)
              }
          }, {
              key: "trimIFrame",
              value: function(e, t) {
                  e.streamData = e.streamData.slice(4 + t)
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.seq = 0,
              this.key = 0,
              this.codec = 0,
              this.isEmpty = !1,
              this.dts = 0,
              this.streamData = null,
              this.aacConfig = null,
              this.recvTs = 0
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.seq = 0,
                  this.key = 0,
                  this.codec = 0,
                  this.isEmpty = !1,
                  this.dts = 0,
                  this.streamData = null,
                  this.aacConfig = null,
                  this.recvTs = 0
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = s(i(291))
        , u = s(i(6))
        , l = s(i(8))
        , d = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.key = null,
              this.frameType = -1,
              this.pktNum = null,
              this.size = 0,
              this.packets = [],
              this.streamData = null,
              this.firstPktSeq = null,
              this.lastPktSeq = null,
              this.dts = l.default.UintMax,
              this.recvTs = null,
              this.urgentResendTimes = 0,
              this.tryResendSeqs = []
          }
          return (0,
          n.default)(e, [{
              key: "append",
              value: function(e) {
                  if (0 === this.packets.length)
                      this.key = e.frameId,
                      this.frameType = 3 & e.seqNum,
                      this.pktNum = e.frameNum,
                      this.packets.push(e),
                      this.size += e.streamData.length;
                  else {
                      if (this.isFull)
                          return !0;
                      for (var t = !0, i = this.packets.length - 1; i >= 0; i--) {
                          if (this.packets[i].seqNum === e.seqNum)
                              return !0;
                          if (this.packets[i].seqNum < e.seqNum) {
                              this.packets.splice(i + 1, 0, e),
                              this.size += e.streamData.length,
                              t = !1;
                              break
                          }
                      }
                      t && (this.packets.splice(0, 0, e),
                      this.size += e.streamData.length)
                  }
                  if (this.isFull) {
                      this.streamData = new Uint8Array(this.size);
                      for (var s = 0, a = this.packets.length, n = 0; n < a; n++)
                          try {
                              this.streamData.set(this.packets[n].streamData, s),
                              s += this.packets[n].streamData.length
                          } catch (e) {
                              return r.default.error("VideoFrame.append error, name:" + e.name + " msg:" + e.message),
                              !1
                          }
                      if (s !== this.size)
                          return r.default.error("VideoFrame.Append size error, infact:" + s + " expected:" + this.size + " key:" + this.key + " firstSeq:" + this.firstPktSeq + " lastSeq:" + (this.firstPktSeq + 2 * this.pktNum) + " num:" + this.pktNum + " len:" + this.packets.length),
                          this.reset(),
                          !1;
                      if (this.firstPktSeq = this.packets[0].seq,
                      this.lastPktSeq = this.packets[a - 1].seq,
                      this.dts = this.getFrameTime(),
                      this.recvTs = u.default.now(),
                      Number(localStorage._printVideoFrame)) {
                          var o = this.dts - r.default.lastDts
                            , l = o > 100 ? "background:#FF9797" : ""
                            , d = o > 100 ? "-_-" : "";
                          r.default.debug("%cVideo seq=" + e.seq + " frameId=" + this.key + " dts=" + this.dts + " %c^dts=" + o, "color:#F00", l, d),
                          r.default.lastDts = this.dts
                      }
                  }
                  return !0
              }
          }, {
              key: "getFrameTime",
              value: function() {
                  if (this.dts !== l.default.UintMax)
                      return this.dts;
                  if (!this.isFull)
                      return l.default.UintMax;
                  var e = 0;
                  this.isKeyFrame && (e = this.streamData[0],
                  e += this.streamData[1] << 8,
                  e += this.streamData[2] << 16,
                  e += this.streamData[3] << 24 >>> 0,
                  e += 4);
                  var t = (255 & this.streamData[e + 7]) << 24 >>> 0
                    , i = (255 & this.streamData[e + 4]) << 16
                    , s = (255 & this.streamData[e + 5]) << 8
                    , a = 255 & this.streamData[e + 6];
                  return this.dts = t + i + s + a,
                  this.dts
              }
          }, {
              key: "getLostSeqs",
              value: function() {
                  var e = []
                    , t = this.packets.length;
                  if (t < this.pktNum) {
                      for (var i = this.packets[0].seq, s = this.packets[t - 1].seq, a = i, n = 1; n < t; n++)
                          for (var r = this.packets[n].seq; a < r; )
                              e.push(a),
                              a++;
                      for (var o = this.pktNum - t; o-- > 0; )
                          e.unshift(--i),
                          e.push(++s)
                  }
                  return e
              }
          }, {
              key: "getSeqs",
              value: function() {
                  var e = [];
                  return this.packets.forEach(function(t) {
                      e.push(t.seq)
                  }),
                  e
              }
          }, {
              key: "reset",
              value: function() {
                  this.key = null,
                  this.frameType = -1,
                  this.pktNum = null,
                  this.size = 0,
                  this.packets = [],
                  this.firstPktSeq = null,
                  this.lastPktSeq = null,
                  this.dts = l.default.UintMax,
                  this.recvTs = null
              }
          }, {
              key: "isFull",
              get: function() {
                  return this.packets.length === this.pktNum
              }
          }, {
              key: "isEmpty",
              get: function() {
                  return 0 === this.packets.length
              }
          }, {
              key: "isKeyFrame",
              get: function() {
                  return this.frameType === o.default.FRAMETYPE_VIDEO_I
              }
          }, {
              key: "isPFrame",
              get: function() {
                  return this.frameType === o.default.FRAMETYPE_VIDEO_P
              }
          }, {
              key: "isBFrame",
              get: function() {
                  return this.frameType === o.default.FRAMETYPE_VIDEO_B
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          FRAMETYPE_VIDEO_I: 0,
          FRAMETYPE_VIDEO_P: 1,
          FRAMETYPE_VIDEO_B: 2
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(10)),
      s(i(6)))
        , o = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.p2pPlayer = t,
              this.sended = !1,
              this.data = {
                  act: "webhuyaplayed",
                  uid: 0,
                  sid: 0,
                  subsid: 0,
                  linetype: -1,
                  status: 0,
                  recode: 0,
                  vtime: -1,
                  isp2p: 1
              }
          }
          return (0,
          n.default)(e, [{
              key: "send",
              value: function() {
                  if (!this.sended) {
                      this.sended = !0;
                      var e = this.data
                        , t = this.p2pPlayer
                        , i = t.G
                        , s = t.loaderMgr.fullLoader.status
                        , a = "//ylog.huya.com/d.gif?rid=ods_action_log&pro=huya_web&sdver=1&cutc=" + r.default.utc();
                      for (var n in e.uid = i.uid || i.uuid,
                      e.sid = i.sid,
                      e.subsid = i.subSid,
                      e.linetype = i.lineType || -1,
                      e.status = s || 1,
                      0 == s ? e.recode = 2 : (s < 200 || s >= 300) && (e.recode = 1),
                      e.vtime = t.loadTime || -1,
                      e)
                          a += "&" + n + "=" + e[n];
                      (new Image).src = a
                  }
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(6))
        , o = s(i(22))
        , u = s(i(13))
        , l = s(i(29))
        , d = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.p2pPlayer = t,
              this.tsdbUtil = t.hyPlayer.tsdbUtil,
              this.stat = t.hyPlayer.stat,
              this.data = {
                  act: "webhuyah5qa",
                  uid: 0,
                  sid: 0,
                  subsid: 0,
                  linetype: -1,
                  sendcnt: 0,
                  paucount: 0,
                  paulength: 0,
                  bflength: 0,
                  vr: 0,
                  httphead: "",
                  rel: "jsscene",
                  ref: location.href,
                  isp2p: 1
              },
              this.img = null,
              this.pausedCount = 0,
              this.pausedTime = 0,
              this.isPaused = !1,
              this.hasEmptyFrames = !1,
              this.isFirstReport = !0
          }
          return (0,
          n.default)(e, [{
              key: "send",
              value: function() {
                  var e = this.p2pPlayer.G
                    , t = this.data
                    , i = this.p2pPlayer.player
                    , s = "//ylog.huya.com/d.gif?rid=ods_action_log&pro=huya_web&sdver=1&cutc=" + r.default.utc();
                  for (var a in t.uid = e.uid || e.uuid,
                  t.sid = e.sid,
                  t.subsid = e.subSid,
                  t.linetype = e.lineType || -1,
                  t.sendcnt++,
                  t.paucount = this.pausedCount,
                  t.paulength = this.pausedTime > 12e4 ? 12e4 : this.pausedTime,
                  t.bflength = i ? i.getBufferLen() : 0,
                  this.pausedCount = 0,
                  this.pausedTime = 0,
                  t)
                      s += "&" + a + "=" + t[a];
                  this.img || (this.img = new Image),
                  this.img.src = s
              }
          }, {
              key: "record",
              value: function(e, t, i, s, a, n) {
                  this.pausedCount += t,
                  this.pausedTime += i,
                  e % 120 == 0 && (s && this.pausedCount++,
                  this.send()),
                  s && (this.isPaused = !0),
                  e % 20 == 0 && this.sendNewMetrics(e, t, i, s, a, n)
              }
          }, {
              key: "sendOldMetrics",
              value: function(e, t, i, s, a) {
                  var n = this.p2pPlayer.p2pStat.getOldMetrics();
                  n.push({
                      type: o.default.METRIC.VIDEO_BAD_QUALITY_RATIO,
                      value: this.isPaused ? 100 : 0,
                      dim: [{
                          key: "quality",
                          value: s || t > 0 ? 100 : 0
                      }, {
                          key: "reason",
                          value: s || t > 0 ? 100 : 0
                      }]
                  }),
                  this.tsdbUtil.sendOldMetrics(n)
              }
          }, {
              key: "sendNewMetrics",
              value: function(e, t, i, s, a, n) {
                  var r = this.p2pPlayer.G
                    , d = this.p2pPlayer.p2pStat.getMetrics();
                  if (d.push({
                      sMetricName: o.default.METRIC.SDK_P2P_SERVER_OPEN,
                      vField: {
                          value: this.p2pPlayer.getConfig(100) ? 100 : 0
                      }
                  }, {
                      sMetricName: o.default.METRIC.SDK_P2P_USER_PROPERTY,
                      vDimension: {
                          success: 6
                      }
                  }),
                  this.stat.setCoreDim(u.default.DIM_CORE.USER_PROPERTY, l.default.userProperty.P2P),
                  this.stat.setCoreDim(u.default.DIM_CORE.VIDEO_BAD_QUALITY_OLD, s ? 100 : 0),
                  this.stat.setCoreDim(u.default.DIM_CORE.VIDEO_BAD_QUALITY, s || t > 0 ? 100 : 0),
                  this.stat.setCoreDim(u.default.DIM_CORE.VIDEO_BAD_REASON, a),
                  this.isFirstReport ? this.isFirstReport = !1 : d.push({
                      sMetricName: o.default.METRIC.VIDEO_BAD_QUALITY_RATIO,
                      vField: {
                          value: this.isPaused ? 100 : 0,
                          pausecnt: t,
                          forceskipframe: n
                      },
                      vDimension: {
                          success: this.tsdbUtil.hasP2P,
                          originalBitrate: 0 === this.p2pPlayer.info.originalBitrate ? 1 : 0,
                          p2pCooling: this.p2pPlayer.hyPlayer.p2pCooling ? 1 : 0,
                          topSid: r.sid,
                          reason: a,
                          quality: s || t > 0 ? 100 : 0
                      },
                      vExLog: {
                          cdnip: this.p2pPlayer.getCdnip()
                      }
                  }),
                  this.isPaused = !1,
                  this.hasEmptyFrames = !1,
                  this.p2pPlayer.p2pMgr.stream) {
                      var h = this.p2pPlayer.p2pMgr.stream
                        , f = h.stat;
                      for (var c in f.bw) {
                          var p = f.bw[c];
                          p > 0 && this.stat.setCore(c, p)
                      }
                      for (var v in f.core)
                          this.stat.setComDim(v, f.core[v]);
                      this.stat.setCore(u.default.CORE.HAS_PUNCH_NODES, h.getPunchedCnt()),
                      this.stat.setCore(u.default.CORE.FORWARD_REJECT_CNT, f.forward_reject_cnt),
                      this.setComp(f, u.default.PUNCH_BACK_RET.name),
                      this.setComp(f, u.default.SUB_RETURN.sub_name),
                      this.setComp(f, u.default.SUB_RETURN.switch_name),
                      this.setComp(f, u.default.SUB_RETURN.last_name),
                      this.setComp(f, u.default.FORCESUB_REASON.name),
                      this.setComp(f, u.default.NONODE_RETURN.name),
                      this.setComp(f, u.default.P2P_TCP_TYPE.name),
                      this.setComp(f, u.default.P2P_TCP_STATE.name),
                      f.reset()
                  }
                  this.p2pPlayer.player.msePlayer.metadata && this.p2pPlayer.player.msePlayer.metadata.codecname && this.stat.setComDim(u.default.DIM_COM.SPHD_TYPE, this.p2pPlayer.player.msePlayer.metadata.codecname),
                  this.stat.fill(d),
                  this.tsdbUtil.sendMetrics(d)
              }
          }, {
              key: "setComp",
              value: function(e, t) {
                  var i = e[t];
                  for (var s in i) {
                      var a = i[s];
                      a > 0 && this.stat.setComp(t, s, a)
                  }
              }
          }, {
              key: "getHost",
              value: function(e) {
                  return e.replace("https*://", "").split("/")[0]
              }
          }, {
              key: "setHttpHead",
              value: function(e) {
                  this.data.httphead = this.getHost(e)
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      function a() {
          return c++
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var n = s(i(7))
        , r = s(i(0))
        , o = s(i(1))
        , u = s(i(4))
        , l = s(i(22))
        , d = s(i(13))
        , h = (s(i(8)),
      s(i(29)))
        , f = function() {
          function e(t) {
              (0,
              r.default)(this, e),
              this.p2pPlayer = t,
              this.hyPlayer = t.hyPlayer,
              this.tsdbUtil = this.hyPlayer.tsdbUtil,
              this.stat = t.hyPlayer.stat,
              this.p2pState = -1,
              this.hasFlow = !1,
              this.metric = new n.default,
              this.total = new n.default,
              this.metric20 = new n.default,
              this.subNodes = new n.default,
              this.playBufLength = 0,
              this.record = {
                  resendTimes: 0,
                  resendTimeoutCnt: 0,
                  resendErrorTimes: 0,
                  resendSliceCnt: 0,
                  resendRespondCnt: 0,
                  resendLateCnt: 0,
                  resendMissCnt: 0,
                  repeatResendCnt: 0,
                  repeatResendSucc: 0,
                  repeatResendFail: 0,
                  dropFrames: 0,
                  playedFrames: 0,
                  dtsJumpPauseTimes: 0,
                  skipFramePauseTimes: 0,
                  fullFrameRatio: 0
              }
          }
          return (0,
          o.default)(e, [{
              key: "addSubNodes",
              value: function(e) {
                  this.subNodes.set(e, 0)
              }
          }, {
              key: "add",
              value: function(e, t) {
                  this.hasFlow = !0,
                  this.addValue(this.metric, e, t),
                  this.addValue(this.total, e, t),
                  this.addValue(this.metric20, e, t)
              }
          }, {
              key: "reset",
              value: function() {
                  this.hasFlow = !1,
                  this.total.clear(),
                  this.metric.clear(),
                  this.subNodes.clear()
              }
          }, {
              key: "reportFlow",
              value: function() {
                  if (this.hasFlow) {
                      this.hasFlow = !1;
                      var e = [];
                      this.fillFlow(e),
                      this.metric.clear(),
                      this.stat.fill(e, !0),
                      this.tsdbUtil.sendMetrics(e)
                  }
              }
          }, {
              key: "getMetrics",
              value: function() {
                  var e = [];
                  return this.fillLogin(e),
                  Number(localStorage._noP2p) || (this.fillPunch(e),
                  this.fillPlayRatio(e),
                  this.fillFlow(e),
                  this.fillDetails(e),
                  this.stat.setCore(d.default.CORE.HAS_PUNCH_NODES, 0)),
                  this.metric.clear(),
                  e
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  t % 20 == 0 && this.p2pPlayer.p2pMgr.stream && this.p2pPlayer.p2pMgr.stream.printInfo()
              }
          }, {
              key: "getOldMetrics",
              value: function() {
                  var e = this.p2pPlayer.p2pMgr.stream;
                  if (!e)
                      return [];
                  var t = e.stat
                    , i = [];
                  return i.push({
                      type: l.default.METRIC.WEB_P2P_BW_P2P_VALID,
                      value: t.bw.p2p_valid_bw
                  }),
                  i.push({
                      type: l.default.METRIC.WEB_P2P_BW_P2P_REPEAT,
                      value: t.bw.p2p_repeat_bw
                  }),
                  i.push({
                      type: l.default.METRIC.WEB_P2P_BW_P2P_TOTAL,
                      value: t.bw.p2p_total_bw
                  }),
                  i.push({
                      type: l.default.METRIC.WEB_P2P_BW_CDN_VALID,
                      value: t.bw.cdn_valid_bw
                  }),
                  i.push({
                      type: l.default.METRIC.WEB_P2P_BW_CDN_REPEAT,
                      value: t.bw.cdn_repeat_bw
                  }),
                  i.push({
                      type: l.default.METRIC.WEB_P2P_BW_CDN_TOTAL,
                      value: t.bw.cdn_total_bw
                  }),
                  i.push({
                      type: l.default.METRIC.WEB_P2P_BW_RANGE_VALID,
                      value: t.bw.range_valid_bw
                  }),
                  i.push({
                      type: l.default.METRIC.WEB_P2P_BW_RANGE_TOTAL,
                      value: t.bw.range_total_bw
                  }),
                  i
              }
          }, {
              key: "fillPlayRatio",
              value: function(e) {
                  0 === this.p2pState ? (this.p2pState = -1,
                  e.push({
                      sMetricName: l.default.METRIC.WEB_P2P_PLAY_RATIO,
                      vField: {
                          value: 0
                      }
                  })) : 1 === this.hyPlayer.metrics.getP2p() && e.push({
                      sMetricName: l.default.METRIC.WEB_P2P_PLAY_RATIO,
                      vField: {
                          value: 100
                      }
                  })
              }
          }, {
              key: "fillLogin",
              value: function(e) {
                  if (this.p2pPlayer.p2pMgr.stream) {
                      var t = this.p2pPlayer.p2pMgr.stream.stat;
                      e.push({
                          sMetricName: l.default.METRIC.SDK_VIDEO_LOGIN_SUC,
                          vField: {
                              value: "" !== t.core.user_wan_ip ? 100 : 0,
                              connected: t.core.cdnp_connected ? 100 : 0
                          }
                      })
                  }
              }
          }, {
              key: "fillPunch",
              value: function(e) {
                  if (this.p2pPlayer.p2pMgr.stream) {
                      var t = this.p2pPlayer.p2pMgr.stream;
                      e.push({
                          sMetricName: l.default.METRIC.WEB_P2P_PUNCH,
                          vField: {
                              value: t.getPunchedCnt() > 0 ? 100 : 0,
                              cdnpip: t.sInfo.cdnpIpInt
                          }
                      })
                  }
              }
          }, {
              key: "fillDetails",
              value: function(e) {
                  if (this.p2pPlayer.p2pMgr.stream) {
                      var t = this.p2pPlayer.p2pMgr.stream
                        , i = t.stat
                        , s = t.subStreamMgr.getDelayDetail();
                      e.push({
                          sMetricName: l.default.METRIC.SDK_P2P_DETAILS,
                          vField: {
                              subTotal: 0,
                              subSuc: 0,
                              subFail: 0,
                              subTimeout: 0,
                              subKick: 0,
                              subTry: 0,
                              competeTotal: 0,
                              competeSuc: 0,
                              competeFail: 0,
                              competeTimeout: 0,
                              forceTimes: 0,
                              difPeerNum: 0,
                              tryPunchNum: 0,
                              sucPunchNum: 0,
                              hasPunchNum: t.getPunchedCnt(),
                              punchBack: 0,
                              punchBackSuc: 0,
                              punchBackTry: 0,
                              punchBackRetSuc: i.punch_back_ret.k0 || 0,
                              punchBackRetDif: i.punch_back_ret.k1 || 0,
                              punchBackRetClosing: i.punch_back_ret.k2 || 0,
                              punchBackRetCooling: i.punch_back_ret.k3 || 0,
                              punchBackReject: i.punch_back_ret.k5 || 0,
                              forwardRejectNum: i.forward_reject_cnt,
                              peerStreamNum: 0,
                              cdnpip: t.sInfo.cdnpIpInt,
                              bwUplink: 0,
                              bwDownlink: 0,
                              uplinkNum: t.subStreamMgr.subMgr.getUplinkNum(),
                              uplinkLimit: t.sInfo.curUplinkNum,
                              flowDefault: i.bw.default_bw,
                              flowCompete: i.bw.compete_bw,
                              flowForce: i.bw.force_bw,
                              flowFixed: i.bw.fixed_bw,
                              flowSignalling: i.bw.signal_up_bw,
                              flowSignallingDown: i.bw.signal_down_bw,
                              flowRangeValid: i.bw.range_valid_bw,
                              flowRange: i.bw.range_total_bw,
                              flowCdnValid: i.bw.cdn_valid_bw,
                              flowCdnRepeat: i.bw.cdn_repeat_bw,
                              flowCdn: i.bw.cdn_total_bw,
                              flowP2PValid: i.bw.p2p_valid_bw,
                              flowP2PRepeat: i.bw.p2p_repeat_bw,
                              flowP2PTotal: i.bw.p2p_total_bw,
                              resendTimes: this.record.resendTimes,
                              resendTimeoutCnt: this.record.resendTimeoutCnt,
                              resendErrorTimes: this.record.resendErrorTimes,
                              resendSliceCnt: this.record.resendSliceCnt,
                              resendRespondCnt: this.record.resendRespondCnt,
                              resendLateCnt: this.record.resendLateCnt,
                              resendMissCnt: this.record.resendMissCnt,
                              repeatResendCnt: this.record.repeatResendCnt,
                              repeatResendSucc: this.record.repeatResendSucc,
                              repeatResendFail: this.record.repeatResendFail,
                              resendTimesLimit: this.record.resendTimesLimit,
                              dropFrames: this.record.dropFrames,
                              lossFrames: this.record.dropFrames,
                              playedFrames: this.record.playedFrames,
                              dtsJumpPauseTimes: this.record.dtsJumpPauseTimes,
                              skipFramePauseTimes: this.record.skipFramePauseTimes,
                              fullFrameRatio: this.record.fullFrameRatio,
                              fixedNum: 0,
                              forceNum: 0,
                              competeNum: 0,
                              nodeRttMax: 0,
                              nodeRttMin: 0,
                              nodeRttAvg: 0,
                              streamDelayMax: s.max,
                              streamDelayMin: s.min,
                              streamDelayAvg: s.avg,
                              subNodes: this.subNodes.size,
                              getNodesValid: i.punch_info.valid_cnt,
                              getNodesTotal: i.punch_info.total_cnt
                          }
                      }),
                      this.subNodes.clear(),
                      e.push({
                          sMetricName: l.default.METRIC.SDK_P2P_FORCE_REASON,
                          vField: {
                              forceNoPeer: i.forcesub_reason.nopeer_cnt,
                              forceSubEnd: i.forcesub_reason.subend_cnt,
                              forceSubTimeout: i.forcesub_reason.timeout_cnt,
                              forceSubFail: 0,
                              forceDepthLarge: 0,
                              forceSubFailSwitch: 0,
                              failStreamLimit: i.sub_return["k" + h.default.SubResCode.STREAM_LIMIT] || 0,
                              failEmptyPeer: i.sub_return["k" + h.default.SubResCode.EMPTY_PEER_INFO] || 0,
                              failStreamLate: i.sub_return["k" + h.default.SubResCode.STREAM_LATE] || 0,
                              failUplink: i.sub_return["k" + h.default.SubResCode.SUBSCRIBE_UPLINK_NOT_ENOUGH] || 0,
                              failCycle: i.sub_return["k" + h.default.SubResCode.DETECT_SUBSCRIBE_CYCLE] || 0,
                              failKick: i.sub_return["k" + h.default.SubResCode.KICK_OUT] || 0,
                              failWorst: i.sub_return["k" + h.default.SubResCode.SELF_WORST] || 0,
                              failSliceLate: i.sub_return["k" + h.default.SubResCode.SLICE_LATE] || 0,
                              failSliceFast: i.sub_return["k" + h.default.SubResCode.SLICE_FAST] || 0,
                              failSuc: i.sub_return["k" + h.default.SubResCode.ACCEPT_SUBSCRIBE] || 0,
                              switchStreamLimit: i.switch_return["k" + h.default.SubResCode.STREAM_LIMIT] || 0,
                              switchSliceLate: i.switch_return["k" + h.default.SubResCode.SLICE_LATE] || 0,
                              switchSliceFast: i.switch_return["k" + h.default.SubResCode.SLICE_FAST] || 0,
                              switchStreamLate: i.switch_return["k" + h.default.SubResCode.STREAM_LATE] || 0,
                              switchUplink: i.switch_return["k" + h.default.SubResCode.SUBSCRIBE_UPLINK_NOT_ENOUGH] || 0,
                              switchCycle: i.switch_return["k" + h.default.SubResCode.DETECT_SUBSCRIBE_CYCLE] || 0,
                              switchKick: i.switch_return["k" + h.default.SubResCode.KICK_OUT] || 0,
                              switchWorst: i.switch_return["k" + h.default.SubResCode.SELF_WORST] || 0,
                              switchSuc: i.switch_return["k" + h.default.SubResCode.ACCEPT_SUBSCRIBE] || 0,
                              lastStreamLimit: i.last_return["k" + h.default.SubResCode.STREAM_LIMIT] || 0,
                              lastSliceLate: i.last_return["k" + h.default.SubResCode.SLICE_LATE] || 0,
                              lastSliceFast: i.last_return["k" + h.default.SubResCode.SLICE_FAST] || 0,
                              lastStreamLate: i.last_return["k" + h.default.SubResCode.STREAM_LATE] || 0,
                              lastUplink: i.last_return["k" + h.default.SubResCode.SUBSCRIBE_UPLINK_NOT_ENOUGH] || 0,
                              lastCycle: i.last_return["k" + h.default.SubResCode.DETECT_SUBSCRIBE_CYCLE] || 0,
                              lastKick: i.last_return["k" + h.default.SubResCode.KICK_OUT] || 0,
                              lastWorst: i.last_return["k" + h.default.SubResCode.SELF_WORST] || 0,
                              lastSuc: i.last_return["k" + h.default.SubResCode.ACCEPT_SUBSCRIBE] || 0,
                              leavePingDif: 0,
                              leaveReset: 0
                          }
                      }),
                      e.push({
                          sMetricName: l.default.METRIC.SDK_P2P_VALID_RET,
                          vField: {
                              presenter: i.nonode_return.presenter_cnt,
                              uplink: i.nonode_return.uplink_less_cnt,
                              pull: i.nonode_return.pull_same_cnt,
                              pub: i.nonode_return.pub_same_cnt,
                              sub: i.nonode_return.sub_same_cnt,
                              subed: i.nonode_return.subed_cnt,
                              cooling: i.nonode_return.cool_cnt,
                              delay: i.nonode_return.delay_cnt,
                              rtt: i.nonode_return.rtt_cnt,
                              bw: 0,
                              late: i.nonode_return.late_cnt,
                              fast: i.nonode_return.fast_cnt,
                              none: i.nonode_return.none_cnt,
                              haspunchnum: t.getPunchedCnt()
                          }
                      })
                  }
              }
          }, {
              key: "fillFlow",
              value: function(e) {
                  if (this.p2pPlayer.p2pMgr.stream) {
                      var t = this.p2pPlayer.p2pMgr.stream.stat;
                      e.push({
                          sMetricName: l.default.METRIC.VIDEO_FLOW_P2P,
                          vField: {
                              value: t.bw.p2p_valid_bw
                          }
                      }),
                      e.push({
                          sMetricName: l.default.METRIC.VIDEO_FLOW_LINE,
                          vField: {
                              value: t.bw.cdn_total_bw
                          }
                      }),
                      e.push({
                          sMetricName: l.default.METRIC.WEB_P2P_BW_P2P_VALID,
                          vField: {
                              value: t.bw.p2p_valid_bw
                          }
                      }),
                      e.push({
                          sMetricName: l.default.METRIC.WEB_P2P_BW_P2P_REPEAT,
                          vField: {
                              value: t.bw.p2p_repeat_bw
                          }
                      }),
                      e.push({
                          sMetricName: l.default.METRIC.WEB_P2P_BW_P2P_TOTAL,
                          vField: {
                              value: t.bw.p2p_total_bw
                          }
                      }),
                      e.push({
                          sMetricName: l.default.METRIC.WEB_P2P_BW_CDN_VALID,
                          vField: {
                              value: t.bw.cdn_valid_bw
                          }
                      }),
                      e.push({
                          sMetricName: l.default.METRIC.WEB_P2P_BW_CDN_REPEAT,
                          vField: {
                              value: t.bw.cdn_repeat_bw
                          }
                      }),
                      e.push({
                          sMetricName: l.default.METRIC.WEB_P2P_BW_CDN_TOTAL,
                          vField: {
                              value: t.bw.cdn_total_bw
                          }
                      }),
                      e.push({
                          sMetricName: l.default.METRIC.WEB_P2P_BW_RANGE_VALID,
                          vField: {
                              value: t.bw.range_valid_bw
                          }
                      }),
                      e.push({
                          sMetricName: l.default.METRIC.WEB_P2P_BW_RANGE_TOTAL,
                          vField: {
                              value: t.bw.range_total_bw
                          }
                      }),
                      e.push({
                          sMetricName: l.default.INTERVAL.SDK_P2P_FLOW,
                          vField: {
                              p2pvalid: t.bw.p2p_valid_bw,
                              p2prepeat: t.bw.p2p_repeat_bw,
                              p2ptotal: t.bw.p2p_total_bw,
                              cdnvalid: t.bw.cdn_valid_bw,
                              cdnrepeat: t.bw.cdn_repeat_bw,
                              cdntotal: t.bw.cdn_total_bw,
                              rangevalid: t.bw.range_valid_bw,
                              rangetotal: t.bw.range_total_bw,
                              patchflow: t.bw.patch_bw,
                              defaultflow: t.bw.default_bw,
                              fastflow: t.bw.fast_bw,
                              compete: t.bw.compete_bw,
                              fixed: t.bw.fixed_bw,
                              force: t.bw.force_bw,
                              signalling: t.bw.signal_up_bw,
                              signallingdown: t.bw.signal_down_bw
                          }
                      })
                  }
              }
          }, {
              key: "addValue",
              value: function(e, t, i) {
                  var s = 0;
                  e.has(t) && (s = e.get(t)),
                  e.set(t, s + i)
              }
          }, {
              key: "recordPlayBuf",
              value: function() {
                  this.playBufLength = this.getMetricValue(e.keys.SERVER_TOTAL_STREAM_FLOW)
              }
          }, {
              key: "printLoadFail",
              value: function(t) {
                  if (Number(localStorage._printP2PInfo)) {
                      var i = this.getMetricValue(e.keys.SERVER_TOTAL_STREAM_FLOW);
                      t ? u.default.warn("出视频失败，当前收到数据，bufferLength", i) : u.default.warn("出视频成功，当前收到数据，bufferLength", i, "出视频时BufferLength", this.playBufLength)
                  }
              }
          }, {
              key: "getValueFromMap",
              value: function(e, t) {
                  return e.has(t) ? e.get(t) : 0
              }
          }, {
              key: "getMetricValue",
              value: function(e) {
                  return this.metric.has(e) ? this.metric.get(e) : 0
              }
          }]),
          e
      }()
        , c = 5e3;
      f.keys = {
          P2P_TOTAL_STREAM_FLOW: 1,
          P2P_VALID_STREAM_FLOW: 2,
          SERVER_TOTAL_STREAM_FLOW: 3,
          SERVER_VALID_STREAM_FLOW: 4,
          RESEND_SEQ_NUM: 7,
          REAL_UPLINK_STREAM_SUM: 8,
          SUBSCRIBE_TIMEOUT_TIMES: 10,
          SUBSCRIBE_FAILED_TIMES: 11,
          SUBSCRIBE_SUCCESS_TIMES: 12,
          SUBSCRIBE_TOTAL_TIMES: 14,
          INVALID_PACKET_NUM: 13,
          TOTAL_PEER_NODES: 22,
          ACTIVE_PUNCH_NODES: 23,
          PASSIVE_PUNCH_NODES: 24,
          TRY_PUNCH_NUM: 29,
          PUNCH_FAIL_NUM: 30,
          PUNCH_SUC_NUM: 31,
          FORWARD_REJECT_NUM: 32,
          GET_NODES_VALID: a(),
          GET_NODES_TOTAL: a(),
          SUB_NODES: a(),
          CDN_SLICE_SEND_COUNT: 85,
          CDN_SLICE_RECV_COUNT: 86,
          PUNCH_FAIL_HAS_ICE: 500,
          PUNCH_FAIL_NO_ICE: 501,
          RANGE_TOTAL_STREAM_FLOW: 502,
          RANGE_VALID_STREAM_FLOW: 503,
          SLICE_REPEAT_CDN: 504,
          SLICE_REPEAT_P2P: 505,
          PATCH_FLOW: a(),
          SUB_TIMEOUT_TIMES: a(),
          SUB_SUC_TIMES: a(),
          SUB_FAIL_TIMES: a(),
          SUB_TOTAL_TIMES: a(),
          SUB_TRY_TIMES: a(),
          SUB_KICK_TIMES: a(),
          COMPETE_TIMEOUT_TIMES: a(),
          COMPETE_SUC_TIMES: a(),
          COMPETE_FAIL_TIMES: a(),
          COMPETE_TOTAL_TIMES: a(),
          DIF_PEER_NUM: a(),
          FORCE_NO_PEER: a(),
          FORCE_SUB_END: a(),
          FORCE_SUB_TIMEOUT: a(),
          FORCE_SUB_FAIL: a(),
          FORCE_DEPTH_LARGE: a(),
          FORCE_SUB_FAIL_SWITCH: a(),
          FLOW_COMPETE: a(),
          FLOW_FORCE: a(),
          FLOW_FIXED: a(),
          FLOW_SINGLLING: a(),
          FLOW_DEFAULT: a(),
          FLOW_FAST: a(),
          FLOW_SINGLLING_DOWN: a(),
          FORCE_TIMES: a(),
          REMOVE_SUB_TIMES: a(),
          SUB_RES_TOTAL: a(),
          SUB_FAIL_SUC: a(),
          SUB_FAIL_STREAM_LIMIT: a(),
          SUB_FAIL_SLICE_LATE: a(),
          SUB_FAIL_SLICE_FAST: a(),
          SUB_FAIL_SLICE_LARGE: a(),
          SUB_FAIL_EMPTY_PEER_INFO: a(),
          SUB_FAIL_STREAM_LATE: a(),
          SUB_FAIL_SUBSCRIBE_UPLINK_NOT_ENOUGHE: a(),
          SUB_FAIL_SUBSCRIBE_CYCLE: a(),
          SUB_FAIL_OTHER: a(),
          SUB_FAIL_KICK_OUT: a(),
          SUB_FAIL_SELF_WORST: a(),
          SWITCH_LAST_PUB: a(),
          SWITCH_STREAM_LIMIT: a(),
          SWITCH_SLICE_LARGE: a(),
          SWITCH_SLICE_LATE: a(),
          SWITCH_SLICE_FAST: a(),
          SWITCH_EMPTY_PEER_INFO: a(),
          SWITCH_STREAM_LATE: a(),
          SWITCH_SUBSCRIBE_UPLINK_NOT_ENOUGH: a(),
          SWITCH_SUBSCRIBE_CYCLE: a(),
          SWITCH_KICK_OUT: a(),
          SWITCH_SELF_WORST: a(),
          SWITCH_SUC: a(),
          SWITCH_OTHER: a(),
          LAST_STREAM_LIMIT: a(),
          LAST_SLICE_LARGE: a(),
          LAST_SLICE_LATE: a(),
          LAST_SLICE_FAST: a(),
          LAST_STREAM_LATE: a(),
          LAST_UPLINK: a(),
          LAST_CYCLE: a(),
          LAST_KICK: a(),
          LAST_SELF_WORST: a(),
          LAST_SUC: a(),
          LAST_OTHER: a(),
          DEFAULT_REASON: a(),
          LEAVE_PING_DIF: a(),
          LEAVE_RESET: a(),
          PUNCH_BACK_TIMES: a(),
          PUNCH_BACK_SUC: a(),
          PUNCH_BACK_TRY: a(),
          PUNCH_BACK_RET_SUC: a(),
          PUNCH_BACK_RET_DIF_STREAM: a(),
          PUNCH_BACK_RET_CLOSING: a(),
          PUNCH_BACK_RET_COOLING: a(),
          PUNCH_BACK_RET_REQUEST: a(),
          PUNCH_BACK_REJECT: a(),
          RESEND_FETCH_ERROR: a(),
          VALID_RET_PRESENTER: a(),
          VALID_RET_UPLINK: a(),
          VALID_RET_PULL: a(),
          VALID_RET_SUBED: a(),
          VALID_RET_COOLING: a(),
          VALID_RET_DELAY: a(),
          VALID_RET_RTT: a(),
          VALID_RET_BW: a(),
          VALID_RET_LATE: a(),
          VALID_RET_FAST: a(),
          VALID_RET_NONE: a(),
          CLIENT_TYPE: 160,
          RATE: 120
      },
      t.default = f
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(206))
        , o = s(i(2))
        , u = s(i(296))
        , l = s(i(4))
        , d = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.p2pPlayer = t,
              this.handler = new u.default(t),
              this.stream = null,
              this.started = !1,
              this.fast_bw = 0
          }
          return (0,
          n.default)(e, [{
              key: "onFastSliceData",
              value: function(e) {
                  this.stream ? (this.fast_bw > 0 && (this.stream.stat.bw.cdn_total_bw += this.fast_bw,
                  this.stream.stat.bw.fast_bw += this.fast_bw,
                  this.fast_bw = 0),
                  this.stream.onSliceData(e)) : this.fast_bw += e.parent.payload.length + 10
              }
          }, {
              key: "urgentResend",
              value: function(e) {
                  this.stream && this.stream.urgentResend(e)
              }
          }, {
              key: "setLastPlaySeq",
              value: function(e) {
                  this.stream && this.stream.setLastPlaySeq(e)
              }
          }, {
              key: "loadLib",
              value: function() {
                  l.default.log("P2pMgr.loadLib"),
                  r.default.on(r.default.ON_LOAD, this.onLoadLib, this),
                  r.default.loadLib(this.p2pPlayer.info.h5Root)
              }
          }, {
              key: "onLoadLib",
              value: function() {
                  l.default.log("P2pMgr.onLoadLib"),
                  r.default.off(r.default.ON_LOAD, this.onLoadLib, this),
                  this.stream || (this.stream = r.default.playStream(this.p2pPlayer.info),
                  this.stream.streamHandler = this.handler,
                  this.stream.tsdbUtil = this.p2pPlayer.tsdbUtil,
                  this.stream.tsdbStat = this.p2pPlayer.stat,
                  this.stream.sliceProtoHandler.on(o.default.PP2pSliceData, this.p2pPlayer.onSliceData, this.p2pPlayer)),
                  this.stream.start(),
                  this.startSubStream()
              }
          }, {
              key: "delStreamHandler",
              value: function() {
                  this.stream && this.stream.sliceProtoHandler.off(o.default.PP2pSliceData, this.p2pPlayer.onSliceData, this.p2pPlayer)
              }
          }, {
              key: "start",
              value: function() {
                  this.started = !0,
                  this.startSubStream()
              }
          }, {
              key: "startSubStream",
              value: function() {
                  this.started && this.stream && this.stream.startSubStream()
              }
          }, {
              key: "stop",
              value: function() {
                  this.started = !1,
                  this.fast_bw = 0,
                  this.delStreamHandler(),
                  this.stopStream()
              }
          }, {
              key: "stopStream",
              value: function() {
                  this.stream && this.stream.stop()
              }
          }, {
              key: "onRestart",
              value: function() {
                  this.fast_bw = 0,
                  this.stream && this.stream.onRestart()
              }
          }, {
              key: "destroy",
              value: function() {
                  this.stop(),
                  this.stream = null,
                  r.default.clearVideo()
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(40))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(41))
        , u = s(i(42))
        , l = s(i(208))
        , d = i(12)
        , h = function(e) {
          function t(e) {
              (0,
              n.default)(this, t);
              var i = (0,
              o.default)(this, (t.__proto__ || (0,
              a.default)(t)).call(this));
              return i.p2pPlayer = e,
              i
          }
          return (0,
          u.default)(t, e),
          (0,
          r.default)(t, [{
              key: "onNoVideo",
              value: function() {
                  this.p2pPlayer.hyPlayer.trigger(d.Event.NO_VIDEO)
              }
          }, {
              key: "onRestart",
              value: function(e) {
                  this.p2pPlayer.onRestart(e)
              }
          }, {
              key: "turnToFlv",
              value: function(e) {
                  this.p2pPlayer.turnToFlv(e)
              }
          }, {
              key: "onGetToken",
              value: function(e) {
                  this.p2pPlayer.info.sFlvAntiCode = e,
                  this.p2pPlayer.loaderMgr.antiCode = e
              }
          }, {
              key: "autoReport",
              value: function() {
                  this.p2pPlayer.hyPlayer.trigger(d.Event.P2P_REPORT)
              }
          }, {
              key: "getBufferLen",
              value: function() {
                  return this.p2pPlayer.bufferLen
              }
          }]),
          t
      }(l.default);
      t.default = h
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(202)),
      s(i(4)))
        , o = s(i(22))
        , u = s(i(13))
        , l = s(i(24))
        , d = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.hyPlayer = t,
              this.stat = t.stat,
              this.lastTickTime = 0,
              this.catonCheckStart = !0,
              this.lastCheckerTimeStamp = 0,
              this.visibilityChanged = !1,
              this.lostVisibility = !1,
              this.hidden = "",
              this.visibilityChange = "",
              this.addVisibilityChange()
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.lastTickTime = 0,
                  this.onRemoveWakeTimeoutChecker()
              }
          }, {
              key: "addVisibilityChange",
              value: function() {
                  void 0 !== document.hidden ? (this.hidden = "hidden",
                  this.visibilityChange = "visibilitychange") : void 0 !== document.msHidden ? (this.hidden = "msHidden",
                  this.visibilityChange = "msvisibilitychange") : void 0 !== document.webkitHidden && (this.hidden = "webkitHidden",
                  this.visibilityChange = "webkitvisibilitychange"),
                  document.addEventListener(this.visibilityChange, this.handleVisibilityChange.bind(this), !1)
              }
          }, {
              key: "handleVisibilityChange",
              value: function() {
                  document[this.hidden] ? this.lostVisibility = !0 : this.lostVisibility = !1,
                  this.visibilityChange = !0
              }
          }, {
              key: "onCheckFastTimer",
              value: function(e, t) {
                  if (0 != this.lastCheckerTimeStamp && this.catonCheckStart) {
                      var i = e - this.lastCheckerTimeStamp;
                      this.onWakeTimeoutTimeout(i)
                  }
                  this.lastCheckerTimeStamp = e
              }
          }, {
              key: "startWakeTimeoutChecker",
              value: function() {
                  this.catonCheckStart = !0
              }
          }, {
              key: "onWakeTimeoutTimeout",
              value: function(e) {
                  if (this.lostVisibility || this.visibilityChange)
                      this.visibilityChange = !1;
                  else if (!(e < 3e3 || e > 15e3)) {
                      this.hyPlayer.p2pCooling = !0,
                      localStorage.setItem("p2p_cooling_date", (new Date).getTime());
                      var t = [{
                          sMetricName: o.default.METRIC.SDK_P2P_COOLING,
                          vDimension: {
                              b_browser: l.default.name,
                              b_version: l.default.version.major
                          }
                      }, this.stat.createAct(u.default.ACT.P2P_COOLING, {
                          str: [l.default.name, l.default.version.major]
                      })];
                      this.hyPlayer.tsdbUtil.sendMetrics(t),
                      r.default.log("WakeChecker onWakeTimeoutTimeout large than 3000 cost = " + e),
                      100 * Math.random() > 99 && this.hyPlayer.trigger(Event.P2P_REPORT)
                  }
              }
          }, {
              key: "onWakeTimeoutError",
              value: function(e) {
                  this.onRemoveWakeTimeoutChecker(),
                  r.default.log("MAIN: ", "ERROR", e),
                  r.default.log("filename:" + e.filename + "-message:" + e.message + "-lineno:" + e.lineno)
              }
          }, {
              key: "onRemoveWakeTimeoutChecker",
              value: function() {
                  this.catonCheckStart = !1,
                  this.lastCheckerTimeStamp = 0
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(209))
        , o = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.p2pPlayer = t,
              window.addEventListener("beforeunload", this.onBeforeUnload.bind(this))
          }
          return (0,
          n.default)(e, [{
              key: "onBeforeUnload",
              value: function(e) {
                  this.p2pPlayer.stop(r.default.DIF_STREAM)
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.sP2pUrl = "",
              this.domainList = [],
              this.cdnip = "",
              this.domain = ""
          }
          return (0,
          n.default)(e, [{
              key: "initDomain",
              value: function(e, t) {
                  if (this.sP2pUrl = e,
                  this.domainList = t,
                  this.domainList && this.domainList.length) {
                      r.default.log("P2PPlayer.initDomain:\n\t" + this.domainList.join("\n\t"));
                      var i = this.sP2pUrl.match(/\/\/(.+?)\//i);
                      this.domain = i ? i[1] : "";
                      var s = this.domainList.shift();
                      s !== this.domain && (this.cdnip = s,
                      this.sP2pUrl = this.sP2pUrl.replace(/\/\/(.+?)\//, "//" + s + "/" + this.domain + "/"))
                  }
                  return this.sP2pUrl
              }
          }, {
              key: "changeDomain",
              value: function() {
                  if (this.domainList && "" !== this.domain) {
                      var e = this.domainList.shift();
                      if (e === this.domain)
                          return this.changeDomain();
                      var t = new RegExp("//(.*?)" + this.domain + "/");
                      return e ? (this.cdnip = e,
                      r.default.warn("P2PPlayer change domain to " + e),
                      this.sP2pUrl = this.sP2pUrl.replace(t, "//" + e + "/" + this.domain + "/")) : (r.default.warn("P2PPlayer change domain to " + this.domain),
                      this.cdnip = "",
                      this.sP2pUrl = this.sP2pUrl.replace(t, "//" + this.domain + "/"),
                      this.domainList = null),
                      e
                  }
                  return null
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(40))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(41))
        , u = s(i(42))
        , l = s(i(301))
        , d = s(i(2))
        , h = function(e) {
          function t() {
              return (0,
              n.default)(this, t),
              (0,
              o.default)(this, (t.__proto__ || (0,
              a.default)(t)).call(this))
          }
          return (0,
          u.default)(t, e),
          (0,
          r.default)(t, [{
              key: "onSlice",
              value: function(e) {
                  var t = new DataView(e.payload.buffer)
                    , i = this.unmarshall(e.uri, t);
                  i.seq = e.seq,
                  this.trigger(d.default.PP2pSliceData, {
                      parent: e,
                      child: i
                  })
              }
          }]),
          t
      }(l.default);
      t.default = h
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(40))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(41))
        , u = s(i(42))
        , l = s(i(207))
        , d = s(i(48))
        , h = s(i(2))
        , f = s(i(4))
        , c = function(e) {
          function t() {
              (0,
              n.default)(this, t);
              var e = (0,
              o.default)(this, (t.__proto__ || (0,
              a.default)(t)).call(this));
              return e.printProtocol = !!Number(localStorage._printProtocol),
              e
          }
          return (0,
          u.default)(t, e),
          (0,
          r.default)(t, [{
              key: "onData",
              value: function(e, t) {
                  var i = this.unmarshall(e, t);
                  this.trigger(e, i)
              }
          }, {
              key: "unmarshall",
              value: function(e, t) {
                  var s = new d.default(t)
                    , a = h.default[e]
                    , n = s
                    , r = null;
                  try {
                      r = i(131)("./" + a).default
                  } catch (t) {
                      f.default.warn("%c[x] Unmatched protocol " + (e >> 8) + " " + a, "color:red;background:#FFF0F0")
                  }
                  return r && (void 0 === (n = new r).unmarshall ? f.default.error("[x]" + a + ".unmarshall undefined!") : n.unmarshall(s)),
                  this.printProtocol && !p[a] && f.default.debug("%c<<<<< " + a, logcss("#0000E3"), n),
                  n
              }
          }]),
          t
      }(l.default)
        , p = {
          PCdnProxyPing: 1,
          PCdnProxyPingRes: 1,
          PP2pSliceAudioData: 1,
          PP2pSliceVideoData: 1,
          PP2pSliceControlData: 1,
          PCdnP2pGetNode: 1,
          PCdnP2pGetNodeRes: 1,
          P2POffer: 1,
          P2PAnswer: 1,
          P2PCandidate: 1,
          P2POfferReject: 1,
          P2PRequestOffer: 1,
          PCdnP2PWSForward: 1,
          PCdnP2PWSForwardReject: 1,
          PCdnP2pReportLog: 1,
          PCDNSubscribeReq: 1,
          PCDNSubscribeRes: 1,
          PCDNCompeteSubscribeReq: 1,
          PCDNCompeteSubscribeRes: 1,
          P2PPunchBackReq: 1,
          P2PPunchBackRsp: 1
      };
      t.default = c
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = i(12)
        , o = s(i(303))
        , u = s(i(66))
        , l = s(i(210))
        , d = s(i(4))
        , h = s(i(6))
        , f = s(i(10))
        , c = s(i(13))
        , p = s(i(307))
        , v = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.config = {
                  autoStartLoad: !0,
                  maxBufferLength: 30,
                  bs2Delay: 3e3,
                  fragLoadingTimeOut: 5e3,
                  fragLoadingMaxRetry: 1,
                  fragLoadingRetryDelay: 1e3,
                  listLoadingTimeOut: 3e3,
                  listLoadingMaxRetry: 3,
                  listLoadingRetryDelay: 1e3,
                  appendErrorMaxRetry: 200,
                  minFragBufferNum: 3,
                  autoReconnect: !0
              },
              this.hyPlayer = t,
              this.stat = t.stat,
              this.isLive = null,
              this.url = null,
              this.seekTime = 0,
              this.playlist = null,
              this.mse = null,
              this.userPaused = !1,
              this.targetDuration = 0,
              this.isLoading = !1,
              this.startTs = 0,
              this.pauseTs = 0,
              this.playTs = 0,
              this.started = !1,
              this.isTryAgain = !1,
              this.fragLoader = null,
              this.tryTimer = null,
              this.hasVideo = !1,
              this.playStat = new p.default(this),
              this.firstFragLoadTs = 0,
              this.firstFragLoadedTs = 0,
              this.firstFragSize = 0
          }
          return (0,
          n.default)(e, [{
              key: "destroy",
              value: function() {
                  d.default.log("HlsPlayer.destroy"),
                  this.started = !1,
                  this.removeTimer(),
                  this.tryTimer && (clearTimeout(this.tryTimer),
                  this.tryTimer = null),
                  this.mse && (this.mse.destroy(),
                  this.mse = null),
                  this.playlist && (this.playlist.destroy(),
                  this.playlist = null),
                  this.releaseLoader()
              }
          }, {
              key: "reset",
              value: function() {
                  d.default.log("HlsPlayer.reset"),
                  this.removeTimer(),
                  this.isLive = null,
                  this.url = null,
                  this.seekTime = 0,
                  this.targetDuration = 0,
                  this.isLoading = !1,
                  this.startTs = 0,
                  this.pauseTs = 0,
                  this.playTs = 0,
                  this.hasVideo = !1,
                  this.started = !1,
                  this.userPaused = !1,
                  this.isTryAgain = !1,
                  this.playStat.stop(),
                  this.firstFragLoadTs = 0,
                  this.firstFragLoadedTs = 0,
                  this.firstFragSize = 0,
                  this.stat.reset()
              }
          }, {
              key: "releaseLoader",
              value: function() {
                  this.fragLoader && (this.fragLoader.destroy(),
                  this.fragLoader = null)
              }
          }, {
              key: "removeTimer",
              value: function() {
                  f.default.remove(this.onCheckTimer, this),
                  f.default.remove(this.onCheckFastTimer, this)
              }
          }, {
              key: "setConfig",
              value: function(e, t) {}
          }, {
              key: "start",
              value: function(e) {
                  var t = e.url
                    , i = e.isLive
                    , s = void 0 !== i && i
                    , a = e.seekTime
                    , n = void 0 === a ? 0 : a;
                  t ? (this.stop(),
                  this.url = t,
                  this.isLive = s,
                  d.default.log("HlsPlayer.start isLive=" + this.isLive + " url=" + t),
                  this.playlist = new o.default(this),
                  this.mse = new u.default(this,"ts",s),
                  this.playlist.loadManifest(this.url),
                  this.seek(n || this.seekTime),
                  this.startTs = h.default.now(),
                  this.started = !0,
                  this.playStat.start(),
                  this.stat.setComDim(c.default.DIM_COM.P2P, c.default.LIVE_TYPE.HLS)) : d.default.error("HlsPlayer.start invalid argument, pls check the url.")
              }
          }, {
              key: "stop",
              value: function() {
                  this.started && (d.default.log("HlsPlayer.stop"),
                  this.destroy(),
                  this.reset())
              }
          }, {
              key: "seek",
              value: function(e) {
                  if (!this.isLive && null != e) {
                      if (this.seekTime = e,
                      0 == e) {
                          if (!this.mse || !this.mse.video)
                              return;
                          if (0 == this.mse.video.currentTime)
                              return
                      }
                      this.playlist && (d.default.log("HlsPlayer.seek " + e),
                      e = Math.max(0, Number(e)),
                      this.playlist.seek(e) ? (this.pause(),
                      this.mse.seek(e),
                      this.releaseLoader(),
                      this.isLoading = !1,
                      this.loadFragment()) : this.playlist.firstLevelLoaded && (d.default.warn("HlsPlayer.seek out of range."),
                      this.stop(),
                      this.onAnchorStop()))
                  }
              }
          }, {
              key: "pause",
              value: function() {
                  this.started && (d.default.info("HlsPlayer.pause"),
                  this.userPaused = !0,
                  this.mse && this.mse.pause())
              }
          }, {
              key: "play",
              value: function() {
                  this.started && (d.default.info("HlsPlayer.play"),
                  this.userPaused = !1,
                  this.mse && this.mse.play())
              }
          }, {
              key: "setVolume",
              value: function(e) {
                  this.mse && this.mse.setVolume(e)
              }
          }, {
              key: "getVolume",
              value: function() {
                  return this.mse ? this.mse.getVolume() : -1
              }
          }, {
              key: "getCurrentTime",
              value: function() {
                  return this.mse.getCurrentRealTime()
              }
          }, {
              key: "setMuted",
              value: function(e) {
                  this.mse && this.mse.setMuted(e)
              }
          }, {
              key: "getMuted",
              value: function() {
                  return this.mse ? this.mse.getMuted() : -1
              }
          }, {
              key: "reconnectLive",
              value: function() {
                  if (d.default.log("HlsPlayer.reconnectLive"),
                  this.isLive) {
                      var e = this.url
                        , t = this.isLive;
                      this.destroy(),
                      this.reset(),
                      this.start({
                          url: e,
                          isLive: t
                      })
                  } else
                      this.onPlayerError()
              }
          }, {
              key: "setTargetDuration",
              value: function(e) {
                  this.targetDuration = e * this.config.minFragBufferNum
              }
          }, {
              key: "loadFragment",
              value: function() {
                  if (!this.isLoading) {
                      var e = void 0;
                      if (0 == this.seekTime) {
                          var t = this.targetDuration || this.config.maxBufferLength
                            , i = this.mse.getPlayVideo();
                          if ((e = this.bufferedInfo(i.currentTime, i.buffered).len) >= t)
                              return
                      }
                      var s = this.playlist.getNextFrag();
                      if (s) {
                          var a = this.config
                            , n = a.bs2Delay + this.targetDuration / 3 * 1e3
                            , r = s.url;
                          this.isLoading = !0,
                          0 == this.firstFragLoadTs && (this.firstFragLoadTs = h.default.now()),
                          this.releaseLoader(),
                          this.fragLoader = new l.default(a),
                          s.byteRangeEndOffset && (this.fragLoader.fromByte = s.byteRangeStartOffset,
                          this.fragLoader.toByte = s.byteRangeEndOffset - 1),
                          this.fragLoader.load(r, "arraybuffer", this.loadSuccess.bind(this), this.loadError.bind(this), this.loadTimeout.bind(this), n, a.fragLoadingMaxRetry, a.fragLoadingRetryDelay)
                      } else if (null != e && e <= .05)
                          if (this.removeTimer(),
                          d.default.log("HlsPlayer.loadFragment ANCHOR_STOP bufferedLen=" + e.toFixed(2)),
                          this.onAnchorStop(),
                          this.isLive) {
                              if (this.isTryAgain)
                                  return;
                              this.isTryAgain = !0,
                              this.tryTimer = setTimeout(function() {
                                  d.default.info("HlsPlayer.loadFragment ANCHOR_STOP try again"),
                                  this.reconnectLive()
                              }
                              .bind(this), 3e3)
                          } else
                              this.destroy(),
                              this.reset();
                      else
                          this.seekTime > 0 && (d.default.warn("HlsPlayer.seek out of range."),
                          this.stop(),
                          this.onAnchorStop())
                  }
              }
          }, {
              key: "loadSuccess",
              value: function(e, t) {
                  var i = e.currentTarget.response
                    , s = this.playlist.currLevel
                    , a = this.playlist.currFrag
                    , n = s.details.totalduration;
                  0 == this.firstFragLoadedTs && (this.firstFragLoadedTs = h.default.now(),
                  this.firstFragSize = i.byteLength / 1024 | 0),
                  this.mse.appendTs({
                      data: i,
                      audioCodec: s.audioCodec,
                      videoCodec: s.videoCodec,
                      timeOffset: a.start,
                      duration: n,
                      discontinuity: a.discontinuity,
                      level: a.level,
                      sn: a.sn
                  }),
                  a.seeking && (a.seeking = !1,
                  this.mse.seek(this.seekTime),
                  this.onVideoSeek(this.seekTime),
                  this.play(),
                  this.seekTime = 0),
                  f.default.has(this.onCheckTimer, this) || (f.default.add(this.onCheckTimer, this, 1e3),
                  f.default.add(this.onCheckFastTimer, this, 100)),
                  this.isLoading = !1
              }
          }, {
              key: "loadError",
              value: function(e) {
                  d.default.warn("load fragment error:" + e.currentTarget.status),
                  this.isLoading = !1,
                  this.config.autoReconnect && this.reconnectLive()
              }
          }, {
              key: "loadTimeout",
              value: function(e) {
                  d.default.warn("load fragment timeout", e),
                  this.isLoading = !1,
                  this.config.autoReconnect && this.reconnectLive()
              }
          }, {
              key: "bufferedInfo",
              value: function(e, t) {
                  var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : .3
                    , s = []
                    , a = []
                    , n = void 0
                    , r = void 0
                    , o = void 0
                    , u = void 0
                    , l = void 0;
                  for (l = 0; l < t.length; l++)
                      s.push({
                          start: t.start(l),
                          end: t.end(l)
                      });
                  for (s.sort(function(e, t) {
                      return e.start - t.start || t.end - e.end
                  }),
                  l = 0; l < s.length; l++) {
                      var d = a.length;
                      if (d) {
                          var h = a[d - 1].end;
                          s[l].start - h < i ? s[l].end > h && (a[d - 1].end = s[l].end) : a.push(s[l])
                      } else
                          a.push(s[l])
                  }
                  for (l = 0,
                  n = 0,
                  r = o = e; l < a.length; l++) {
                      var f = a[l].start
                        , c = a[l].end;
                      if (e + i >= f && e < c)
                          r = f,
                          n = (o = c) - e;
                      else if (e + i < f) {
                          u = f;
                          break
                      }
                  }
                  return {
                      len: n,
                      start: r,
                      end: o,
                      nextStart: u
                  }
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  if (this.started && this.mse && (this.loadFragment(),
                  !this.userPaused && (this.mse && this.mse.onCheckTimer(e, t),
                  this.playlist && this.playlist.onCheckTimer(t),
                  this.playTs > 0))) {
                      var i = e - this.pauseTs;
                      this.playStat && (this.pauseTs > 0 && i > 200 && this.playStat.setPause(),
                      t % 20 == 0 && this.playStat.report()),
                      this.pauseTs > 0 && i > 8e3 && (d.default.warn("HlsPlayer.onCheckTimer pauseTime=" + i),
                      this.isLive ? this.reconnectLive() : (this.onPlayerError(),
                      this.pauseTs = 0))
                  }
              }
          }, {
              key: "onCheckFastTimer",
              value: function(e, t) {
                  this.started && this.mse && !this.userPaused && this.mse && this.mse.onCheckFastTimer(e, t)
              }
          }, {
              key: "onPlayVideo",
              value: function(e, t, i, s) {
                  var a = h.default.now();
                  if (this.playTs = a,
                  this.hasVideo = s,
                  e.volume = this.hyPlayer.volume,
                  0 !== this.startTs) {
                      var n = a - this.startTs
                        , o = this.playlist.manifestLoadedTs - this.startTs
                        , u = this.firstFragLoadTs - this.playlist.manifestLoadedTs
                        , l = this.firstFragLoadedTs - this.firstFragLoadTs;
                      this.hyPlayer.tsdbUtil.sendHlsTime(n, o, u, l, this.firstFragSize),
                      d.default.log("%cHlsPlayer.onPlayVideo loadTime=" + n, "color:#A23400;background:#FFF5C2"),
                      this.startTs = 0
                  }
                  s && (this.hyPlayer.trigger(r.Event.VIDEO_PLAY, {
                      video: e,
                      width: t,
                      height: i
                  }),
                  this.hyPlayer.trigger(r.Event.PLAY_STATUS, {
                      status: r.Status.VIDEO_PLAYING
                  }))
              }
          }, {
              key: "onVideoStop",
              value: function(e, t) {
                  d.default.log("HlsPlayer.onVideoStop hasVideo=" + t),
                  this.hasVideo = !1,
                  t && (this.hyPlayer.trigger(r.Event.PLAY_STATUS, {
                      status: r.Status.VIDEO_STOP
                  }),
                  this.hyPlayer.trigger(r.Event.VIDEO_STOP, {
                      video: e
                  }))
              }
          }, {
              key: "onAnchorStop",
              value: function() {
                  var e = this.mse ? this.mse.getPlayVideo() : null;
                  this.hyPlayer.trigger(r.Event.ANCHOR_STOP, {
                      video: e
                  })
              }
          }, {
              key: "onPlayerError",
              value: function(e) {
                  var t = this.mse ? this.mse.getPlayVideo() : null;
                  this.hyPlayer.trigger(r.Event.H5_PLAYER_ERROR, {
                      video: t
                  })
              }
          }, {
              key: "onPlayPause",
              value: function(e, t) {
                  if (t && (this.pauseTs = e,
                  this.hyPlayer.trigger(r.Event.PLAY_STATUS, {
                      status: r.Status.VIDEO_CACHING
                  }),
                  this.playlist && !this.isLive)) {
                      var i = 1e3 * this.playlist.totalDuration
                        , s = this.mse ? this.mse.getCurrentTime() : 0;
                      i > 0 && s > 0 && Math.abs(i - s) < 1e3 && (d.default.warn("HlsPlayer detect anchor stop."),
                      this.onAnchorStop(),
                      this.stop())
                  }
              }
          }, {
              key: "onPlayResume",
              value: function(e, t) {
                  this.pauseTs = 0,
                  this.hyPlayer.trigger(r.Event.PLAY_STATUS, {
                      status: r.Status.VIDEO_PLAYING
                  })
              }
          }, {
              key: "onVideoSeek",
              value: function(e) {
                  var t = this.mse ? this.mse.getPlayVideo() : null;
                  this.hyPlayer.trigger(r.Event.VIDEO_SEEK, {
                      video: t,
                      currentTime: e
                  })
              }
          }]),
          e
      }();
      t.default = v
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(210))
        , o = s(i(4))
        , u = s(i(6))
        , l = s(i(304))
        , d = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.hls = t,
              this.isLive = t.isLive,
              this.config = t.config,
              this.m3u8Parser = new l.default(t.isLive),
              this.currLevelId = 0,
              this.currFrag = null,
              this.levels = [],
              this.firstLevelLoaded = !1,
              this.loader = null,
              this.seekTime = 0,
              this.manifestLoadedTs = 0
          }
          return (0,
          n.default)(e, [{
              key: "destroy",
              value: function() {
                  this.m3u8Parser = null,
                  this.currLevelId = 0,
                  this.currFrag = null,
                  this.levels = null,
                  this.firstLevelLoaded = !1,
                  this.loader.abort(),
                  this.loader = null,
                  this.seekTime = 0,
                  this.manifestLoadedTs = 0
              }
          }, {
              key: "getNextFrag",
              value: function() {
                  var e = this.currDetails
                    , t = e.fragments
                    , i = null;
                  return this.isLive ? t.length > 0 && (i = t.shift()) : (null == e.fragIdx && (e.fragIdx = 0),
                  e.fragIdx < t.length && (i = t[e.fragIdx++])),
                  i && (this.currFrag = i),
                  i
              }
          }, {
              key: "seek",
              value: function(e) {
                  if (this.isLive)
                      return !1;
                  var t = this.currDetails
                    , i = t ? t.fragments : null;
                  if (!i)
                      return this.seekTime = e,
                      !1;
                  e = Math.min(e, t.totalduration);
                  var s = void 0
                    , a = void 0
                    , n = !1;
                  if (this.isLive)
                      for (; i.length && !((s = i[0]).start > e); ) {
                          if (a = s.start + s.duration,
                          s.start <= e && a > e) {
                              a - .2 < e && i.length > 1 && i.shift(),
                              i.length > 0 && (i[0].seeking = !0,
                              n = !0);
                              break
                          }
                          i.shift()
                      }
                  else {
                      for (var r = 0, u = i.length; r < u; ) {
                          if (a = (s = i[r]).start + s.duration,
                          s.start <= e && a > e) {
                              a - .2 < e && r < u - 1 && r++,
                              r < u && (i[r].seeking = !0,
                              n = !0);
                              break
                          }
                          r++
                      }
                      o.default.info("HlsPlaylist.seek seekTime=" + e + " fragIdx=" + t.fragIdx + ", " + r, i[r] ? i[r].sn : ""),
                      t.fragIdx = r
                  }
                  return this.seekTime = 0,
                  n
              }
          }, {
              key: "loadManifest",
              value: function(e) {
                  this.manifsetUrl = e,
                  this.loader && (this.loader.destroy(),
                  this.loader = null),
                  this.loader = new r.default(this.config),
                  this.loader.load(e, "", this.onManifestLoaded.bind(this), this.loadManifestError.bind(this), this.loadManifestTimeout.bind(this), this.config.listLoadingTimeOut, this.config.listLoadingMaxRetry, this.config.listLoadingRetryDelay)
              }
          }, {
              key: "onManifestLoaded",
              value: function(e, t) {
                  0 == this.manifestLoadedTs && (this.manifestLoadedTs = u.default.now());
                  var i = e.currentTarget.status;
                  if (404 !== i && 0 !== i) {
                      var s, a = e.currentTarget.responseText, n = this.manifsetUrl, r = [], l = {};
                      if (-1 != a.indexOf("#EXTM3U")) {
                          var d = -1 == a.indexOf("#EXTINF:");
                          (d ? this.m3u8Parser.parseMasterPlaylist(a, n) : [{
                              url: n
                          }]).forEach(function(e) {
                              var t = l[e.bitrate];
                              void 0 === t ? (l[e.bitrate] = r.length,
                              e.url = [e.url],
                              r.push(e)) : r[t].url.push(e.url)
                          }),
                          s = r[0].bitrate,
                          r.sort(function(e, t) {
                              return e.bitrate - t.bitrate
                          }),
                          this.levels = r;
                          for (var h = 0; h < r.length; h++)
                              if (r[h].bitrate === s) {
                                  this.currLevelId = h,
                                  o.default.log("manifest loaded, " + r.length + " level(s) found, first bitrate:" + s);
                                  break
                              }
                          d ? this.loadLevel() : this.onLevelLoaded(e)
                      } else
                          o.default.error("HlsPlaylist.onManifestLoaded m3u8 doesn't match #EXTM3U\n", a)
                  } else
                      o.default.warn("HlsPlaylist.onManifestLoaded status=" + i)
              }
          }, {
              key: "loadManifestError",
              value: function(e) {
                  o.default.warn("HlsPlaylist.loadManifestError " + e.currentTarget.status),
                  404 !== e.currentTarget.status && 0 !== e.currentTarget.status || this.hls.onAnchorStop()
              }
          }, {
              key: "loadManifestTimeout",
              value: function() {
                  this.hls.reset()
              }
          }, {
              key: "loadLevel",
              value: function() {
                  if (this.currLevel) {
                      var e = this.currLevel.url;
                      if (!this.isLive && this.currDetails) {
                          var t = this.currDetails.fragments
                            , i = t[t.length - 1];
                          i || (o.default.log("HlsPlaylist.loadLevel: fragments run out"),
                          i = this.currFrag),
                          e = t.length <= this.config.minFragBufferNum ? this.currLevel.url.replace(/\?btime=\d*$/, "?btime=" + i.time) : null
                      }
                      e && (this.loader && (this.loader.destroy(),
                      this.loader = null),
                      this.loader = new r.default(this.config),
                      this.loader.load(e, "", this.onLevelLoaded.bind(this), this.loadLevelError.bind(this), this.loadLevelTimeout.bind(this), this.config.listLoadingTimeOut, this.config.listLoadingMaxRetry, this.config.listLoadingRetryDelay))
                  }
              }
          }, {
              key: "onLevelLoaded",
              value: function(e, t) {
                  if (404 !== e.currentTarget.status && 0 !== e.currentTarget.status) {
                      var i = e.currentTarget.responseText
                        , s = e.currentTarget.responseURL
                        , a = this.currLevel
                        , n = null;
                      if (s && (a.url = s),
                      0 === i.indexOf("#EXTM3U") && i.indexOf("#EXTINF:") > 0) {
                          if (n = this.m3u8Parser.parseLevelPlaylist(i, a.url, this.currLevelId),
                          a.details = this.mergeDetails(a.details, n),
                          this.isLive && a.details.fragments.length > 10)
                              return o.default.info("HlsPlaylist.onLevelLoaded fragments.length =", a.details.fragments.length),
                              void this.hls.reconnectLive();
                          this.hls.setTargetDuration(this.currDetails.targetduration),
                          this.seekTime && this.seek(this.seekTime),
                          this.firstLevelLoaded || (this.firstLevelLoaded = !0,
                          this.hls.loadFragment())
                      } else {
                          var r = a.details.fragments.length;
                          o.default.warn("HlsPlaylist.onLevelLoaded no playlist. fragments.length=" + r + "\n" + i)
                      }
                  }
              }
          }, {
              key: "loadLevelError",
              value: function(e) {
                  o.default.warn("HlsPlaylist.loadLevelError " + e.currentTarget.status),
                  404 !== e.currentTarget.status && 0 !== e.currentTarget.status || this.hls.onAnchorStop()
              }
          }, {
              key: "loadLevelTimeout",
              value: function() {
                  this.hls.reset()
              }
          }, {
              key: "mergeDetails",
              value: function(e, t) {
                  if (!e)
                      return t;
                  var i, s = 0, a = 0, n = null;
                  return n = e.fragments.length > 0 ? e.fragments[e.fragments.length - 1] : this.currFrag,
                  i = n.sn,
                  a = n.start + n.duration,
                  t.fragments.forEach(function(t) {
                      t.sn > i && e.fragments.push(t)
                  }),
                  e.endSN = t.endSN,
                  e.fragments.forEach(function(e) {
                      s += e.duration,
                      e.sn > i && (e.start = a,
                      a += e.duration)
                  }),
                  e.totalduration = s,
                  e
              }
          }, {
              key: "onCheckTimer",
              value: function(e) {
                  this.isLive && e % 4 == 0 && this.loadLevel()
              }
          }, {
              key: "currLevel",
              get: function() {
                  return this.levels ? this.levels[this.currLevelId] : null
              }
          }, {
              key: "currDetails",
              get: function() {
                  return this.currLevel ? this.currLevel.details : null
              }
          }, {
              key: "currFragNum",
              get: function() {
                  var e = this.currDetails
                    , t = e ? e.fragments : null;
                  return t ? t.length : 0
              }
          }, {
              key: "totalDuration",
              get: function() {
                  var e = this.currDetails;
                  return e ? e.totalduration : 0
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(46))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(4))
        , u = s(i(305))
        , l = s(i(306))
        , d = function() {
          function e(t) {
              (0,
              n.default)(this, e),
              this.isLive = t,
              this.seqGener = new l.default
          }
          return (0,
          r.default)(e, [{
              key: "resolve",
              value: function(e, t) {
                  return u.default.buildAbsoluteURL(t, e)
              }
          }, {
              key: "cloneObj",
              value: function(e) {
                  return JSON.parse((0,
                  a.default)(e))
              }
          }, {
              key: "parseMasterPlaylist",
              value: function(e, t) {
                  for (var i, s, a, n = [], r = {}, o = /#EXT-X-STREAM-INF:([^\n\r]*(BAND)WIDTH=(\d+))?([^\n\r]*(CODECS)=\"([^\"\n\r]*)\",?)?([^\n\r]*(RES)OLUTION=(\d+)x(\d+))?([^\n\r]*(NAME)=\"(.*)\")?[^\n\r]*[\r\n]+([^\r\n]+)/gi; null != (i = o.exec(e)); ) {
                      for (i.shift(),
                      i = i.filter(function(e) {
                          return void 0 !== e
                      }),
                      (r = {}).url = this.resolve(i.pop(), t); i.length > 0; )
                          switch (i.shift()) {
                          case "RES":
                              r.width = parseInt(i.shift()),
                              r.height = parseInt(i.shift());
                              break;
                          case "BAND":
                              r.bitrate = parseInt(i.shift());
                              break;
                          case "NAME":
                              r.name = i.shift();
                              break;
                          case "CODECS":
                              for (s = i.shift().split(","); s.length > 0; )
                                  -1 !== (a = s.shift()).indexOf("avc1") ? r.videoCodec = this.avc1toavcoti(a) : r.audioCodec = a
                          }
                      n.push(r)
                  }
                  return n
              }
          }, {
              key: "avc1toavcoti",
              value: function(e) {
                  var t, i = e.split(".");
                  return i.length > 2 ? (t = i.shift() + ".",
                  t += parseInt(i.shift()).toString(16),
                  t += ("00" + parseInt(i.shift()).toString(16)).substr(-4)) : t = e,
                  t
              }
          }, {
              key: "parseKeyParamsByRegex",
              value: function(e, t) {
                  var i = t.exec(e);
                  return i && (i.shift(),
                  2 === (i = i.filter(function(e) {
                      return void 0 !== e
                  })).length) ? i[1] : null
              }
          }, {
              key: "parseLevelPlaylist",
              value: function(e, t, i) {
                  var s, a, n, r, l, d = 0, h = 0, f = {
                      url: t,
                      fragments: [],
                      live: this.isLive,
                      startSN: 0
                  }, c = !1;
                  this.isLive || (s = this.seqGener.genSnFromM3u8(e),
                  f.startSN = s);
                  for (var p = {
                      method: null,
                      key: null,
                      iv: null,
                      uri: null
                  }, v = /(?:#EXT-X-(MEDIA-SEQUENCE):(\d+))|(?:#EXT-X-(TARGETDURATION):(\d+))|(?:#EXT-X-(KEY):(.*))|(?:#EXT(INF):([\d\.]+)[^\r\n]*([\r\n]+[^#|\r\n]+)?)|(?:#EXT-X-(BYTERANGE):([\d]+[@[\d]*)]*[\r\n]+([^#|\r\n]+)?|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DIS)CONTINUITY))/g; null !== (a = v.exec(e)); )
                      switch (a.shift(),
                      (a = a.filter(function(e) {
                          return void 0 !== e
                      }))[0]) {
                      case "MEDIA-SEQUENCE":
                          this.isLive && (d = f.startSN = parseInt(a[1]));
                          break;
                      case "TARGETDURATION":
                          f.targetduration = parseFloat(a[1]);
                          break;
                      case "ENDLIST":
                          f.live = !1,
                          o.default.info("M3u8Parser.parseLevelPlaylist ENDLIST isLive=false");
                          break;
                      case "DIS":
                          c = !0;
                          break;
                      case "BYTERANGE":
                          var y = a[1].split("@");
                          l = 1 === y.length ? r : parseInt(y[1]),
                          r = parseInt(y[0]) + l,
                          (n = f.fragments.length ? f.fragments[f.fragments.length - 1] : null) && !n.url && (n.byteRangeStartOffset = l,
                          n.byteRangeEndOffset = r,
                          n.url = this.resolve(a[2], t));
                          break;
                      case "INF":
                          var m = parseFloat(a[1]);
                          if (!isNaN(m)) {
                              var _, P = d++;
                              if (this.isLive || (P = s++),
                              p.method && p.uri && !p.iv) {
                                  _ = this.cloneObj(p);
                                  for (var T = new Uint8Array(16), S = 12; S < 16; S++)
                                      T[S] = P >> 8 * (15 - S) & 255;
                                  _.iv = T
                              } else
                                  _ = p;
                              var g = a[2];
                              f.fragments.push({
                                  url: g ? this.resolve(g, t) : null,
                                  time: g ? u.default.getTimeFromUrl(g, this.isLive) : 0,
                                  duration: m,
                                  start: h,
                                  level: i,
                                  sn: P,
                                  discontinuity: c,
                                  byteRangeStartOffset: l,
                                  byteRangeEndOffset: r,
                                  decryptdata: _
                              }),
                              c && (c = !1),
                              h += m,
                              l = null
                          }
                          break;
                      case "KEY":
                          var I = a[1]
                            , E = this.parseKeyParamsByRegex(I, /(METHOD)=([^,]*)/)
                            , k = this.parseKeyParamsByRegex(I, /(URI)=["]([^,]*)["]/)
                            , C = this.parseKeyParamsByRegex(I, /(IV)=([^,]*)/);
                          E && (p = {
                              method: null,
                              key: null,
                              iv: null,
                              uri: null
                          },
                          k && "AES-128" === E && (p.method = E,
                          p.uri = this.resolve(k, t),
                          p.key = null,
                          C && (p.iv = C,
                          "0x" === p.iv.substring(0, 2) && (p.iv = p.iv.substring(2)),
                          p.iv = p.iv.match(/.{8}/g),
                          p.iv[0] = parseInt(p.iv[0], 16),
                          p.iv[1] = parseInt(p.iv[1], 16),
                          p.iv[2] = parseInt(p.iv[2], 16),
                          p.iv[3] = parseInt(p.iv[3], 16),
                          p.iv = new Uint32Array(p.iv))))
                      }
                  return f.totalduration = h,
                  f.endSN = d - 1,
                  this.isLive || (f.endSN = s - 1),
                  f
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      var s = {
          buildAbsoluteURL: function(e, t) {
              if (t = t.trim(),
              /^[a-z]+:/i.test(t))
                  return t;
              var i = null
                , a = null
                , n = /^([^#]*)(.*)$/.exec(t);
              n && (a = n[2],
              t = n[1]);
              var r = /^([^\?]*)(.*)$/.exec(t);
              r && (i = r[2],
              t = r[1]);
              var o = /^([^#]*)(.*)$/.exec(e);
              o && (e = o[1]);
              var u = /^([^\?]*)(.*)$/.exec(e);
              u && (e = u[1]);
              var l = /^((([a-z]+):)?\/\/[a-z0-9\.-]+(:[0-9]+)?\/)(.*)$/i.exec(e)
                , d = l[3]
                , h = l[1]
                , f = l[5]
                , c = null;
              return c = /^\/\//.test(t) ? d + "://" + s.buildAbsolutePath("", t.substring(2)) : /^\//.test(t) ? h + s.buildAbsolutePath("", t.substring(1)) : h + s.buildAbsolutePath(f, t),
              i && (c += i),
              a && (c += a),
              c
          },
          buildAbsolutePath: function(e, t) {
              for (var i, s, a = t, n = "", r = e.replace(/[^\/]*$/, a.replace(/(\/|^)(?:\.?\/+)+/g, "$1")), o = 0; (s = r.indexOf("/../", o)) > -1; o = s + i)
                  i = /^\/(?:\.\.\/)*/.exec(r.slice(s))[0].length,
                  n = (n + r.substring(o, s)).replace(new RegExp("(?:\\/+[^\\/]*){0," + (i - 1) / 3 + "}$"), "/");
              return n + r.substr(o)
          },
          getTimeFromUrl: function(e, t) {
              var i = t ? /\d+_(\d+)_\d+.ts?/ : /(\d+)_\d+_\d+.ts?/
                , s = e.match(i);
              return s ? t ? s[1] : Math.round(s[1] / 1e3) : -1
          },
          getVodUrl: function(e, t, i, s) {
              return "http://106.38.255.95:9123/xcrs/" + e + "_" + t + "_" + i + ".m3u8?btime=" + s
          }
      };
      e.exports = s
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.startSeq = 1e3,
              this.m3u8Len = 0,
              this.preTsArr = void 0
          }
          return (0,
          n.default)(e, [{
              key: "genSnFromM3u8",
              value: function(e) {
                  var t = this.convertM3u8ToArray(e);
                  if (void 0 === this.preTsArr)
                      this.preTsArr = t;
                  else {
                      var i = this.findSeq(this.preTsArr, t[0], this.startSeq);
                      -1 === i && (i = this.startSeq + this.preTsArr.length),
                      this.preTsArr = t,
                      this.startSeq = i
                  }
                  return this.startSeq
              }
          }, {
              key: "convertM3u8ToArray",
              value: function(e) {
                  for (var t = /#EXT(INF):([\d\.]+)[^\r\n]*[\r\n]+([^#|\r\n]+)?/gi, i = [], s = void 0; null !== (s = t.exec(e)); )
                      s.shift(),
                      "INF" === (s = s.filter(function(e) {
                          return void 0 !== e
                      }))[0] && i.push(s[2]),
                      s = [];
                  return i
              }
          }, {
              key: "findSeq",
              value: function(e, t, i) {
                  for (var s = e.length - 1; s >= 0; s--)
                      if (e[s] === t)
                          return i + s;
                  return -1
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(10))
        , o = s(i(22))
        , u = s(i(13))
        , l = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.hlsPlayer = t,
              this.hyPlayer = t.hyPlayer,
              this.stat = this.hyPlayer.stat,
              this.tsdbUtil = this.hyPlayer.tsdbUtil,
              this.isPaused = !1
          }
          return (0,
          n.default)(e, [{
              key: "setPause",
              value: function() {
                  this.isPaused = !0,
                  this.stat.setCore(u.default.CORE.VIDEO_BAD_QUALITY, 100)
              }
          }, {
              key: "start",
              value: function() {
                  this.stop(),
                  r.default.once(this.checkSuc, this, 1e4),
                  r.default.once(this.checkVideo, this, 2e4)
              }
          }, {
              key: "stop",
              value: function() {
                  r.default.remove(this.checkSuc, this),
                  r.default.remove(this.checkVideo, this)
              }
          }, {
              key: "checkSuc",
              value: function() {
                  var e = this.hlsPlayer.hasVideo ? 100 : 0
                    , t = [{
                      sMetricName: o.default.METRIC.WEB_HLS_PLAY_SUC_RATIO,
                      vField: {
                          value: e
                      }
                  }];
                  t.push(this.stat.createAct(u.default.ACT.HLS_PLAY_SUCC, {
                      value: [e]
                  })),
                  this.tsdbUtil.sendMetrics(t)
              }
          }, {
              key: "checkVideo",
              value: function() {
                  var e = this.hlsPlayer.hasVideo ? 100 : 0
                    , t = [{
                      sMetricName: o.default.METRIC.WEB_HLS_PLAY_VIDEO_RATIO,
                      vField: {
                          value: e
                      }
                  }];
                  t.push(this.stat.createAct(u.default.ACT.HLS_LOAD_SUCC, {
                      value: [e]
                  })),
                  this.tsdbUtil.sendMetrics(t)
              }
          }, {
              key: "report",
              value: function() {
                  var e = [{
                      sMetricName: o.default.METRIC.VIDEO_BAD_QUALITY_RATIO,
                      vField: {
                          value: this.isPaused ? 100 : 0
                      },
                      vDimension: {
                          p2p: 2
                      }
                  }];
                  this.stat.fill(e, !1),
                  this.tsdbUtil.sendMetrics(e),
                  this.isPaused = !1
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(26))
        , o = s(i(211))
        , u = s(i(29))
        , l = s(i(33))
        , d = s(i(4))
        , h = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.hyPlayer = t,
              r.default.uuid = t.uuid,
              o.default.streamPlayer = this
          }
          return (0,
          n.default)(e, [{
              key: "start",
              value: function(e) {
                  e.curBitrate || (e.curBitrate = 500),
                  u.default.initConfig(e.curBitrate, l.default),
                  d.default.log("StreamPlayer.start Const", u.default),
                  o.default.start(e)
              }
          }, {
              key: "stop",
              value: function() {
                  o.default.stop()
              }
          }, {
              key: "stopStream",
              value: function(e) {
                  o.default.stopStream(e)
              }
          }, {
              key: "destroy",
              value: function() {
                  this.stop()
              }
          }, {
              key: "turnToFlv",
              value: function(e) {
                  arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
              }
          }]),
          e
      }();
      t.default = h
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(40))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(41))
        , u = s(i(42))
        , l = s(i(4))
        , d = s(i(5))
        , h = s(i(82))
        , f = s(i(39))
        , c = s(i(2))
        , p = s(i(33))
        , v = s(i(206))
        , y = s(i(310))
        , m = s(i(208))
        , _ = s(i(312))
        , P = function(e) {
          function t(e) {
              (0,
              n.default)(this, t);
              var i = (0,
              o.default)(this, (t.__proto__ || (0,
              a.default)(t)).call(this));
              return i.info = e,
              i.streamId = new d.default,
              i.onTurnBack = null,
              i.isStop = !1,
              i.stream = null,
              i.comParser = new y.default(i),
              i.record = new _.default(i),
              i.getStreamInfo(e.presenterUid, e.sStreamName),
              i
          }
          return (0,
          u.default)(t, e),
          (0,
          r.default)(t, [{
              key: "getStreamInfo",
              value: function(e, t) {
                  var i = new h.default.GetP2PStreamInfoReq;
                  i.lUid = e,
                  i.sStreamName = t,
                  i.iP2PType = 1,
                  l.default.log("WebrtcStream.getStreamInfo", "lUid", e, "streamName", t),
                  f.default.sendWup("mediaui", "getP2PStreamInfo", i, this.onGetStreamInfo.bind(this), !0, f.default.getRequestId())
              }
          }, {
              key: "onGetStreamInfo",
              value: function(e) {
                  l.default.log("WebrtcStream.onGetStreamInfo", "sP2PUrl", e.sP2PUrl, "sCodecType", e.sCodecType, "sCdnBrand", e.sCdnBrand, "sP2pAntiCode", e.sP2PToken, "pkg.mpOption.baseSubs", e.mpOption.get(1), "Config.baseSubs", p.default.baseSubs),
                  this.isStop || e.sStreamName !== this.info.sStreamName || (this.info.codecType = e.sCodecType,
                  this.info.cdnBrand = e.sCdnBrand,
                  this.info.antiCode = e.sP2PToken,
                  this.info.streamUrl = e.sP2PUrl,
                  this.loadLib())
              }
          }, {
              key: "loadLib",
              value: function() {
                  l.default.log("WebrtcStream.loadLib"),
                  v.default.on(v.default.ON_LOAD, this.onLoadLib, this),
                  v.default.loadLib(this.info.h5Root)
              }
          }, {
              key: "onLoadLib",
              value: function() {
                  l.default.log("WebrtcStream.onLoadLib"),
                  v.default.off(v.default.ON_LOAD, this.onLoadLib, this),
                  this.isStop || this.startStream()
              }
          }, {
              key: "startStream",
              value: function() {
                  l.default.log("WebrtcStream.startStream"),
                  this.stream = v.default.playStream(this.info),
                  this.stream.streamHandler = this,
                  this.stream.sliceProtoHandler.on(c.default.PP2pSliceData, this.onSignal, this),
                  this.stream.start(),
                  this.comParser.start()
              }
          }, {
              key: "onSignal",
              value: function(e) {
                  this.comParser.recvSignalSlice(e.child)
              }
          }, {
              key: "stop",
              value: function() {
                  this.isStop = !0,
                  this.comParser.reset(),
                  this.stream && this.stream.sliceProtoHandler.off(c.default.PP2pSliceData, this.onSignal, this),
                  v.default.removeStream(this.stream),
                  this.stream = null
              }
          }, {
              key: "turnToFlv",
              value: function(e) {
                  l.default.log("WebrtcStream.turnBack reason", e, this.info.sStreamName),
                  this.onTurnBack && this.onTurnBack(this)
              }
          }, {
              key: "getMetric",
              value: function(e) {
                  return this.record.getMetric(e)
              }
          }, {
              key: "printInfo",
              value: function() {
                  this.stream && this.stream.printInfo()
              }
          }]),
          t
      }(m.default);
      t.default = P
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(16))
        , n = s(i(7))
        , r = s(i(0))
        , o = s(i(1))
        , u = s(i(12))
        , l = s(i(211))
        , d = s(i(311))
        , h = s(i(10))
        , f = s(i(25))
        , c = function() {
          function e(t) {
              (0,
              r.default)(this, e),
              this.wStream = t,
              this.seqs = [],
              this.index = 0,
              this.lostMap = new n.default,
              this.waits = [],
              this.lostFrameNum = 0,
              this.recvFrameNum = 0,
              this.isFirstPkg = !0,
              this.speed = new f.default(10)
          }
          return (0,
          o.default)(e, [{
              key: "start",
              value: function() {
                  h.default.add(this.onCheckFastTimer, this, 100)
              }
          }, {
              key: "stop",
              value: function() {
                  this.reset(),
                  h.default.remove(this.onCheckFastTimer, this)
              }
          }, {
              key: "reset",
              value: function() {
                  this.isFirstPkg = !0,
                  this.lostFrameNum = 0,
                  this.recvFrameNum = 0,
                  this.seqs = [],
                  this.index = 0,
                  this.waits = [],
                  this.lostMap.clear(),
                  this.speed.reset()
              }
          }, {
              key: "onCheckFastTimer",
              value: function(e, t) {
                  t % 10 == 0 && this.speed.calculate(),
                  this.checkFullFrame(e);
                  var i = this.waits.length;
                  if (i > 0) {
                      var s = Math.ceil(.1 * i);
                      l.default.streamPlayer.hyPlayer.trigger(u.default.SIGNAL_DATA, this.waits.splice(0, s))
                  }
              }
          }, {
              key: "recvSignalSlice",
              value: function(e) {
                  this.isFirstPkg && (this.isFirstPkg = !1,
                  l.default.streamPlayer.hyPlayer.trigger(u.default.SIGNAL_PLAY, this.wStream.info.oStreamName)),
                  -1 === this.seqs.indexOf(e.seq) && (this.seqs[this.index] = e.seq,
                  this.index++,
                  1e4 === this.index && (this.index = 0),
                  0 === e.frameNum ? this._sliceMoreInOne(e) : 1 === e.frameNum ? this._sliceOneInOne(e) : e.frameNum >= 2 && this._sliceOneInMore(e))
              }
          }, {
              key: "_sliceMoreInOne",
              value: function(e) {
                  for (var t = new DataView(e.streamData.buffer), i = e.streamData.length, s = 0, a = void 0, n = void 0; s < i; )
                      a = t.getUint32(s, !0),
                      t.getUint32(s + 4, !0),
                      n = e.streamData.slice(s + 8, s + a),
                      this.addWait(n),
                      s += a
              }
          }, {
              key: "_sliceOneInOne",
              value: function(e) {
                  this.addWait(e.streamData.slice())
              }
          }, {
              key: "_sliceOneInMore",
              value: function(e) {
                  var t = this.lostMap.get(e.frameId);
                  t || (t = new d.default,
                  this.lostMap.set(e.frameId, t)),
                  t.append(e),
                  t.isFull() && (this.lostMap.delete(e.frameId),
                  this.addWait(t.streamData))
              }
          }, {
              key: "checkFullFrame",
              value: function(e) {
                  var t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var n, r = (0,
                      a.default)(this.lostMap.values()); !(t = (n = r.next()).done); t = !0) {
                          var o = n.value;
                          o.isTimeout(e) && (this.lostFrameNum++,
                          this.lostMap.delete(o.frameId))
                      }
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
              }
          }, {
              key: "addWait",
              value: function(e) {
                  this.recvFrameNum++,
                  this.speed.addCur(1),
                  this.waits.push(e)
              }
          }]),
          e
      }();
      t.default = c
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(4))
        , o = s(i(6))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.key = 0,
              this.pktNum = 0,
              this.size = 0,
              this.packets = [],
              this.firstPktSeq = 0,
              this.lastPktSeq = 0,
              this.streamData = null,
              this.firstTs = 0
          }
          return (0,
          n.default)(e, [{
              key: "append",
              value: function(e) {
                  if (0 == this.packets.length)
                      this.key = e.frameId,
                      this.pktNum = e.frameNum,
                      this.packets.push(e),
                      this.size = e.streamData.length,
                      this.firstTs = o.default.now();
                  else {
                      if (this.isFull())
                          return !0;
                      for (var t = !0, i = this.packets.length - 1; i >= 0; i--) {
                          if (this.packets[i].seqNum === e.seqNum)
                              return !0;
                          if (this.packets[i].seqNum < e.seqNum) {
                              this.packets.splice(i + 1, 0, e),
                              this.size += e.streamData.length,
                              t = !1;
                              break
                          }
                      }
                      t && (this.packets.splice(0, 0, e),
                      this.size += e.streamData.length)
                  }
                  if (this.isFull()) {
                      this.streamData = new Uint8Array(this.size);
                      for (var s = 0, a = this.packets.length, n = 0; n < a; n++) {
                          var u = this.packets[n];
                          if (!u.streamData)
                              return r.default.error("ComFrame.append slice streamData null, seq", u.seq, "frameId", u.frameId),
                              !1;
                          this.streamData.set(u.streamData, s),
                          s += u.streamData.length
                      }
                  }
                  return this.firstPktSeq = this.packets[0].seq,
                  this.lastPktSeq = this.packets[this.packets.length - 1].seq,
                  !0
              }
          }, {
              key: "getLostSeqs",
              value: function() {
                  if (this.isFull())
                      return [];
                  var e = []
                    , t = this.packets.length
                    , i = this.packets[0].seq
                    , s = t > 1 ? this.packets[t - 1].seq : i
                    , a = s - i
                    , n = this.pktNum - t - a
                    , r = 0;
                  for (r = i; r < s; r++)
                      e.push(r);
                  for (r = 1; r <= n; r++)
                      e.push(i - r),
                      e.push(s + r);
                  return e
              }
          }, {
              key: "isFull",
              value: function() {
                  return this.pktNum < 2 || this.pktNum == this.packets.length
              }
          }, {
              key: "isTimeout",
              value: function(e) {
                  return e - this.firstTs > 2e3
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(13))
        , o = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.wStream = t,
              this.heart_type = r.default.HEART_TYPE.START
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.heart_type = r.default.HEART_TYPE.START
              }
          }, {
              key: "getMetric",
              value: function(e) {
                  if (this.wStream.isStop || !this.wStream.stream)
                      return null;
                  e && (this.heart_type = r.default.HEART_TYPE.END);
                  var t = {
                      sMetricName: r.default.SIGNAL_HEART20.name,
                      vDimension: {},
                      vExLog: {},
                      vField: {}
                  }
                    , i = this.wStream.comParser
                    , s = this.wStream.stream
                    , a = s.stat;
                  return t.vDimension[r.default.SIGNAL_HEART20.STREAM_NAME] = this.wStream.info.sStreamName,
                  t.vDimension[r.default.DIM_CORE.HEART_TYPE] = this.heart_type,
                  this.fillCore(t.vDimension, a),
                  this.fillComp(t.vDimension, a, r.default.SUB_RETURN.sub_name),
                  this.fillComp(t.vDimension, a, r.default.SIGNAL_HEART20.STREAM_DELAY),
                  this.fillFlow(t.vField, a),
                  t.vField[r.default.CORE.HAS_PUNCH_NODES] = s.getPunchedCnt(),
                  t.vField[r.default.SIGNAL_HEART20.FULL_FRAME_NUM] = i.recvFrameNum,
                  t.vField[r.default.SIGNAL_HEART20.LOST_FRAME_NUM] = i.lostFrameNum,
                  i.recvFrameNum = 0,
                  i.lostFrameNum = 0,
                  a.reset(),
                  this.heart_type === r.default.HEART_TYPE.START && (this.heart_type = r.default.HEART_TYPE.CONTINUS),
                  t
              }
          }, {
              key: "fillCore",
              value: function(e, t) {
                  if (t.core)
                      for (var i in t.core)
                          e[i] = t.core[i]
              }
          }, {
              key: "fillComp",
              value: function(e, t, i) {
                  if (t.hasOwnProperty(i)) {
                      var s = ""
                        , a = t[i];
                      for (var n in a)
                          s.length > 0 && (s += ";"),
                          s += n + "," + a[n];
                      "" !== s && (e[i] = s)
                  }
              }
          }, {
              key: "fillFlow",
              value: function(e, t) {
                  if (t.bw)
                      for (var i in t.bw) {
                          var s = t.bw[i];
                          s > 0 && (e[i] = s)
                      }
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(6)),
      s(i(199)))
        , o = s(i(4))
        , u = i(12)
        , l = function() {
          function e(t, i) {
              (0,
              a.default)(this, e),
              this.handler = t,
              this.connected = !1,
              this.startTs = 0,
              this.playing = !1,
              this.loadTime = 0,
              this.connectTime = 0,
              this.players = [],
              this.libURL = i,
              this.libLoaded = !1,
              this.flacURL = ""
          }
          return (0,
          n.default)(e, [{
              key: "loadFlacLib",
              value: function(e) {
                  var t = document.createElement("script");
                  t.type = "text/javaScript",
                  t.onload = this.flacLibLoaded.bind(this),
                  t.src = e,
                  document.getElementsByTagName("head")[0].appendChild(t)
              }
          }, {
              key: "flacLibLoaded",
              value: function() {
                  o.default.log("flaclib complete"),
                  this.libLoaded = !0,
                  this.play(this.flacURL)
              }
          }, {
              key: "isPlaying",
              value: function() {
                  return this.playing
              }
          }, {
              key: "getLoger",
              value: function() {
                  return o.default
              }
          }, {
              key: "play",
              value: function(e) {
                  if (this.flacURL = e,
                  this.libLoaded) {
                      var t = new FlacPlayer(this);
                      t.setLogger(o.default),
                      t.uuid = this.handler.uuid;
                      var i = new r.default(t)
                        , s = {
                          player: t,
                          loader: i
                      };
                      this.players.push(s),
                      i.connect(e)
                  } else
                      this.loadFlacLib(this.libURL)
              }
          }, {
              key: "setVolume",
              value: function(e) {
                  for (var t = 0; t < this.players.length; t++)
                      this.players[t].player.setVolume(110 * e)
              }
          }, {
              key: "getCurrentTime",
              value: function() {
                  return this.handler && this.handler.playingMgr ? Math.floor(this.handler.playingMgr.getCurrentTime()) : 0
              }
          }, {
              key: "playerFlacError",
              value: function(e) {
                  o.default.log("playerFlacError error:" + e),
                  this.isPlaying() && (this.playing = !1,
                  this.handler.flacPlayStatusChange(),
                  this.handler.trigger(u.Event.FLAC_AUDIO_ERROR))
              }
          }, {
              key: "onstartplay",
              value: function() {
                  this.isPlaying() || (this.playing = !0,
                  setTimeout(function() {
                      this.isPlaying() && (this.handler.trigger(u.Event.FLAC_AUDIO_START),
                      this.handler.flacPlayStatusChange())
                  }
                  .bind(this), 1e3))
              }
          }, {
              key: "onClosed",
              value: function() {
                  this.reset()
              }
          }, {
              key: "stop",
              value: function() {
                  this.reset(),
                  this.handler.flacPlayStatusChange()
              }
          }, {
              key: "reset",
              value: function() {
                  this.connected = !1,
                  this.startTs = 0,
                  this.playing = !1;
                  for (var e = 0; e < this.players.length; e++) {
                      var t = this.players[e].player
                        , i = this.players[e].loader;
                      t && (t.stop(),
                      t = null),
                      i && (i.close(),
                      i = null)
                  }
                  this.players = []
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(212))
        , n = s(i(16))
        , r = s(i(7))
        , o = s(i(0))
        , u = s(i(1))
        , l = s(i(17))
        , d = s(i(4))
        , h = s(i(2))
        , f = s(i(322))
        , c = s(i(323))
        , p = s(i(324))
        , v = s(i(12))
        , y = (s(i(8)),
      s(i(10)))
        , m = s(i(6))
        , _ = (s(i(24)),
      s(i(44)),
      s(i(325)))
        , P = (s(i(50)),
      s(i(97)))
        , T = s(i(106))
        , S = s(i(104));
      s(i(64)),
      s(i(103)),
      s(i(105)),
      s(i(100));
      var g = function() {
          function e(t) {
              (0,
              o.default)(this, e),
              this.hyPlayer = t,
              this.started = !1,
              this.startTs = 0,
              this.flvPlayers = new r.default,
              this.audioInfos = {},
              l.default.proxyLink = new c.default(this,t),
              l.default.videoLink = new p.default(this),
              l.default.audioMgr = new f.default(t,this),
              l.default.addListener(h.default.PLoginVideoProxyUniformlyRes, this.onLoginVideoProxyUniformlyRes, this),
              l.default.addListener(h.default.PNotifyCurrentStream4, this.onPNotifyCurrentStream4, this),
              l.default.addListener(h.default.PSubscribeStreamRes3, this.onSubscribeStreamRes3, this),
              l.default.addListener(h.default.PStreamData3, this.onStreamData, this),
              l.default.addListener(h.default.PStopStream3, this.onStopStream, this),
              l.default.addListener(h.default.PStopStream, this.onStopStream, this),
              l.default.addListener(h.default.PNotifyStreamSwitch, this.onPNotifyStreamSwitch, this),
              l.default.addListener(h.default.PVideoSyncSpeakerTime3, this.onVideoSyncSpeakerTime, this)
          }
          return (0,
          u.default)(e, [{
              key: "init",
              value: function(e) {
                  l.default.uuid = e.uuid,
                  l.default.uid = e.uid,
                  l.default.sid = e.sid,
                  l.default.subSid = e.subSid
              }
          }, {
              key: "start",
              value: function() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 8e3;
                  l.default.subSid ? (this.stop(),
                  d.default.log("HuyaMgr.start codeRate=" + e),
                  l.default.codeRate = Number(e),
                  this.started = !0,
                  this.startTs = m.default.now(),
                  l.default.proxyLink.switchCodeRate(l.default.codeRate),
                  y.default.add(this.onCheckTimer, this, 1e3),
                  y.default.add(this.onCheckFastTimer, this, 100)) : d.default.warn("HuyaMgr.start No subSid.")
              }
          }, {
              key: "stop",
              value: function() {
                  this.started && (d.default.log("HuyaMgr.stop"),
                  this.started = !1,
                  l.default.codeRate = 0,
                  l.default.audioMgr.reset(),
                  this.closeVideo(),
                  this.audioInfos = {},
                  y.default.remove(this.onCheckTimer, this),
                  y.default.remove(this.onCheckFastTimer, this))
              }
          }, {
              key: "startVoice",
              value: function() {
                  this.started || (this.started = !0,
                  y.default.add(this.onCheckTimer, this, 1e3),
                  y.default.add(this.onCheckFastTimer, this, 100))
              }
          }, {
              key: "closeVideo",
              value: function() {
                  d.default.log("HuyaMgr.closeVideo"),
                  l.default.videoLink.close();
                  var e = !0
                    , t = !1
                    , i = void 0;
                  try {
                      for (var s, a = (0,
                      n.default)(this.flvPlayers.values()); !(e = (s = a.next()).done); e = !0)
                          s.value.dispose()
                  } catch (e) {
                      t = !0,
                      i = e
                  } finally {
                      try {
                          !e && a.return && a.return()
                      } finally {
                          if (t)
                              throw i
                      }
                  }
                  this.flvPlayers.clear()
              }
          }, {
              key: "stopPlayer",
              value: function(e) {
                  var t = this.getPlayer(e);
                  if (t) {
                      d.default.log("HuyaMgr.stopPlayer uid=" + e),
                      t.dispose(),
                      this.flvPlayers.delete(e);
                      for (var i = window._audios || [], s = i.length - 1; s >= 0; s--) {
                          var a = i[s]
                            , n = a.uid;
                          n && n == e ? i.splice(s, 1) : a.error && 4 == a.error.code && i.splice(s, 1)
                      }
                  }
              }
          }, {
              key: "setConfig",
              value: function(e, t) {
                  d.default.log("HuyaMgr.setConfig key=" + e + " value=" + t),
                  l.default.setConfig(e, t)
              }
          }, {
              key: "getConfig",
              value: function(e) {
                  return l.default.getConfig(e)
              }
          }, {
              key: "onLoginVideoProxyUniformlyRes",
              value: function(e) {
                  if (!e._isFromVoice) {
                      l.default.proxyAreaType = e.proxyAreaType,
                      l.default.clientAreaType = e.clientAreaType,
                      l.default.isFirstViewer = 1 == e.firstViewer;
                      var t = !0
                        , i = !1
                        , s = void 0;
                      try {
                          for (var a, r = (0,
                          n.default)(this.flvPlayers.values()); !(t = (a = r.next()).done); t = !0)
                              a.value.resetVideo()
                      } catch (e) {
                          i = !0,
                          s = e
                      } finally {
                          try {
                              !t && r.return && r.return()
                          } finally {
                              if (i)
                                  throw s
                          }
                      }
                  }
              }
          }, {
              key: "onPNotifyCurrentStream4",
              value: function(e) {
                  if (this.started || (this.started = !0),
                  e._isFromVoice)
                      this.onAudioPNotifyCurrentStream4(e);
                  else {
                      e.uid != l.default.presenterUid && (l.default.presenterUid = e.uid,
                      d.default.log("presenterUid = " + l.default.presenterUid));
                      var t = null
                        , i = 0
                        , s = e.streamGroupId.isVideoStream;
                      if (s) {
                          l.default.videoStreamId = e.streamGroupId,
                          i = e.metaDatasMap.get(P.default.SERVER_FASTACCESS_MODE) || 0,
                          l.default.videoMetaData = this.mergeMetaData(l.default.videoMetaData, e.metaDatasMap),
                          t = l.default.videoMetaData,
                          l.default.isH265 = Boolean(t.get(P.default.SERVER_H265_STREAM));
                          var a = e.metaDatasMap.get(P.default.PUBLISHER_CUR_BIT_RATE) || 0;
                          (a /= 1e3) && a != l.default.curBitrate && (0 == l.default.curBitrate ? d.default.log("curBitrate " + a) : d.default.log("curBitrate change " + l.default.curBitrate + "->" + a),
                          l.default.curBitrate = a)
                      } else
                          i = e.metaDatasMap.get(P.default.SERVER_FASTACCESS_MODE) || 0,
                          l.default.audioStreamId = e.streamGroupId,
                          l.default.audioMetaData = this.mergeMetaData(l.default.audioMetaData, e.metaDatasMap),
                          t = l.default.audioMetaData;
                      var n = s ? "Video" : "Audio"
                        , r = t ? t.get("log") : "";
                      if (r && (d.default.log("PNotifyCurrentStream4 " + n + ":" + r),
                      t.delete("log")),
                      i) {
                          d.default.info(n + " AccessMode: " + ["normal", "pull", "push"][i]);
                          var o = t.get(P.default.SERVER_FASTACCESS_FIRST_SEQ) || 0
                            , u = t.get(P.default.SERVER_FASTACCESS_LAST_SEQ) || 0;
                          1 != i || !o || !u || o <= 0 || o >= u || this.getOrNewPlayer(e.uid).setPullSeq(o, u, s)
                      }
                  }
              }
          }, {
              key: "onAudioPNotifyCurrentStream4",
              value: function(e) {}
          }, {
              key: "onSubscribeStreamRes3",
              value: function(e) {
                  if (0 == e.resCode) {
                      var t = this.getOrNewPlayer(e.uid);
                      t && t.onSubscribeStreamRes(e)
                  } else {
                      var i = T.default[e.resCode];
                      d.default.error("HuyaMgr.onSubscribeStreamRes3", i)
                  }
              }
          }, {
              key: "onStreamData",
              value: function(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                  e.recvOsTime = m.default.now(),
                  e.peerUid = t;
                  var i = this.getOrNewPlayer(e.uid);
                  e.isVideo ? i.onVideoStreamData(e) : i.onAudioStreamData(e)
              }
          }, {
              key: "onStopStream",
              value: function(e) {
                  if (this.started) {
                      var t = this.getPlayer(e.uid);
                      t && t.onStopStream(e)
                  }
              }
          }, {
              key: "onPNotifyStreamSwitch",
              value: function(e) {
                  d.default.warn("HuyaMgr.onPNotifyStreamSwitch switchReason=" + e.switchReason),
                  this.start(l.default.codeRate)
              }
          }, {
              key: "onVideoSyncSpeakerTime",
              value: function(e) {
                  var t = this.getPlayer(e.uid);
                  t && t.onVideoSyncSpeakerTime(e)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  if (this.started) {
                      var i = !0
                        , s = !1
                        , r = void 0;
                      try {
                          for (var o, u = (0,
                          n.default)(this.flvPlayers); !(i = (o = u.next()).done); i = !0) {
                              var l = o.value
                                , d = (0,
                              a.default)(l, 2)
                                , h = d[0];
                              d[1].onCheckTimer(e, t) && this.flvPlayers.delete(h)
                          }
                      } catch (e) {
                          s = !0,
                          r = e
                      } finally {
                          try {
                              !i && u.return && u.return()
                          } finally {
                              if (s)
                                  throw r
                          }
                      }
                  }
              }
          }, {
              key: "onCheckFastTimer",
              value: function(e, t) {
                  if (this.started) {
                      var i = !0
                        , s = !1
                        , a = void 0;
                      try {
                          for (var r, o = (0,
                          n.default)(this.flvPlayers.values()); !(i = (r = o.next()).done); i = !0)
                              r.value.onCheckFastTimer(e, t)
                      } catch (e) {
                          s = !0,
                          a = e
                      } finally {
                          try {
                              !i && o.return && o.return()
                          } finally {
                              if (s)
                                  throw a
                          }
                      }
                  }
              }
          }, {
              key: "setAudioInfo",
              value: function(e, t) {
                  this.audioInfos[e] = t,
                  this.audioInfos[t] = e
              }
          }, {
              key: "deleteAudioInfo",
              value: function(e) {
                  var t = this.audioInfos[e];
                  t && delete this.audioInfos[t],
                  delete this.audioInfos[e]
              }
          }, {
              key: "subscribeAllStream",
              value: function() {
                  var e = 0
                    , t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var a, r = (0,
                      n.default)(this.flvPlayers.values()); !(t = (a = r.next()).done); t = !0) {
                          var o = a.value;
                          if (0 !== o.streamId.low) {
                              var u = new S.default(this.userGroupId,o.streamId,l.default.getUid(),!0,0,0);
                              this.sendVideo(u.marshall()),
                              e++
                          }
                      }
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
                  d.default.log("HuyaMgr.subscribeAllStream streamCnt=" + e)
              }
          }, {
              key: "unsubscribeAllStream",
              value: function() {
                  var e = 0
                    , t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var a, r = (0,
                      n.default)(this.flvPlayers.values()); !(t = (a = r.next()).done); t = !0) {
                          var o = a.value;
                          if (0 !== o.streamId) {
                              var u = new S.default(this.userGroupId,o.streamId,l.default.getUid(),!1,0,0);
                              l.default.send(u.marshall()),
                              e++
                          }
                      }
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
                  d.default.log("HuyaMgr.unsubscribeAllStream streamCnt=" + e)
              }
          }, {
              key: "getPlayer",
              value: function(e) {
                  return this.flvPlayers.has(e) ? this.flvPlayers.get(e) : null
              }
          }, {
              key: "getOrNewPlayer",
              value: function(e) {
                  if (this.flvPlayers.has(e))
                      return this.flvPlayers.get(e);
                  var t = !!this.audioInfos[e];
                  d.default.log("HuyaMgr.getOrNewPlayer uid=" + e, t);
                  var i = new _.default(e,this,t);
                  return this.flvPlayers.set(e, i),
                  i
              }
          }, {
              key: "getAllPlayer",
              value: function() {
                  return this.flvPlayers
              }
          }, {
              key: "setVolume",
              value: function(e) {
                  var t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var a, r = (0,
                      n.default)(this.flvPlayers.values()); !(t = (a = r.next()).done); t = !0)
                          a.value.msePlayer.setVolume(e)
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
              }
          }, {
              key: "setMuted",
              value: function(e) {
                  var t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var a, r = (0,
                      n.default)(this.flvPlayers.values()); !(t = (a = r.next()).done); t = !0)
                          a.value.msePlayer.setMuted(e)
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
              }
          }, {
              key: "getMuted",
              value: function() {
                  var e = !0
                    , t = !1
                    , i = void 0;
                  try {
                      for (var s, a = (0,
                      n.default)(this.flvPlayers.values()); !(e = (s = a.next()).done); e = !0)
                          return s.value.msePlayer.getMuted()
                  } catch (e) {
                      t = !0,
                      i = e
                  } finally {
                      try {
                          !e && a.return && a.return()
                      } finally {
                          if (t)
                              throw i
                      }
                  }
                  return -1
              }
          }, {
              key: "onPlayVideo",
              value: function(e, t, i, s, a) {
                  var n = m.default.now();
                  l.default.onPlayTime = n,
                  d.default.log("%c[TIME] onPlayTime=" + (n - l.default.firstRenderTime) + " totalTime=" + (n - l.default.startTime), "color:#A23400;background:#FFF5C2"),
                  t.autoplay = !0,
                  t.volume = this.hyPlayer.getVolume(),
                  this.hyPlayer.trigger(v.default.VIDEO_PLAY, {
                      uid: e,
                      video: t,
                      width: i,
                      height: s,
                      hasVideo: a
                  }),
                  0 !== this.startTs ? (this.hyPlayer.tsdbUtil.sendCdnTime(l.default, !1),
                  d.default.log("%cHuyaMgr.onPlayVideo uid=" + e + " w/h=" + i + "/" + s + " loadTime=" + (l.default.onPlayTime - this.startTs), "color:#A23400;background:#FFF5C2"),
                  this.startTs = 0,
                  l.default.printUseTime()) : d.default.log("HuyaMgr.onPlayVideo uid=" + e + " w/h=" + i + "/" + s)
              }
          }, {
              key: "onPlayAudio",
              value: function(e, t) {
                  var i = m.default.now();
                  if (d.default.log("%c[TIME] onPlayAudio uid=" + e + " totalTime=" + (i - l.default.startTime), "color:#A23400;background:#FFF5C2"),
                  t.volume = this.hyPlayer.getVolume(),
                  t.autoplay = !0,
                  t.uid = e,
                  l.default.isLiveMeeting) {
                      var s = {
                          uid: e,
                          video: t,
                          width: 0,
                          height: 0,
                          hasVideo: !1
                      };
                      this.hyPlayer.trigger(v.default.AUDIO_PLAY, s),
                      this.hyPlayer.liveMeetingMgr.detectSound(t)
                  }
                  var a = window._audios || [];
                  a.push(t),
                  window._audios = a
              }
          }, {
              key: "callback",
              value: function(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                  this.hyPlayer.trigger(e, t)
              }
          }, {
              key: "mergeMetaData",
              value: function(e, t) {
                  var i = new r.default;
                  if (e && e.forEach(function(e, t) {
                      i.set(t, e)
                  }),
                  t) {
                      var s = "";
                      t.forEach(function(t, a) {
                          if (e && 7 != a && 255 != a) {
                              var n = e.get(a);
                              null == n && (n = "[]"),
                              n != t && (s += "\n+---- " + a + ": " + n + "->" + t)
                          }
                          i.set(a, t)
                      }),
                      s.length > 0 && i.set("log", s)
                  }
                  return i
              }
          }]),
          e
      }();
      t.default = g
  }
  , function(e, t, i) {
      e.exports = {
          default: i(316),
          __esModule: !0
      }
  }
  , function(e, t, i) {
      i(47),
      i(37),
      e.exports = i(317)
  }
  , function(e, t, i) {
      var s = i(84)
        , a = i(15)("iterator")
        , n = i(38);
      e.exports = i(11).isIterable = function(e) {
          var t = Object(e);
          return void 0 !== t[a] || "@@iterator"in t || n.hasOwnProperty(s(t))
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(44))
        , u = s(i(319))
        , l = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.configs = new a.default,
              this.initDefaultConfig()
          }
          return (0,
          r.default)(e, [{
              key: "initDefaultConfig",
              value: function() {
                  var e = this.configs;
                  e.set(o.default.VIDEO_ACCESS_MODE, u.default.VIDEO_ACCESS_PULL),
                  e.set(o.default.VIDEO_JIT_BUFLEN, 2e3),
                  e.set(o.default.VIDEO_JIT_MAX_BUFLEN, 4e3),
                  e.set(o.default.VIDEO_P2P_MODE, u.default.VIDEO_P2P_ENABLE),
                  e.set(o.default.AUDIO_ACCESS_MODE, u.default.AUDIO_ACCESS_PUSH),
                  e.set(o.default.AUDIO_JIT_BUFLEN, 1e3),
                  e.set(o.default.AUDIO_PUSH_LEN, 4e3),
                  e.set(o.default.JIT_DOWN_MODE, u.default.JIT_DOWN_ENABLE),
                  e.set(o.default.JIT_UP_MODE, u.default.JIT_UP_ENABLE),
                  e.set(o.default.JIT_ADJUST_MODE, u.default.JIT_ADJUST_LOW_DELAY_MODE),
                  e.set(o.default.PUSH_GOP, !1),
                  e.set(o.default.P2P_MAX_SUB_NUM, 15)
              }
          }, {
              key: "setConfig",
              value: function(e, t) {
                  this.configs.set(e, t)
              }
          }, {
              key: "getConfig",
              value: function(e) {
                  return this.configs.get(e)
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          VIDEO_ACCESS_NORMAL: 0,
          VIDEO_ACCESS_PULL: 2,
          AUDIO_ACCESS_NORMAL: 0,
          AUDIO_ACCESS_PUSH: 1,
          VIDEO_P2P_DISABLE: !1,
          VIDEO_P2P_ENABLE: !0,
          JIT_DOWN_DISABLE: !1,
          JIT_DOWN_ENABLE: !0,
          JIT_UP_DISABLE: !1,
          JIT_UP_ENABLE: !0,
          JIT_ADJUST_NORMAL_MODE: 0,
          JIT_ADJUST_LOW_DELAY_MODE: 1
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(321))
        , o = s(i(25))
        , u = s(i(4))
        , l = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.burstChangeChecker = new r.default,
              this.averageCalculator = new o.default(60),
              this.smoothRtt = 0,
              this.smoothRttVar = 0,
              this.devRttVar = 60,
              this.downlinkRTO = 150
          }
          return (0,
          n.default)(e, [{
              key: "OnRecvRtt",
              value: function(e) {
                  this.averageCalculator.add(e),
                  this.calculateSmoothRtt(e),
                  this.calculateRttVariance(),
                  this.calculateDownlinkRTO()
              }
          }, {
              key: "GetSmoothRtt",
              value: function() {
                  return this.smoothRtt
              }
          }, {
              key: "GetDownlinkRTO",
              value: function() {
                  return Math.round(this.downlinkRTO)
              }
          }, {
              key: "CheckInvalidDownlinkRtt",
              value: function(e, t) {
                  var i = this.averageCalculator.max();
                  if (0 === i || !this.isTooBiggerUint32(i, e))
                      return this.OnRecvRtt(e),
                      !0;
                  if (this.burstChangeChecker.AddInvalid(e, t),
                  !this.burstChangeChecker.CheckInvalid()) {
                      var s = this.burstChangeChecker.GetInvalidSize();
                      return u.default.warn("DownlinkRTOCalculator.CheckInvalidDownlinkRtt invalid down link rtt max=" + i + " rtt=" + e + " invalidSize=" + s),
                      !1
                  }
                  var a = this.burstChangeChecker.GetInvalidValues();
                  if (null != a)
                      for (var n = 0; n < a.length; n++)
                          this.OnRecvRtt(a[n]);
                  return this.burstChangeChecker.Reset(),
                  !0
              }
          }, {
              key: "calculateSmoothRtt",
              value: function(e) {
                  if (0 === this.smoothRtt)
                      this.smoothRtt = e,
                      this.smoothRttVar = e >> 1;
                  else {
                      var t = e > this.smoothRtt ? e - this.smoothRtt : this.smoothRtt - e;
                      this.smoothRtt = this.getSmoothValue(this.smoothRtt, e),
                      this.smoothRttVar = this.getSmoothValue(this.smoothRttVar, t)
                  }
              }
          }, {
              key: "calculateRttVariance",
              value: function() {
                  this.devRttVar = 1 * this.smoothRttVar,
                  this.devRttVar < this.smoothRttVar + 60 ? this.devRttVar = this.smoothRttVar + 60 : this.devRttVar > this.smoothRttVar + 600 && (this.devRttVar = this.smoothRttVar + 600)
              }
          }, {
              key: "calculateDownlinkRTO",
              value: function() {
                  0 === this.smoothRtt ? this.downlinkRTO = 150 : this.downlinkRTO = this.smoothRtt + this.devRttVar
              }
          }, {
              key: "isTooBiggerUint32",
              value: function(e, t) {
                  return 0 !== e && (e > 50 && 5 * e < t || e + 500 < t)
              }
          }, {
              key: "getSmoothValue",
              value: function(e, t) {
                  return t > e ? 3 * e + t >> 2 : 7 * e + t >> 3
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.stampc = 0,
              this.invalidRtts = []
          }
          return (0,
          n.default)(e, [{
              key: "Reset",
              value: function() {
                  this.stampc = 0,
                  this.invalidRtts = []
              }
          }, {
              key: "AddInvalid",
              value: function(e, t) {
                  0 === t && (t = 1),
                  0 === this.stampc && (this.stampc = t),
                  t - this.stampc > 5e3 ? this.Reset() : (this.invalidRtts.push(e),
                  this.invalidRtts.length > 100 && this.invalidRtts.pop())
              }
          }, {
              key: "CheckInvalid",
              value: function() {
                  return 0 !== this.stampc && this.invalidRtts.length > 10
              }
          }, {
              key: "GetInvalidValues",
              value: function() {
                  var e = this.invalidRtts;
                  return this.invalidRtts = [],
                  e
              }
          }, {
              key: "GetInvalidSize",
              value: function() {
                  return this.invalidRtts.length
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(17))
        , o = s(i(26))
        , u = s(i(4))
        , l = s(i(6))
        , d = s(i(110))
        , h = s(i(34))
        , f = s(i(43))
        , c = function() {
          function e(t, i) {
              (0,
              a.default)(this, e),
              this.hyPlayer = t,
              this.huyaMgr = i,
              this.audioLinkDict = {},
              this.audioLinkTsDict = {},
              localStorage._windowCall && (window._audioLinks = this.audioLinkDict,
              window._startVoice = this.startVoice.bind(this))
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.stopAllVoice(),
                  this.audioLinkDict = {},
                  this.audioLinkTsDict = {},
                  window._audioLinks = this.audioLinkDict
              }
          }, {
              key: "startVoice",
              value: function(e) {
                  var t = e.streamName
                    , i = e.subSid
                    , s = e.presenterUid
                    , a = e.serviceType;
                  this._getVoiceProxy({
                      streamName: t,
                      subSid: i,
                      presenterUid: s,
                      serviceType: a
                  }),
                  this.huyaMgr && (this.huyaMgr.startVoice(),
                  this.huyaMgr.setAudioInfo(s, t))
              }
          }, {
              key: "stopVoice",
              value: function(e) {
                  var t = this.audioLinkDict[e];
                  if (t) {
                      u.default.log("%cAudioMgr.stopVoice " + e, "background:#FFBFFF"),
                      delete this.audioLinkDict[e];
                      var i = t.presenterUid;
                      t.destroy(),
                      this.huyaMgr && this.huyaMgr.stopPlayer(i)
                  }
              }
          }, {
              key: "stopAllVoice",
              value: function() {
                  for (var e in u.default.log("AudioMgr.stopAllVoice"),
                  this.audioLinkDict) {
                      var t = this.audioLinkDict[e];
                      if (t) {
                          var i = t.presenterUid;
                          t.destroy(),
                          this.huyaMgr && this.huyaMgr.stopPlayer(i)
                      }
                  }
                  this.audioLinkDict = {},
                  window._audioLinks = this.audioLinkDict
              }
          }, {
              key: "sendToAudioServ",
              value: function(e, t) {
                  var i = this.audioLinkDict[e];
                  i && t && i.send(t)
              }
          }, {
              key: "_getVoiceProxy",
              value: function(e) {
                  var t = e.streamName
                    , i = e.subSid
                    , s = e.presenterUid
                    , a = e.serviceType
                    , n = l.default.now()
                    , d = this.audioLinkTsDict[t];
                  if (d && n - d < 1e3)
                      u.default.warn("AudioMgr._getVoiceProxy exist", t);
                  else {
                      this.audioLinkTsDict[t] = n;
                      var c = new h.default;
                      c.sid = i || 0,
                      c.fuzzyParam.h264Only = !0,
                      c.fuzzyParam.maxCodeRateH264 = 480,
                      c.fuzzyParam.maxCodeRateH265 = 580;
                      var p = (Date.now() % 1e10 * 1e3 + (1e3 * Math.random() | 0)) % 4294967295
                        , v = new f.default;
                      v.uid = p,
                      v.version = 1,
                      v.sdkVersion = 1,
                      v.fuzzyQueryKeys = [c],
                      v.streamNames = [t],
                      v.appid = o.default.appid,
                      v.clientAppid = 0,
                      v.clientType = 4,
                      v.sendTime = .001 * Date.now() >> 0,
                      v.useCase = 1;
                      var y = {
                          serviceType: a || 0,
                          streamName: t,
                          subSid: i || 0,
                          presenterUid: s || 0
                      };
                      u.default.log("AudioMgr._getVoiceProxy uid=" + p, v),
                      r.default.proxyLink.sendYY(v, this._onVoiceProxy(y, p).bind(this), p, !1)
                  }
              }
          }, {
              key: "_onVoiceProxy",
              value: function(e, t) {
                  var i = this;
                  return function(s) {
                      if (s.uid == t) {
                          if (0 != s.result) {
                              var a = "UNKNOWN ERROR!";
                              return 1 == s.result ? a = "EGetVP_NO_RESOURCE" : 2 == s.result && (a = "EGetVP_FUZZY_NO_MATCH"),
                              void u.default.warn("AudioMgr._getVoiceProxy", a, s)
                          }
                          var n = e.streamName;
                          i.stopVoice(n),
                          u.default.log("%cAudioMgr._onVoiceProxy lPresenterUid=" + e.presenterUid + "\nsStreamName=" + n, "background:#FFBFFF");
                          var r = new d.default(e);
                          r.uid = t,
                          r.connect(s),
                          i.audioLinkDict[n] = r
                      } else
                          u.default.warn("[x] AudioMgr._onVoiceProxy No requested uid.")
                  }
              }
          }]),
          e
      }();
      t.default = c
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(17))
        , o = s(i(26))
        , u = s(i(4))
        , l = s(i(6))
        , d = s(i(39))
        , h = s(i(12))
        , f = s(i(34))
        , c = s(i(43))
        , p = function() {
          function e(t, i) {
              (0,
              a.default)(this, e),
              this.huyaMgr = t,
              this.hyPlayer = i,
              this._delayGetProxy = !1,
              this._retryTimer = 0,
              this._codeRate = 420,
              d.default.connected ? this._onConnected() : d.default.inited ? d.default.addListener(d.default.WEBSOCKET_CONNECTED, this._onConnected.bind(this)) : r.default.addListener(d.default.TAFLINK_INITED, this._onConnected.bind(this))
          }
          return (0,
          n.default)(e, [{
              key: "getUserId",
              value: function() {
                  return d.default.getUserId()
              }
          }, {
              key: "trigger",
              value: function(e, t) {
                  r.default._onYYData(e, t)
              }
          }, {
              key: "_onConnected",
              value: function() {
                  this._delayGetProxy && (this._delayGetProxy = !1,
                  this.getProxy())
              }
          }, {
              key: "sendWup",
              value: function(e, t, i) {
                  var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                    , a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                  d.default.sendWup(e, t, i, s, a)
              }
          }, {
              key: "sendYY",
              value: function(e, t) {
                  var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                    , s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3]
                    , a = i || r.default.getUid();
                  d.default.sendYY(e, t, a, s, !1)
              }
          }, {
              key: "switchCodeRate",
              value: function() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 8e3;
                  (e = Number(e)) > 0 && e % 100 == 0 && (e = e <= 8e3 ? e / 100 + 400 | 0 : e / 100 + 1e3 | 0),
                  this._codeRate = e,
                  this.getProxy()
              }
          }, {
              key: "getProxy",
              value: function() {
                  if (d.default.connected) {
                      this._retryTimer && (clearTimeout(this._retryTimer),
                      this._retryTimer = 0);
                      var e = new f.default;
                      e.sid = Number(r.default.subSid),
                      e.fuzzyParam.h264Only = !0,
                      e.fuzzyParam.maxCodeRateH264 = this._codeRate,
                      e.fuzzyParam.maxCodeRateH265 = 580;
                      var t = new c.default;
                      t.uid = r.default.getUid(),
                      t.version = 1,
                      t.sdkVersion = 1,
                      t.fuzzyQueryKeys = [e],
                      t.appid = o.default.appid,
                      t.clientAppid = 0,
                      t.clientType = 4,
                      t.sendTime = .001 * Date.now() >> 0,
                      r.default.initUseTime(l.default.now()),
                      this.sendYY(t, this._rspProxy.bind(this))
                  } else
                      this._delayGetProxy = !0
              }
          }, {
              key: "_rspProxy",
              value: function(e) {
                  if (r.default.getVPTime = l.default.now(),
                  u.default.log("%c[TIME] getVPTime=" + (r.default.getVPTime - r.default.startTime), "color:#A23400;background:#FFF5C2"),
                  0 == e.result)
                      r.default.videoLink.connect(e);
                  else {
                      var t = "UNKNOWN ERROR!";
                      if (1 == e.result ? t = "EGetVP_NO_RESOURCE" : 2 == e.result && (t = "EGetVP_FUZZY_NO_MATCH"),
                      u.default.warn("ProxyLink", t),
                      1 == e.retryType)
                          this.hyPlayer.trigger(h.default.NO_VIDEO);
                      else {
                          var i = this;
                          this._retryTimer = setTimeout(function() {
                              u.default.log("ProxyLink retry getProxy"),
                              i.getProxy()
                          }, 1e3 * e.retryFreq)
                      }
                  }
              }
          }, {
              key: "connected",
              get: function() {
                  return d.default.connected
              }
          }]),
          e
      }();
      t.default = p
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      function a(e) {
          return "color:" + e + ";font-weight:900"
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var n = s(i(7))
        , r = s(i(0))
        , o = s(i(1))
        , u = s(i(17))
        , l = s(i(4))
        , d = s(i(2))
        , h = s(i(67))
        , f = s(i(48))
        , c = s(i(8))
        , p = s(i(10))
        , v = s(i(6))
        , y = s(i(44))
        , m = s(i(25))
        , _ = s(i(51))
        , P = s(i(63))
        , T = s(i(65))
        , S = function() {
          function e(t) {
              (0,
              r.default)(this, e),
              this.huyaMgr = t,
              this.vps = null,
              this.link = new h.default(this,!0,1e3),
              this.printProtocol = !!Number(localStorage._printProtocol),
              this.started = !1,
              this.proxys = null,
              this.streamIds = [],
              this.tokens = new n.default,
              this.connectedTime = 0,
              this.forceConnectTime = 0,
              this.lastGetProxyTime = 0,
              this.pingCnt = 0,
              this.wsUrl = "",
              this.sslUrl = "",
              this.rttCalc = new m.default(12),
              this.rttMax = 0,
              this.selfIp = "",
              this.selfPort = 0
          }
          return (0,
          o.default)(e, [{
              key: "destroy",
              value: function() {
                  this.close(),
                  this.link.destroy(),
                  this.link = null
              }
          }, {
              key: "close",
              value: function() {
                  this.started && (l.default.info("VideoLink.close"),
                  this.started = !1,
                  this.forceConnectTime = 0,
                  this.reset(),
                  p.default.remove(this.onCheckTimer, this))
              }
          }, {
              key: "reset",
              value: function() {
                  l.default.log("VideoLink.reset"),
                  this.vps = null,
                  this.link.destroy(),
                  this.link = new h.default(this,!0,1e3),
                  this.lastGetProxyTime = 0,
                  this.pingCnt = 0,
                  this.proxys = null,
                  this.streamIds = [],
                  this.tokens.clear(),
                  this.connectedTime = 0,
                  this.rttMax = 0,
                  this.rttCalc.reset()
              }
          }, {
              key: "connect",
              value: function(e) {
                  this.vps = e,
                  this.sslUrl = e.sslUrl || "",
                  u.default.userArea = e.userArea;
                  var t = [];
                  if (e.allocatedStreams.forEach(function(e, i) {
                      t = t.concat(e)
                  }),
                  0 !== t.length) {
                      this.lastGetProxyTime = v.default.now() - 3e3,
                      this.forceConnectTime = 0,
                      this.link.destroy(),
                      this.link = new h.default(this,!0,1e3);
                      var i = this.tokens;
                      i.clear();
                      var s = []
                        , a = null;
                      if (t.forEach(function(e) {
                          var t = e.streamId
                            , n = t.streamType
                            , r = t.codecType;
                          n += n < 10 ? "\t\t" : "\t",
                          r += r < 10 ? "\t\t" : "\t",
                          l.default.info("sg --- streamType=" + n + "codecType=" + r + "startTs=" + t.startTs),
                          s.push(t),
                          i.set(t, e.token),
                          !a && e && (a = e.videoProxyInfos.slice())
                      }),
                      !a || 0 != a.length)
                          return this.streamIds = s,
                          this.proxys = a,
                          this.started = !0,
                          this.pingCnt = 0,
                          this.reconnect(),
                          p.default.add(this.onCheckTimer, this, 1e3),
                          this.wsUrl.replace(/ws+?:\/\//g, "");
                      l.default.warn("VideoLink.connect NO STREAM!")
                  } else
                      l.default.warn("VideoLink.connect proxys is empty")
              }
          }, {
              key: "reconnect",
              value: function() {
                  if (this.started)
                      if (this.proxys && 0 != this.proxys.length) {
                          var e = this.proxys.shift();
                          this.isWss(e) ? this.connectWss(e) : this.connectWs(e)
                      } else
                          this.getProxy()
              }
          }, {
              key: "isWss",
              value: function(e) {
                  return !(!this.sslUrl || !e.videoProxyInfo.has(8)) && e.videoProxyInfo.get(8) > 0
              }
          }, {
              key: "connectWs",
              value: function(e) {
                  var t = Math.floor(Math.random() * e.tcpPorts.length)
                    , i = t;
                  if (465 === e.tcpPorts[t] && (++t >= e.tcpPorts.length && (t = 0),
                  t === i))
                      return l.default.warn("VideoLink.connect has no correct ports"),
                      void this.reconnect();
                  this.wsUrl = "ws://" + e.ip + ":" + e.tcpPorts[t],
                  l.default.info("%cconnecting video " + this.wsUrl, a("#0000E3")),
                  localStorage._setWssUrl ? this.link.connect(localStorage._setWssUrl) : this.link.connect(this.wsUrl)
              }
          }, {
              key: "connectWss",
              value: function(e) {
                  var t = e.videoProxyInfo.get(8)
                    , i = [t >> 16, 65535 & t]
                    , s = i[Math.floor(Math.random() * i.length)];
                  this.wsUrl = "wss://" + c.default.ip2uint(e.ip) + this.sslUrl + ":" + s,
                  l.default.info("%cconnecting video " + this.wsUrl, a("#0000E3")),
                  localStorage._setWssUrl ? this.link.connect(localStorage._setWssUrl) : this.link.connect(this.wsUrl)
              }
          }, {
              key: "send",
              value: function(e) {
                  if (!e || !this.connected)
                      return !1;
                  var t = e.constructor.name;
                  return this.printProtocol && !g[t] && l.default.debug("%c>>>>> " + t, a("#009100"), e),
                  "Uint8Array" != t && (e = e.marshall()),
                  this.link.send(e),
                  !0
              }
          }, {
              key: "getProxy",
              value: function() {
                  var e = v.default.now();
                  e - this.lastGetProxyTime < 5e3 || (l.default.log("VideoLink.getProxy lastGetProxyTime=" + this.lastGetProxyTime + " now=" + e),
                  this.reset(),
                  this.lastGetProxyTime = e,
                  u.default.proxyLink.getProxy())
              }
          }, {
              key: "onopen",
              value: function() {
                  l.default.log("VideoLink.onopen");
                  var e = v.default.now();
                  this.connectedTime = e,
                  u.default.connectVideoTime = e,
                  l.default.log("%c[TIME] connectVideoTime=" + (u.default.connectVideoTime - u.default.getVPTime) + " totalTime=" + (e - u.default.startTime), "color:#A23400;background:#FFF5C2"),
                  u.default.addListener(d.default.PLoginVideoProxyUniformlyRes, this.onLoginVideoProxy, this),
                  u.default.addListener(d.default.PVideoProxyPingRes4, this.onVideoProxyPingRes, this),
                  u.default.addListener(d.default.PForceConnectVideoProxy3, this.onForceReconnect, this),
                  this.login()
              }
          }, {
              key: "onclose",
              value: function() {
                  l.default.log("%cVideoLink.onclose", "color:white;background:black;"),
                  this.connectedTime = 0,
                  this.reconnect()
              }
          }, {
              key: "onerror",
              value: function(e) {
                  l.default.warn("VideoLink.onerror", e),
                  this.reconnect()
              }
          }, {
              key: "onData",
              value: function(e, t) {
                  var s = new f.default(t)
                    , n = d.default[e];
                  if (!n)
                      throw new Error("[x] Unmatched uri, uri=" + (s.uri >> 8) + " resCode=" + s.resCode + " len=" + s.len);
                  var r = s
                    , o = null;
                  try {
                      o = i(91)("./" + n).default
                  } catch (t) {
                      l.default.warn("%c[x] Unmatched protocol " + (e >> 8) + " " + n, "color:red;background:#FFF0F0")
                  }
                  o && (null == (r = new o).unmarshall ? l.default.error("[x]" + n + ".unmarshall undefined!") : r.unmarshall(s)),
                  this.printProtocol && !g[n] && l.default.debug("%c<<<<< " + n, a("#0000E3"), r),
                  u.default._onYYData(e, r)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  if (this.started && (this.onPingTimer(e, t),
                  this.onCheckConnect(e, t),
                  this.onForceConnectTimer(e, t),
                  t % 10 == 0)) {
                      var i = this.link.speed;
                      i != c.default.UintMax && (i = c.default.formatByteSize(i),
                      l.default.log("huya VideoLink speed " + i + "/s"))
                  }
              }
          }, {
              key: "onPingTimer",
              value: function(e, t) {
                  if (this.link.connected && t % 3 == 0) {
                      if (this.pingCnt >= 4)
                          return l.default.warn("VideoLink.onPingTimer ping time out"),
                          void this.reconnect();
                      this.pingCnt++;
                      var i = new T.default;
                      i.uid = u.default.getUid(),
                      i.stampc = e,
                      i.loginStamp = 0,
                      i.uplinkBw = 0,
                      i.availPeers = 0,
                      i.bPunched = !1,
                      i.tcpEstableIds = 0,
                      i.tcpId = 0,
                      i.vipUser = 0,
                      i.vipProxy = 0,
                      this.send(i)
                  }
              }
          }, {
              key: "onCheckConnect",
              value: function(e) {
                  this.connected || this.forceConnectTime > 0 || this.reconnect()
              }
          }, {
              key: "onForceConnectTimer",
              value: function(e, t) {
                  if (!(this.forceConnectTime > e || 0 === this.forceConnectTime)) {
                      if (null === this.proxys)
                          this.getProxy();
                      else {
                          var i = this.proxys;
                          this.reset(),
                          this.lastGetProxyTime = e,
                          this.proxys = i,
                          this.reconnect(),
                          l.default.info("VideoLink.onForceConnectTimer addr=" + this.wsUrl)
                      }
                      this.forceConnectTime = 0
                  }
              }
          }, {
              key: "login",
              value: function() {
                  var e = new P.default;
                  e.version = 1,
                  e.uid = u.default.getUid(),
                  e.streamGroupIds = this.streamIds,
                  e.clientAppid = 301,
                  e.clientType = 1,
                  e.loginStamp = v.default.now(),
                  e.videoGroupId = this.vps.videoGroupId,
                  e.tcpId = 0,
                  e.commandType = 1,
                  e.fastAccessInterval = u.default.getConfig(y.default.VIDEO_JIT_BUFLEN),
                  e.fastAccessInterval > 0 && e.fastAccessInterval < 2e3 && (e.fastAccessInterval = 2e3),
                  e.cookie = "",
                  e.localIps = [],
                  e.localPort = 0,
                  e.sdkVersion = 1,
                  e.token = "",
                  e.tokenVersion = this.vps.tokenVersion,
                  e.tokens = this.tokens,
                  e.audioCodecType = [_.default.AUDIO_AACPLUS],
                  e.serviceType = 0,
                  e.loginSeq = 0,
                  this.send(e)
              }
          }, {
              key: "onLoginVideoProxy",
              value: function(e) {
                  u.default.loginTime = v.default.now(),
                  l.default.log("%c[TIME] loginTime=" + (u.default.loginTime - u.default.connectVideoTime) + " totalTime=" + (u.default.loginTime - u.default.startTime), "color:#A23400;background:#FFF5C2"),
                  this.selfIp = c.default.inet_ntoa(e.wlanIp),
                  this.selfPort = e.wlanPort,
                  e.reject > 0 && l.default.warn("VideoLink.onLoginVideoProxy reject=" + e.reject)
              }
          }, {
              key: "onVideoProxyPingRes",
              value: function(e) {
                  this.pingCnt = 0,
                  u.default.videoNtp.ntpProcess(e.stampc, e.stamps);
                  var t = v.default.now()
                    , i = t - e.stampc;
                  i < 6e5 && this.onRtt(i),
                  u.default.downlinkRTOCalculator.CheckInvalidDownlinkRtt(i, t)
              }
          }, {
              key: "onForceReconnect",
              value: function(e) {
                  var t = v.default.now();
                  this.proxys = e.videoProxyIpInfo,
                  this.forceConnectTime = Math.round(e.reconnectTime * Math.random() * 1e3),
                  this.forceConnectTime < 1e3 ? this.forceConnectTime = t : this.forceConnectTime += t,
                  l.default.info("VideoLink.onForceReconnect time=" + e.reconnectTime + "-" + this.forceConnectTime + "-" + t + " status=" + e.reconnectStatus + " new proxy cnt=" + e.videoProxyInfo.length),
                  this.onForceConnectTimer(t, 0)
              }
          }, {
              key: "getVideoConnectedDuration",
              value: function() {
                  return this.link.connected ? v.default.now() - this.connectedTime : 0
              }
          }, {
              key: "avgRtt",
              value: function() {
                  var e = this.rttCalc.average();
                  return e === c.default.UintMax ? 0 : e
              }
          }, {
              key: "getMaxRtt",
              value: function() {
                  var e = this.rttMax;
                  return this.rttMax = 0,
                  e
              }
          }, {
              key: "onRtt",
              value: function(e) {
                  this.rttCalc.add(e),
                  e > this.rttMax && (this.rttMax = e)
              }
          }, {
              key: "connected",
              get: function() {
                  return this.link && this.link.connected
              }
          }]),
          e
      }();
      t.default = S;
      var g = {
          PStreamData3: 1,
          PPullStreamData: 1,
          PVideoProxyPing3: 1,
          PVideoProxyPingRes4: 1,
          PNotifyCurrentStream4: 1,
          PReSendStreamData4: 1,
          PP2pVideoPing3: 1,
          PNotifyUplinkRecvCount3: 1,
          PVideoSyncSpeakerTime3: 1
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(17))
        , o = s(i(4))
        , u = s(i(8))
        , l = s(i(6))
        , d = s(i(24))
        , h = s(i(205))
        , f = s(i(44))
        , c = s(i(107))
        , p = s(i(50))
        , v = s(i(2))
        , y = s(i(48))
        , m = s(i(326))
        , _ = s(i(213))
        , P = s(i(327))
        , T = s(i(328))
        , S = s(i(329))
        , g = s(i(66))
        , I = i(12)
        , E = s(i(333))
        , k = s(i(334))
        , C = s(i(108))
        , R = (s(i(335)),
      s(i(336)))
        , A = s(i(109))
        , U = function() {
          function e(t, i, s) {
              (0,
              a.default)(this, e),
              this.uid = t,
              this.huyaMgr = i,
              this.isPureAudio = s,
              this.flvHeader = T.default.getFlvHeader(),
              this.msePlayer = new g.default(this,"yy",!0,s),
              this.msePlayer.appendFlv(this.flvHeader),
              this.msePlayer.setPushGop(r.default.getConfig(f.default.PUSH_GOP)),
              this.isPureAudio && this.msePlayer.setJitter(200, 100, 400),
              this.metadataTick = new A.default(i.hyPlayer,this.msePlayer),
              this.FIRST_TS_INIT = -1,
              this.FIRST_TS_AUDIO = 0,
              this.FIRST_TS_AUDIO_PUSH = 1,
              this.FIRST_TS_VIDEO = 2,
              this.FIRST_TS_VIDEO_PUSH = 3,
              this.firstTsStatus = this.FIRST_TS_INIT,
              this.firstTs = 0,
              this.firstOsTs = 0,
              this.lastPlayTs = 0,
              this.lastPlayVideoSeq = 0,
              this.lastPlayVideoKey = 0,
              this.lastPlayAudioKey = 0,
              this.lastAvcStr = null,
              this.lastAacStr = null,
              this.lastATs = 0,
              this.VIDEO_STOP_TIME = 1e4,
              this.AUDIO_STOP_TIME = 1e4,
              this.lastRecvVideoTs = 0,
              this.lastRecvAudioTs = 0,
              this.videoChain = new h.default,
              this.audioChain = new h.default,
              this.videoPlayStat = new R.default(this),
              this.audioSsrc = u.default.UintMax,
              this.videoStatus = I.Status.VIDEO_STOP,
              this.videoResender = new S.default(this),
              this.videoQuickAccess = new m.default(t,!0),
              this.audioQuickAccess = new m.default(t,!1),
              this.JitterBufLen = 0,
              this.pauseStartTs = 0,
              this.osTime = 0,
              this.localTime = 0,
              r.default.addListener(v.default.PResendStreamDataFailAck, this.onResenderFailedAck, this)
          }
          return (0,
          n.default)(e, [{
              key: "dispose",
              value: function() {
                  o.default.info("FlvPlayer.dispose uid=" + this.uid),
                  this.resetAudio(),
                  this.msePlayer.destroy(),
                  this.msePlayer = null,
                  this.resetVideo()
              }
          }, {
              key: "resetVideo",
              value: function() {
                  this.lastRecvVideoTs && o.default.info("FlvPlayer.resetVideo uid=" + this.uid),
                  this.lastRecvVideoTs = 0,
                  this.lastAvcStr = null,
                  this.updateStatus(I.Status.VIDEO_STOP),
                  this.videoChain.reset(),
                  this.videoQuickAccess.reset(),
                  this.audioQuickAccess.reset(),
                  this.videoResender.reset(),
                  this.videoPlayStat.reset(!0),
                  this.firstTsStatus = this.FIRST_TS_INIT,
                  this.firstTs = 0,
                  this.firstOsTs = 0,
                  this.lastPlayTs = 0,
                  this.lastPlayVideoKey = 0,
                  this.lastPlayVideoSeq = 0,
                  this.metadataTick.reset(),
                  this.resetAudio(),
                  this.msePlayer && this.resetMsePlayer()
              }
          }, {
              key: "resetAudio",
              value: function() {
                  this.lastRecvAudioTs > 0 && o.default.info("FlvPlayer.resetAudio uid=" + this.uid),
                  this.lastRecvAudioTs = 0,
                  this.updateStatus(I.Status.AUDIO_STOP),
                  this.firstTsStatus !== this.FIRST_TS_AUDIO && this.firstTsStatus !== this.FIRST_TS_AUDIO_PUSH && this.firstTsStatus !== this.FIRST_TS_INIT || (this.lastPlayAudioKey = 0,
                  this.audioChain.reset(),
                  this.audioSsrc = u.default.UintMax,
                  this.firstTs = 0,
                  this.firstOsTs = 0,
                  this.firstTsStatus = this.FIRST_TS_INIT,
                  this.lastPlayTs = 0)
              }
          }, {
              key: "resetMsePlayer",
              value: function() {
                  o.default.log("FlvPlayer.resetMsePlayer uid=" + this.uid);
                  var e = void 0
                    , t = void 0;
                  null !== this.msePlayer && (e = this.msePlayer.getWidth(),
                  t = this.msePlayer.getHeight(),
                  this.msePlayer.destroy()),
                  this.msePlayer = new g.default(this,"yy",!0,this.isPureAudio),
                  this.msePlayer.appendFlv(this.flvHeader),
                  this.isPureAudio && this.msePlayer.setJitter(200, 100, 400),
                  e && t && this.msePlayer.setResolution(e, t),
                  this.msePlayer.setPushGop(r.default.getConfig(f.default.PUSH_GOP)),
                  this.lastAacStr = null,
                  this.lastAvcStr = null,
                  this.pauseStartTs = 0,
                  this.metadataTick && (this.metadataTick.mse = this.msePlayer)
              }
          }, {
              key: "onCheckTimer",
              value: function(e, t) {
                  return this.lastRecvAudioTs && e - this.lastRecvAudioTs > this.AUDIO_STOP_TIME && (o.default.info("FlvPlayer.onCheckTimer stop audio uid=" + this.uid),
                  this.resetAudio()),
                  this.lastRecvVideoTs && e - this.lastRecvVideoTs > this.VIDEO_STOP_TIME && (o.default.info("FlvPlayer.onCheckTimer stop video uid=" + this.uid),
                  this.resetVideo()),
                  0 === this.lastRecvAudioTs && 0 === this.lastRecvVideoTs ? (this.dispose(),
                  o.default.info("FlvPlayer.onCheckTimer remove uid=" + this.uid),
                  !0) : (this.msePlayer && this.msePlayer.onCheckTimer(e, t),
                  this.metadataTick.onCheckTimer(e, t),
                  !1)
              }
          }, {
              key: "onCheckFastTimer",
              value: function(e, t) {
                  this.videoQuickAccess.checkPull(e),
                  this.audioQuickAccess.checkPull(e),
                  this.msePlayer && this.msePlayer.onCheckFastTimer(e, t),
                  this.play(e, t),
                  this.videoResender.onCheckFastTimer(e, t)
              }
          }, {
              key: "checkVideoPushPlay",
              value: function(e) {
                  if (!this.lastPlayTs) {
                      this.audioChain.size > 0 && this.audioChain.size < 40 && this.firstOsTs;
                      for (var t = this.videoChain.head, i = 0; null !== t; ) {
                          var s = t.data;
                          if (s.isFull)
                              if (0 === i)
                                  s.dts === this.firstTs && (i = s.dts);
                              else if (s.dts - i >= 500) {
                                  var a = 500 + this.JitterBufLen - (e - this.firstOsTs);
                                  return this.firstOsTs -= a,
                                  void o.default.log("FlvPlayer.checkVideoPushPlay start=" + i + " end=" + s.dts + " firstOsTs=" + this.firstOsTs + " elapseTime=" + (e - this.firstOsTs) + " modifyTime=" + a)
                              }
                          (t = t.next) === this.videoChain.head && (t = null)
                      }
                  }
              }
          }, {
              key: "checkAudioPushPlay",
              value: function(e) {
                  if (!this.lastPlayTs)
                      for (var t = this.audioChain.head, i = 0; null !== t; ) {
                          var s = t.data;
                          if (0 === i)
                              i = s.dts;
                          else if (s.dts - i >= 500) {
                              var a = 500 + this.JitterBufLen - (e - this.firstOsTs);
                              return this.firstOsTs -= a,
                              void o.default.log("FlvPlayer.checkAudioPushPlay start=" + i + " end=" + s.dts + " firstOsTs=" + this.firstOsTs)
                          }
                          (t = t.next) === this.audioChain.head && (t = null)
                      }
              }
          }, {
              key: "play",
              value: function(e, t) {
                  if (this.firstTsStatus !== this.FIRST_TS_INIT) {
                      this.firstTsStatus >= this.FIRST_TS_VIDEO ? this.checkVideoPushPlay(e) : this.firstTsStatus >= this.FIRST_TS_AUDIO && this.checkAudioPushPlay(e);
                      var i = e - this.firstOsTs;
                      if (!(i < this.JitterBufLen)) {
                          for (var s = this.firstTs + i - this.JitterBufLen, a = u.default.UintMax, n = null, r = this.videoChain.head; null !== r; ) {
                              if ((n = r.data).isFull && n.dts >= this.firstTs) {
                                  a = n.dts;
                                  break
                              }
                              (r = r.next) === this.videoChain.head && (r = null)
                          }
                          for (var l = this.lastPlayAudioKey + 1, d = this.getNextATs(), h = this.lastPlayVideoKey, f = this.getPlayTime(), c = f > 0 && d - f > 400, p = this.firstTsStatus < this.FIRST_TS_VIDEO; a <= s || d <= s; )
                              if (d <= a) {
                                  var v = this.audioChain.peek();
                                  if (null !== v)
                                      if (p)
                                          this.lastATs = d = v.dts;
                                      else {
                                          var y = this.audioSsrc === v.ssrc
                                            , m = v.key - l
                                            , T = v.dts - d;
                                          if (T <= -1 * P.default.MUSIC_MID_TIME_LEN) {
                                              this.audioChain.get();
                                              continue
                                          }
                                          T > (y && 0 === m ? 10 : .5) * P.default.MUSIC_MID_TIME_LEN && (v = this.getEmptyAudioFrame(d, l))
                                      }
                                  else {
                                      if (c || p) {
                                          s = d - P.default.MUSIC_MID_TIME_LEN;
                                          break
                                      }
                                      v = this.getEmptyAudioFrame(d, l)
                                  }
                                  this.playAudio(v, e, d),
                                  l = this.lastPlayAudioKey + 1,
                                  d = this.getNextATs()
                              } else {
                                  var S = !1;
                                  if ((n = r.data).isFull && n.key > this.lastPlayVideoKey) {
                                      var g = n.key - h - 1;
                                      if (g > 0)
                                          if (g >= 4)
                                              S = !0;
                                          else
                                              for (var I = 1; I <= g; ++I)
                                                  if (n.getLastFrameType(I) !== _.default.FRAMETYPE_VIDEO_B) {
                                                      S = !0;
                                                      break
                                                  }
                                      S && !n.isKeyFrame || (S && 0 !== h && (o.default.log("FlvPlayer.play skipVideo uid=" + this.uid + " skipCnt=" + g + " key=" + h + "-" + n.key + " ts=" + n.dts),
                                      this.videoPlayStat.skipVideoFrameCnt += g),
                                      this.playVideo(n, e, h, r, g),
                                      h = n.key)
                                  }
                                  (r = r.next) === this.videoChain.head ? a = u.default.UintMax : (n = r.data).isFull && (a = n.dts)
                              }
                          for (; null !== (n = this.videoChain.peek()) && n.key <= h; )
                              n = this.videoChain.get();
                          this.lastPlayVideoKey = h,
                          s > this.lastPlayTs && (this.lastPlayTs = s),
                          this.playAsMoreAsPossible(s, e)
                      }
                  }
              }
          }, {
              key: "playAsMoreAsPossible",
              value: function(e, t) {
                  for (var i = null, s = null, a = 0, n = 0, r = 0, u = this.lastPlayVideoKey; null !== (i = this.videoChain.peek()) && (a = i.stamp,
                  i.isFull && i.key === this.lastPlayVideoKey + 1); ) {
                      for (var l = !0; n = this.getNextATs(),
                      r = this.lastPlayAudioKey + 1,
                      !(n > a); ) {
                          if (null === (s = this.audioChain.peek())) {
                              l = !1;
                              break
                          }
                          if (s.key !== r) {
                              l = !1;
                              break
                          }
                          var d = s.dts - n;
                          if (d < -10 * P.default.MUSIC_MID_TIME_LEN) {
                              o.default.warn("FlvPlayer.playAsMoreAsPossible audioFrame key continue but dts smaller, curAts:" + n + " audio dts:" + s.dts),
                              this.audioChain.get(),
                              l = !1;
                              break
                          }
                          if (d >= 3 * P.default.MUSIC_MID_TIME_LEN) {
                              l = !1;
                              break
                          }
                          this.playAudio(s, t, n)
                      }
                      if (!l)
                          break;
                      this.playVideo(i, t, u, null, 0),
                      u = (i = this.videoChain.get()).key,
                      this.lastPlayVideoKey = u
                  }
              }
          }, {
              key: "playVideo",
              value: function(e, t, i, s, a) {
                  if (e.isKeyFrame) {
                      var n = T.default.getAvc(e)
                        , u = n.toString();
                      if (this.lastAvcStr !== u) {
                          this.lastAvcStr = u;
                          var l = T.default.packAvcFlvTag(e.dts, n);
                          this.msePlayer && this.msePlayer.appendFlv(l)
                      }
                      T.default.trimIFrame(e, n.length)
                  }
                  var d = e.dts - this.firstTs;
                  T.default.setFrameTimestamp(d, e.streamData),
                  this.lastAvcStr && (this.msePlayer && this.msePlayer.appendFlv(e.streamData),
                  e.streamData = null,
                  e.isPlayed = !0),
                  this.lastPlayVideoSeq = e.lastPktSeq,
                  this.videoPlayStat.onPlayStat(e, t, i, s, a),
                  0 == r.default.firstRenderTime && (r.default.firstRenderTime = t,
                  o.default.log("%c[TIME] firstRenderTime=" + (t - r.default.firstIFrameTime) + " totalTime=" + (t - r.default.startTime), "color:#A23400;background:#FFF5C2"))
              }
          }, {
              key: "playAudio",
              value: function(e, t, i) {
                  e.aacConfig && (o.default.log("FlvPlayer.playAudio aacConfig change uid=" + this.uid),
                  this.msePlayer && this.msePlayer.appendFlv(e.aacConfig),
                  e.aacConfig = null);
                  var s = i - this.firstTs;
                  T.default.setFrameTimestamp(s, e.streamData),
                  this.msePlayer && this.msePlayer.appendFlv(e.streamData),
                  e.streamData = null,
                  this.lastPlayAudioKey = e.key,
                  this.incAts(1),
                  e.isEmpty || this.audioChain.get(),
                  e.isEmpty || (this.audioSsrc = e.ssrc)
              }
          }, {
              key: "getEmptyAudioFrame",
              value: function(e, t) {
                  var i = new E.default;
                  i.isEmpty = !0,
                  i.key = t,
                  i.dts = e,
                  i.ssrc = u.default.UintMax;
                  var s = new Uint8Array(C.default.emptyAacFrameAdts);
                  d.default.chrome && d.default.version.major < 50 && (s = C.default.getSilentFrame(5, 2));
                  var a = 1 & s[0] ? 7 : 9;
                  if (null === this.lastAacStr) {
                      var n = s.subarray(0, a)
                        , r = T.default.adtsToConfig(n);
                      this.lastAacStr = r.toString();
                      var l = T.default.packAudioFlvTag(0, r, 0);
                      this.msePlayer && this.msePlayer.appendFlv(l),
                      o.default.log("FlvPlayer.getEmptyAudioFrame append aacConfig=" + this.lastAacStr + " uid=" + this.uid)
                  } else
                      Number(localStorage._printPreEmpytFrame) && o.default.log("FlvPlayer.getEmptyAudioFrame key=" + t + " dts=" + e + " uid=" + this.uid);
                  return s = s.subarray(a),
                  i.streamData = T.default.packAudioFlvTag(e, s, 1),
                  i
              }
          }, {
              key: "trimAudioBeforeDts",
              value: function(e) {
                  for (var t = this.audioChain.peek(); t && t.dts < e; )
                      this.audioChain.get(),
                      t = this.audioChain.peek();
                  return t
              }
          }, {
              key: "trimVideoBeforeDts",
              value: function(e) {
                  for (var t = this.videoChain.peek(); t && t.dts < e; )
                      this.videoChain.get(),
                      t = this.videoChain.peek();
                  return t
              }
          }, {
              key: "setLastAts",
              value: function(e) {
                  this.lastATs = e - P.default.MUSIC_MID_TIME_LEN
              }
          }, {
              key: "getNextATs",
              value: function() {
                  return Math.round(this.lastATs + P.default.MUSIC_MID_TIME_LEN)
              }
          }, {
              key: "incAts",
              value: function(e) {
                  this.lastATs += P.default.MUSIC_MID_TIME_LEN * e
              }
          }, {
              key: "setFirstTs",
              value: function(e, t, i, s) {
                  var a = this.firstTsStatus;
                  if (a >= e)
                      o.default.error("FlvPlayer.setFirstTs error change oldstatus:" + a + " new:" + e + " uid=" + this.uid);
                  else if (this.firstTs = t,
                  this.firstOsTs = i,
                  this.firstTsStatus = e,
                  o.default.log("FlvPlayer.setFirstTs status=" + a + "->" + e + " firstTs=" + t + " firstOsTs=" + this.firstOsTs + " jitBufLen=" + this.JitterBufLen + " firstSeq=" + s + " uid=" + this.uid),
                  a !== this.FIRST_TS_AUDIO && a !== this.FIRST_TS_AUDIO_PUSH || e >= this.FIRST_TS_VIDEO && this.updateFirstTsForce(),
                  this.firstTsStatus == this.FIRST_TS_VIDEO || this.firstTsStatus == this.FIRST_TS_VIDEO_PUSH) {
                      var n = this.trimVideoBeforeDts(this.firstTs);
                      this.lastPlayVideoKey = n.key - 1,
                      this.lastPlayVideoSeq = n.lastPktSeq - 2,
                      o.default.log("FlvPlayer.setFirstTs first video key=" + this.lastPlayVideoKey + " ts=" + n.dts + " pktNum=" + n.pktNum + " uid=" + this.uid);
                      var u = this.trimAudioBeforeDts(this.firstTs);
                      if (!u || u.dts - this.firstTs > P.default.MUSIC_MID_TIME_LEN ? (this.lastPlayAudioKey = 0,
                      this.setLastAts(this.firstTs)) : (this.lastPlayAudioKey = u.key - 1,
                      this.setLastAts(u.dts)),
                      o.default.log("FlvPlayer.setFirstTs first audio key=" + this.lastPlayAudioKey + " ts=" + this.lastATs + " uid=" + this.uid),
                      r.default.firstIFrameTime = i,
                      o.default.log("%c[TIME] firstIFrameTime=" + (i - r.default.firstVideoPkgTime) + " totalTime=" + (i - r.default.startTime), "color:#A23400;background:#FFF5C2"),
                      null !== this.lastAacStr) {
                          var l = new Uint8Array(this.lastAacStr.split(","))
                            , d = l.length > 2 ? -1 : 0
                            , h = T.default.packAudioFlvTag(0, l, d);
                          this.msePlayer && this.msePlayer.appendFlv(h)
                      }
                  } else if (this.firstTsStatus == this.FIRST_TS_AUDIO || this.firstTsStatus == this.FIRST_TS_AUDIO_PUSH) {
                      var f = this.trimAudioBeforeDts(this.firstTs);
                      f && f.dts === this.firstTs && (this.lastPlayAudioKey = f.key - 1,
                      this.setLastAts(f.dts),
                      o.default.log("FlvPlayer.setFirstTs first pure audio key=" + this.lastPlayAudioKey + " ts=" + this.lastATs + " uid=" + this.uid))
                  }
              }
          }, {
              key: "updateFirstTsForce",
              value: function() {
                  o.default.info("FlvPlayer.updateFirstTsForce uid=" + this.uid),
                  this.resetMsePlayer(),
                  this.lastPlayTs = 0,
                  this.lastPlayAudioKey = 0,
                  this.lastPlayVideoKey = 0,
                  this.audioSsrc = u.default.UintMax
              }
          }, {
              key: "getPlayTime",
              value: function() {
                  if (!this.msePlayer)
                      return 0;
                  var e = this.msePlayer.getCurrentDts();
                  return e > 0 && (e += this.firstTs),
                  e
              }
          }, {
              key: "calcCapToPlayDelay",
              value: function(e, t) {
                  if (0 === t || 0 === this.osTime || !this.msePlayer)
                      return 0;
                  var i = 0
                    , s = r.default.videoNtp.convertToSrvTime(e);
                  return s && (i = s - (this.localTime - (this.osTime - t))),
                  i += this.msePlayer.getParserBufLen() + this.msePlayer.getBufferLen(),
                  Math.round(i)
              }
          }, {
              key: "calcRecvToPlayDelay",
              value: function(e, t) {
                  return this.msePlayer ? e - t + this.msePlayer.getParserBufLen() + this.msePlayer.getBufferLen() : 0
              }
          }, {
              key: "setPullSeq",
              value: function(e, t) {
                  if (arguments.length > 2 && void 0 !== arguments[2] && !arguments[2])
                      this.audioQuickAccess.setPullSeq(e, t);
                  else {
                      if (this.lastPlayVideoSeq >= t)
                          return;
                      this.lastPlayVideoSeq > e && (e = this.lastPlayVideoSeq + 2),
                      this.videoQuickAccess.setPullSeq(e, t) && (r.default.isPull = !0,
                      this.videoResender.setMaxPullSeq(t))
                  }
              }
          }, {
              key: "onSubscribeStreamRes",
              value: function(e) {
                  arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                  o.default.log("FlvPlayer.onSubscribeStreamRes uid=" + this.uid + " sub=" + e.subscribe + " res=" + e.resCode),
                  !e.subscribe || e.resCode > 0 || this.videoQuickAccess.setPullSeq(e.firstSeq, e.lastSeq)
              }
          }, {
              key: "onVideoStreamData",
              value: function(t) {
                  var i = l.default.now();
                  if (0 == r.default.firstVideoPkgTime && (r.default.firstVideoPkgTime = i,
                  o.default.log("%c[TIME] firstVideoPkgTime=" + (i - r.default.connectVideoTime) + " totalTime=" + (i - r.default.startTime), "color:#A23400;background:#FFF5C2")),
                  this.lastRecvVideoTs = i,
                  this.videoQuickAccess.updatePull(t),
                  t.seqNum <= this.lastPlayVideoSeq)
                      return e.RECV_TOO_LATE;
                  this.videoPlayStat.recvVideoPktCnt++,
                  this.videoPlayStat.recvVideoByteCnt += t.streamData.length + 52;
                  var s = e.RECV_SUCCESS;
                  this.videoResender.OnRecvPacket(t, i) === S.default.RESENDRET_DOWNLINK_RESEND && (s = e.DOWNLINK_RESEND);
                  var a = this.videoChain.getOrNewNode(t.lastKeyFrame);
                  if (!a)
                      return e.RECV_ERROR;
                  var n = null;
                  return null === a.data ? ((n = new k.default).append(t),
                  a.data = n,
                  this.videoPlayStat.recvVideoFrameCnt++) : (n = a.data).append(t),
                  n.isFull && n.isKeyFrame && (this.firstTsStatus < this.FIRST_TS_VIDEO && !n.isFastAccess && this.setFirstTs(this.FIRST_TS_VIDEO, n.dts, n.recvTs, n.firstPktSeq),
                  this.firstTsStatus < this.FIRST_TS_VIDEO_PUSH && n.isFastAccess && this.setFirstTs(this.FIRST_TS_VIDEO_PUSH, n.dts, n.recvTs, n.firstPktSeq)),
                  s
              }
          }, {
              key: "onAudioStreamData",
              value: function(t) {
                  var i = l.default.now();
                  this.lastRecvAudioTs = i,
                  this.audioQuickAccess.updatePull(t);
                  var s = 0
                    , a = t.streamGroupId.streamType;
                  return s = a >= p.default.STREAM_AUDIO_FLV_RAW && a <= p.default.STREAM_AUDIO_ALL_SID ? this.packFlvAudioFrame(t, i) : this.packRawAudioFrames(t, i),
                  isNaN(s) || s <= 0 ? e.RECV_ERROR : (this.firstTsStatus < this.FIRST_TS_AUDIO && !t.isFastAccessPacket && this.setFirstTs(this.FIRST_TS_AUDIO, s, i, t.seqNum),
                  this.firstTsStatus < this.FIRST_TS_AUDIO_PUSH && t.isFastAccessPacket && this.setFirstTs(this.FIRST_TS_AUDIO_PUSH, s, i, t.seqNum),
                  e.RECV_SUCCESS)
              }
          }, {
              key: "packFlvAudioFrame",
              value: function(e, t) {
                  e.getFrameTime() <= this.lastPlayTs && Number(localStorage._printDropAudio) && o.default.debug("FlvPlayer.packFlvAudioFrame drop seqNum=" + e.seqNum);
                  var i = new E.default;
                  i.uid = e.uid,
                  i.key = e.lastKeyFrame,
                  i.seqNum = e.seqNum,
                  i.isEmpty = !1,
                  i.isFastAccess = e.isFastAccessPacket,
                  i.isKeyFrame = 1,
                  i.dts = e.getFrameTime(),
                  i.ssrc = 0,
                  i.codec = 1,
                  i.recvTs = t;
                  var s = T.default.getAvc(e)
                    , a = s.toString();
                  if (null === this.lastAacStr) {
                      this.lastAacStr = a;
                      var n = T.default.packAudioFlvTag(0, s, -1);
                      this.msePlayer && this.msePlayer.appendFlv(n),
                      o.default.log("FlvPlayer.packFlvAudioFrame append aacConfig=" + a + " uid=" + this.uid)
                  } else
                      this.lastAacStr != a && (i.aacConfig = T.default.packAudioFlvTag(0, s, -1),
                      o.default.warn("FlvPlayer.packFlvAudioFrame aacConfig change, " + this.lastAacStr + " -> " + a + " uid=" + this.uid),
                      this.lastAacStr = a);
                  return T.default.trimIFrame(e, s.length),
                  i.streamData = e.streamData,
                  this.audioChain.put(i),
                  i.dts
              }
          }, {
              key: "packRawAudioFrames",
              value: function(e, t) {
                  var i = new DataView(e.streamData.buffer)
                    , s = new y.default(i,!1)
                    , a = new c.default;
                  a.unmarshall(s);
                  var n = a.type;
                  if (n !== P.default.MUSIC_MID && n !== P.default.MUSIC_MID_128 && n !== P.default.MUSIC_MID_160 && n !== P.default.MUSIC_MID_192)
                      return e.seqNum % 200 == 0 && o.default.warn("FlvPlayer.packRawAudioFrames not supported audio codec type=" + n + " uid=" + this.uid),
                      !1;
                  a.capTimeStamp <= this.lastPlayTs && Number(localStorage._printDropAudio) && o.default.debug("FlvPlayer.packRawAudioFrames drop seqNum=" + e.seqNum);
                  for (var r = P.default.getAudioTimeLen(n), u = a.capTimeStamp, l = a.framenum, d = a.payload, h = d.length, f = null, p = 0, v = 0, m = 0; m < l; m++) {
                      if (h <= 1) {
                          o.default.error("FlvPlayer.packRawAudioFrames invalid length " + m + "/" + l + " uid=" + this.uid);
                          break
                      }
                      (f = new E.default).uid = e.uid,
                      f.key = a.framebase + (15 & d[p++]),
                      f.seqNum = e.seqNum,
                      f.isEmpty = !1,
                      f.isFastAccess = e.isFastAccessPacket,
                      f.isKeyFrame = a.isKeyVoice,
                      f.dts = u,
                      f.ssrc = a.ssrc,
                      f.codec = n,
                      f.recvTs = t;
                      var _ = d.subarray(p);
                      if (l > 1 && 0 == (v = P.default.caculateOneFrameLength(n, _))) {
                          o.default.warn("FlvPlayer.packRawAudioFrames tagLen invalid. uid=" + this.uid);
                          break
                      }
                      var S = 1 & _[0] ? 7 : 9
                        , g = void 0;
                      if (n == P.default.MUSIC_MID_128 || n == P.default.MUSIC_MID_160 || n == P.default.MUSIC_MID_192)
                          S = 2,
                          g = T.default.creatAdtsConfig();
                      else {
                          var I = _.subarray(0, S);
                          g = T.default.adtsToConfig(I)
                      }
                      var k = g.toString();
                      if (null === this.lastAacStr) {
                          this.lastAacStr = k;
                          var C = T.default.packAudioFlvTag(0, g, 0);
                          this.msePlayer && this.msePlayer.appendFlv(C),
                          o.default.log("FlvPlayer.packRawAudioFrames append aacConfig=" + k + " uid=" + this.uid)
                      } else
                          this.lastAacStr != k && (f.aacConfig = T.default.packAudioFlvTag(0, g, 0),
                          o.default.warn("FlvPlayer.packRawAudioFrames aacConfig change, " + this.lastAacStr + " -> " + k + " uid=" + this.uid),
                          this.lastAacStr = k);
                      _ = _.subarray(S),
                      f.streamData = T.default.packAudioFlvTag(u, _, 1),
                      this.audioChain.put(f),
                      u += r,
                      h -= 1 + v,
                      p += v,
                      v = 0
                  }
                  return a.capTimeStamp
              }
          }, {
              key: "onStopStream",
              value: function(e) {
                  var t = this.msePlayer ? this.msePlayer.getBufferLen() : 0;
                  o.default.info("FlvPlayer.onStopStream uid=" + this.uid + " bufLen=" + t),
                  this.resetVideo(),
                  this.huyaMgr.callback(I.Event.ANCHOR_STOP, {
                      uid: this.uid
                  })
              }
          }, {
              key: "onVideoSyncSpeakerTime",
              value: function(e) {
                  this.osTime = e.osTime,
                  this.localTime = e.localTime
              }
          }, {
              key: "onResenderFailedAck",
              value: function(e) {
                  this.videoPlayStat.videoResendFailedAck++,
                  this.videoResender.onResenderFailedAck(e)
              }
          }, {
              key: "onPlayVideo",
              value: function(e, t, i, s) {
                  s ? (this.huyaMgr.onPlayVideo(this.uid, e, t, i, s),
                  this.updateStatus(I.Status.VIDEO_PLAYING),
                  r.default.isPull && this.firstTsStatus == this.FIRST_TS_VIDEO && o.default.warn("%cFlvPlayer.onPlayVideo No fast access pkg received!!! uid=" + this.uid, "font-weight:900")) : this.huyaMgr.onPlayAudio(this.uid, e)
              }
          }, {
              key: "onVideoStop",
              value: function(e, t) {
                  o.default.log("FlvPlayer.onVideoStop uid=" + this.uid + " hasVideo=" + t),
                  t ? (this.updateStatus(I.Status.VIDEO_STOP),
                  this.huyaMgr.callback(I.Event.VIDEO_STOP, {
                      uid: this.uid,
                      video: e,
                      haveVideo: !0
                  })) : this.updateStatus(I.Status.AUDIO_STOP)
              }
          }, {
              key: "onPlayerError",
              value: function(e) {
                  this.resetMsePlayer(),
                  e && this.huyaMgr.callback(I.Event.H5_PLAYER_ERROR)
              }
          }, {
              key: "onPlayPause",
              value: function(e, t) {
                  this.pauseStartTs = e,
                  t && this.updateStatus(I.Status.VIDEO_CACHING)
              }
          }, {
              key: "onPlayResume",
              value: function(e, t) {
                  if (this.pauseStartTs) {
                      var i = e - this.pauseStartTs;
                      i > 200 && (o.default.warn("FlvPlayer.onPlayResume uid=" + this.uid + " pauseTime=" + i + " start=" + this.pauseStartTs + " now=" + e),
                      this.videoPlayStat.sensePauseTime += i,
                      this.videoPlayStat.sensePauseCnt++,
                      this.videoPlayStat.sensePauseTime5 += i,
                      this.videoPlayStat.sensePauseCnt5++),
                      this.pauseStartTs = 0
                  }
                  t && this.updateStatus(I.Status.VIDEO_PLAYING)
              }
          }, {
              key: "updateStatus",
              value: function(e) {
                  this.videoStatus !== e && (this.videoStatus = e,
                  this.huyaMgr.callback(I.Event.PLAY_STATUS, {
                      uid: this.uid,
                      status: e
                  }))
              }
          }]),
          e
      }();
      U.RECV_SUCCESS = 0,
      U.DOWNLINK_RESEND = 1,
      U.RECV_TOO_LATE = 3,
      U.RECV_ERROR = 4,
      U.TEMP_BUFFERED = 5,
      t.default = U
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(17))
        , o = s(i(8))
        , u = s(i(6))
        , l = s(i(4))
        , d = s(i(101))
        , h = function() {
          function e(t) {
              var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
              (0,
              a.default)(this, e),
              this.uid = t,
              this.isVideo = i,
              this.LOG_TAG = i ? "Video" : "Audio",
              this.MAX_PULL_SEQ_INTERVAL = 15e3,
              this.MAX_PULL_CNT_PER_TIME = 100,
              this.MAX_PULL_TASK_CNT = 5,
              this.QUICK_ACCESS_OT = 1e4,
              this.firstPullSeq = o.default.UintMax,
              this.lastPullSeq = o.default.UintMax,
              this.reqMaxPullSeq = o.default.UintMax,
              this.pullTasks = [],
              this.startPullTs = 0,
              this.isPulling = !1
          }
          return (0,
          n.default)(e, [{
              key: "setPullSeq",
              value: function(e, t) {
                  if (this.isPulling)
                      return l.default.info(this.LOG_TAG + "QuickAccess.setPullSeq pull task not finished, refuse new pull request"),
                      !1;
                  if (e === o.default.UintMax || t === o.default.UintMax || t <= e)
                      return l.default.log(this.LOG_TAG + "QuickAccess.setPullSeq invalid seq uid=" + this.uid + " seq=[" + e + "," + t + "] cnt=" + i),
                      !1;
                  if (this.firstPullSeq !== o.default.UintMax && this.lastPullSeq !== o.default.UintMax)
                      if (e > this.lastPullSeq)
                          ;
                      else {
                          if (t <= this.lastPullSeq)
                              return !1;
                          e = this.lastPullSeq + 2
                      }
                  var i = (t - e) / 2 + 1;
                  if (t - e > this.MAX_PULL_SEQ_INTERVAL)
                      l.default.log(this.LOG_TAG + "QuickAccess.setPullSeq too much uid=" + this.uid + " seq=[" + e + "," + t + "] cnt=" + i),
                      this.reset();
                  else {
                      var s = u.default.now();
                      this.firstPullSeq = e,
                      this.lastPullSeq = t,
                      this.reqMaxPullSeq = this.firstPullSeq - 2,
                      this.startPullTs = s,
                      l.default.log(this.LOG_TAG + "QuickAccess.setPullSeq uid=" + this.uid + " seq=[" + e + "," + t + "] cnt=" + i),
                      this.checkPull(s)
                  }
                  return !0
              }
          }, {
              key: "updatePull",
              value: function(e) {
                  if (e.isFastAccessPacket && (!this.isVideo || !e.isAudio) && (this.isVideo || !e.isVideo))
                      for (var t = e.seqNum, i = 0; i < this.pullTasks.length; i++) {
                          var s = this.pullTasks[i];
                          if (t < s.startSeq)
                              break;
                          if (t >= s.startSeq && t <= s.endSeq) {
                              this.pullTasks.shift();
                              var a = u.default.now();
                              this.checkPull(a);
                              break
                          }
                      }
              }
          }, {
              key: "checkPull",
              value: function(e) {
                  if (this.reqMaxPullSeq !== this.lastPullSeq) {
                      if (e - this.startPullTs >= this.QUICK_ACCESS_OT)
                          return l.default.warn(this.LOG_TAG + "QuickAccess.checkPull pull timeout uid=" + this.uid),
                          this.isPulling = !1,
                          void this.reset();
                      if (!(this.pullTasks.length >= this.MAX_PULL_TASK_CNT))
                          for (var t = this.MAX_PULL_TASK_CNT - this.pullTasks.length; 0 !== t; ) {
                              var i = new d.default;
                              i.uid = this.uid,
                              this.isVideo && r.default.videoStreamId ? i.streamGroupId = r.default.videoStreamId : !this.isVideo && r.default.audioStreamId && (i.streamGroupId = r.default.audioStreamId);
                              var s = this.reqMaxPullSeq + 2
                                , a = this.reqMaxPullSeq + 2 * this.MAX_PULL_CNT_PER_TIME;
                              a = a > this.lastPullSeq ? this.lastPullSeq : a;
                              for (var n = s; n <= a; n += 2)
                                  i.seqNums.push(n);
                              var o = {
                                  startSeq: s,
                                  endSeq: a
                              };
                              this.pullTasks.push(o),
                              t--,
                              this.reqMaxPullSeq = a,
                              r.default.send(i);
                              var u = a === this.lastPullSeq;
                              u ? (t = 0,
                              this.isPulling = !1) : this.isPulling = !0,
                              l.default.log("pull" + this.LOG_TAG + " uid=" + this.uid + " seq=[" + s + ", " + a + "] num=" + i.seqNums.length + " taskCnt=" + this.pullTasks.length + " " + (u ? "finished" : ""))
                          }
                  }
              }
          }, {
              key: "reset",
              value: function() {
                  l.default.log(this.LOG_TAG + "QuickAccess.reset"),
                  this.firstPullSeq = o.default.UintMax,
                  this.lastPullSeq = o.default.UintMax,
                  this.reqMaxPullSeq = o.default.UintMax,
                  this.pullTasks.splice(0, this.pullTasks.length),
                  this.startPullTs = 0
              }
          }]),
          e
      }();
      t.default = h
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var s = {
          Quality_AAC: "AAC",
          Quality_SILK: "SILK",
          MUSIC_MID: 1,
          MUSIC_MID_TIME_LEN: 2048e3 / 44100,
          MUSIC_MID_128: 35,
          MUSIC_MID_128_TIME_LEN: 1024e3 / 44100,
          MUSIC_MID_160: 36,
          MUSIC_MID_160_TIME_LEN: 1024e3 / 44100,
          MUSIC_MID_192: 37,
          MUSIC_MID_192_TIME_LEN: 1024e3 / 44100,
          VOICE_HIGHER: 2,
          VOICE_HIGHER_TIME_LEN: 20,
          VOICE_HIGHER_FRAME_LEN: 882,
          VOICE_HIGHER_QUALITY1: 22,
          VOICE_HIGHER_QUALITY1_TIME_LEN: 20,
          VOICE_HIGHER_QUALITY1_FRAME_LEN: 882,
          getAudioTimeLen: function(e) {
              switch (e) {
              case this.MUSIC_MID:
                  return this.MUSIC_MID_TIME_LEN;
              case this.MUSIC_MID_128:
                  return this.MUSIC_MID_128_TIME_LEN;
              case this.MUSIC_MID_160:
                  return this.MUSIC_MID_160_TIME_LEN;
              case this.MUSIC_MID_192:
                  return this.MUSIC_MID_192_TIME_LEN;
              case this.VOICE_HIGHER:
                  return this.VOICE_HIGHER_TIME_LEN;
              default:
                  return 0
              }
          },
          getAudioQualityType: function(e) {
              switch (e) {
              case this.MUSIC_MID:
              case this.MUSIC_MID_128:
              case this.MUSIC_MID_160:
              case this.MUSIC_MID_192:
                  return s.Quality_AAC;
              case this.VOICE_HIGHER:
              default:
                  return s.Quality_SILK
              }
          },
          NET_UNKNOWN_CODEC: -1e3,
          NET_AACPLUS: 1,
          NET_AAC_128K: 35,
          NET_AAC_160K: 36,
          NET_AAC_192K: 37,
          NET_AMRWB: 3,
          NET_SILK_16K: 2,
          NET_SILK_24K: 22,
          NET_SPEEX_MODE_8: 0,
          NET_SPEEX_MODE_4: 21,
          NET_SPEEX_MODE_2: 23,
          NET_OPUS_24K4: 50,
          NET_VIDEO_H264: 2e3,
          NET_VIDEO_VP8: 2001,
          NET_VIDEO_H265: 2002,
          NET_PHONE_1ON1_PROTO: 98,
          caculateOneFrameLength: function(e, t) {
              var i = 0
                , a = t.length;
              switch (e) {
              case s.NET_AACPLUS:
              case s.NET_AAC_128K:
              case s.NET_AAC_160K:
              case s.NET_AAC_192K:
                  if (a >= 7) {
                      var n = 3 & t[3];
                      (i = n << 11 | t[4] << 3 | t[5] >> 5 & 7) > a && (i = 0),
                      0 != n && console.log("-------caculateOneFrameLength--------")
                  }
                  break;
              case s.NET_AMRWB:
                  a >= 1 && (i = [18, 24, 33, 37, 41, 47, 51, 59, 61, 6, 6, 0, 0, 0, 1, 1][t[0] >> 3 & 15]) > a && (i = 0);
                  break;
              case s.NET_SILK_16K:
              case s.NET_SILK_24K:
                  if (a >= 2) {
                      var r = t[1] << 8 | t[0];
                      64512 == (64512 & r) && (i = 2 + (1023 & r)) > a && (i = 0)
                  }
                  break;
              case s.NET_SPEEX_MODE_8:
                  (i = 38) > a && (i = 0);
                  break;
              case s.NET_SPEEX_MODE_4:
                  (i = 20) > a && (i = 0);
                  break;
              case s.NET_SPEEX_MODE_2:
                  (i = 15) > a && (i = 0)
              }
              return i
          }
      };
      t.default = s
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e)
          }
          return (0,
          n.default)(e, null, [{
              key: "getFlvHeader",
              value: function() {
                  var e = new Uint8Array(13)
                    , t = 0;
                  return e[t++] = 70,
                  e[t++] = 76,
                  e[t++] = 86,
                  e[t++] = 1,
                  e[t++] = 5,
                  e[t++] = 0,
                  e[t++] = 0,
                  e[t++] = 0,
                  e[t++] = 9,
                  e[t++] = 0,
                  e[t++] = 0,
                  e[t++] = 0,
                  e[t++] = 0,
                  e
              }
          }, {
              key: "packAudioFlvTag",
              value: function(e, t) {
                  var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1
                    , s = t.length + 2
                    , a = new Uint8Array(11 + s + 4)
                    , n = 0;
                  return a[n++] = 8,
                  a[n++] = s >> 16 & 255,
                  a[n++] = s >> 8 & 255,
                  a[n++] = 255 & s,
                  a[n++] = e >> 16 & 255,
                  a[n++] = e >> 8 & 255,
                  a[n++] = 255 & e,
                  a[n++] = e >> 24 & 255,
                  a[n++] = 0,
                  a[n++] = 0,
                  a[n++] = 0,
                  -1 != i && (a[n++] = 175,
                  a[n++] = i),
                  a.set(t, n),
                  n += t.length,
                  s += 11,
                  a[n++] = s >> 24 & 255,
                  a[n++] = s >> 16 & 255,
                  a[n++] = s >> 8 & 255,
                  a[n++] = 255 & s,
                  a
              }
          }, {
              key: "packAvcFlvTag",
              value: function(e, t) {
                  var i = t.length + 5
                    , s = new Uint8Array(11 + i + 4)
                    , a = 0;
                  s[a++] = 9,
                  s[a++] = i >> 16 & 255,
                  s[a++] = i >> 8 & 255,
                  s[a++] = 255 & i,
                  s[a++] = e >> 16 & 255,
                  s[a++] = e >> 8 & 255,
                  s[a++] = 255 & e,
                  s[a++] = e >> 24 & 255,
                  s[a++] = 0,
                  s[a++] = 0,
                  s[a++] = 0,
                  s[a++] = 23,
                  s[a++] = 0,
                  s[a++] = 0,
                  s[a++] = 0,
                  s[a++] = 0,
                  s.set(t, a),
                  a += t.length;
                  var n = 11 + i;
                  return s[a++] = n >> 24 & 255,
                  s[a++] = n >> 16 & 255,
                  s[a++] = n >> 8 & 255,
                  s[a++] = 255 & n,
                  s
              }
          }, {
              key: "adtsToConfig",
              value: function(e) {
                  var t = new Uint8Array(2)
                    , i = 1 + ((192 & e[2]) >> 6)
                    , s = (60 & e[2]) >> 2
                    , a = (1 & e[2]) << 2 | (192 & e[3]) >> 6;
                  return t[0] = i << 3 | (14 & s) >> 1,
                  t[1] = (1 & s) << 7 | a << 3,
                  t
              }
          }, {
              key: "creatAdtsConfig",
              value: function() {
                  var e = new Uint8Array(2);
                  return e[0] = 18,
                  e[1] = 16,
                  e
              }
          }, {
              key: "setFrameTimestamp",
              value: function(e, t) {
                  t[4] = e >> 16 & 255,
                  t[5] = e >> 8 & 255,
                  t[6] = 255 & e,
                  t[7] = e >> 24 & 255
              }
          }, {
              key: "getAvc",
              value: function(e) {
                  var t = e.streamData[0];
                  return t += e.streamData[1] << 8,
                  t += e.streamData[2] << 16,
                  t += e.streamData[3] << 24 >>> 0,
                  e.streamData.subarray(4, 4 + t)
              }
          }, {
              key: "trimIFrame",
              value: function(e, t) {
                  e.streamData = e.streamData.subarray(4 + t)
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(16))
        , n = s(i(212))
        , r = s(i(7))
        , o = s(i(0))
        , u = s(i(1))
        , l = s(i(17))
        , d = s(i(8))
        , h = s(i(4))
        , f = s(i(6))
        , c = s(i(330))
        , p = (s(i(44)),
      s(i(331)))
        , v = s(i(332))
        , y = s(i(102))
        , m = function() {
          function e(t) {
              (0,
              o.default)(this, e),
              this.player = t,
              this.videoPlayStat = t.videoPlayStat,
              this.CheckResendInterval = 20,
              this.KeepLateSeqGap = 500,
              this.MaxTolerateDelayDelta = 15e3,
              this.FailedAckWaitTime = 500,
              this.MaxQueueLen = 1e4,
              this.MaxResendSeqCnt = 50,
              this.resendAgainWhileFailedAck = !0,
              this.lastResendStamp = 0,
              this.seqStatus = new c.default,
              this.firstRtoCalc = new v.default(200),
              this.waitResendMap = new r.default,
              this.alreadyResendMap = new r.default,
              this.start = !0,
              this.minDelayDelta = 0
          }
          return (0,
          u.default)(e, [{
              key: "reset",
              value: function() {
                  h.default.log("VideoResender.reset()"),
                  this.firstRtoCalc.reset(),
                  this.seqStatus.reset(),
                  this.lastResendStamp = 0,
                  this.minDelayDelta = 0,
                  this.cleanAllMaps()
              }
          }, {
              key: "onCheckFastTimer",
              value: function(e, t) {
                  if (this.start && !(0 !== this.lastResendStamp && e < this.lastResendStamp + this.CheckResendInterval)) {
                      this.lastResendStamp = e;
                      var i = []
                        , s = []
                        , r = this.player.lastPlayVideoSeq
                        , o = 0
                        , u = !0
                        , l = !1
                        , f = void 0;
                      try {
                          for (var c, p = (0,
                          a.default)(this.waitResendMap); !(u = (c = p.next()).done); u = !0) {
                              var v = c.value
                                , y = (0,
                              n.default)(v, 2)
                                , m = y[0]
                                , _ = y[1];
                              if (o++ > this.MaxQueueLen)
                                  return h.default.warn("VideoResender.onCheckFastTimer notResendCnt exceed MaxQueueLen"),
                                  void this.reset();
                              this.seqStatus.IsServerHave(m) && d.default.isBiggerUint(e, _.createStampc + _.delta) ? (_.sendStampc = e,
                              _.resendTimes++,
                              s.push(m),
                              i.push(_.seq),
                              this.alreadyResendMap.set(m, _)) : _.resendTimes >= 3 ? (this.videoPlayStat.videoResendNotRecvCnt++,
                              s.push(m)) : 0 !== r && d.default.isBiggerUint(r - this.KeepLateSeqGap, m) ? (this.seqStatus.IsServerLost(m) && this.videoPlayStat.videoResendServerLostCnt++,
                              this.videoPlayStat.videoResendNotSendCnt++,
                              s.push(m)) : e - _.createStampc > 1e4 && s.push(m)
                          }
                      } catch (e) {
                          l = !0,
                          f = e
                      } finally {
                          try {
                              !u && p.return && p.return()
                          } finally {
                              if (l)
                                  throw f
                          }
                      }
                      this.cleanSeqsFromMap(s, this.waitResendMap),
                      this.doResend(i, e),
                      s = [];
                      var P = 0
                        , T = !0
                        , S = !1
                        , g = void 0;
                      try {
                          for (var I, E = (0,
                          a.default)(this.alreadyResendMap); !(T = (I = E.next()).done); T = !0) {
                              var k = I.value
                                , C = (0,
                              n.default)(k, 2)
                                , R = C[0]
                                , A = C[1];
                              if (P++ > this.MaxQueueLen)
                                  return h.default.warn("VideoResender.onCheckFastTimer alreadyResendCnt exceed MaxQueueLen"),
                                  void this.cleanAllMaps();
                              0 !== r && d.default.isBiggerUint(r - this.KeepLateSeqGap, R) && (!1 === A.received && this.videoPlayStat.videoResendNotRecvCnt++,
                              s.push(R))
                          }
                      } catch (e) {
                          S = !0,
                          g = e
                      } finally {
                          try {
                              !T && E.return && E.return()
                          } finally {
                              if (S)
                                  throw g
                          }
                      }
                      this.cleanSeqsFromMap(s, this.alreadyResendMap)
                  }
              }
          }, {
              key: "OnRecvPacket",
              value: function(t, i) {
                  if (!this.start)
                      return e.RESENDRET_NOTSTART;
                  var s = e.RESENDRET_SUCCESS
                    , a = t.seqNum;
                  if (this.videoPlayStat.videoResendPacketsInAll++,
                  a <= this.player.lastPlayVideoSeq - this.KeepLateSeqGap)
                      return this.videoPlayStat.videoResendTooOldCnt++,
                      e.RESENDRET_TOOLATE;
                  if (a > this.player.lastPlayVideoSeq && this.seqStatus.OnRecvPacket(t, i),
                  this.alreadyResendMap.has(a)) {
                      var n = this.alreadyResendMap.get(a);
                      if (n.received = !0,
                      n.sendStampc === t.stampc) {
                          t.isDownlinkResend = !0,
                          this.videoPlayStat.videoResendRecvCnt++;
                          var r = i - t.stampc;
                          l.default.downlinkRTOCalculator.CheckInvalidDownlinkRtt(r, i),
                          s = e.RESENDRET_DOWNLINK_RESEND
                      } else
                          a > this.player.lastPlayVideoSeq - 200 && this.videoPlayStat.videoResendRepeatCnt++,
                          s = e.RESENDRET_SUCCESS
                  } else if (this.waitResendMap.has(a)) {
                      var o = this.waitResendMap.get(a);
                      if (o.seq !== a)
                          return h.default.error("VideoResender.OnRecvPacket error, info.seq:" + o.seq + " packet.seqNum" + a),
                          e.RESENDRET_ERROR;
                      this.waitResendMap.delete(a),
                      s = e.RESENDRET_SUCCESS
                  }
                  if (!t.isDownlinkResend && !t.isUplinkResend && !t.isFastAccessPacket) {
                      var u = Number(i) - Number(t.stampc);
                      (u < this.minDelayDelta || 0 === this.minDelayDelta) && (this.minDelayDelta = u),
                      u - this.minDelayDelta > this.MaxTolerateDelayDelta && this.videoPlayStat.videoResendLargeDelay++
                  }
                  return t.isFastAccessPacket ? e.RESENDRET_PULL : (this.checkUnResendPackets(t, i),
                  s)
              }
          }, {
              key: "onResenderFailedAck",
              value: function(e) {
                  if (this.seqStatus.OnRejecteResend(e.seqNums),
                  this.resendAgainWhileFailedAck) {
                      for (var t = f.default.now(), i = [], s = 0; s < e.seqNums.length; s++) {
                          var a = e.seqNums[s];
                          if (this.alreadyResendMap.has(a)) {
                              i.push(a);
                              var n = this.alreadyResendMap.get(a);
                              n.createStampc = t,
                              n.delta = this.FailedAckWaitTime,
                              this.waitResendMap.set(a, n)
                          }
                      }
                      this.cleanSeqsFromMap(i, this.alreadyResendMap)
                  }
              }
          }, {
              key: "setMaxPullSeq",
              value: function(e) {
                  if (0 == this.seqStatus.minRecvSeq)
                      this.seqStatus.minRecvSeq = e,
                      this.seqStatus.maxRecvSeq = e,
                      h.default.log("VideoResender.setMaxPullSeq AAA", e);
                  else {
                      var t = f.default.now()
                        , i = this.seqStatus.minRecvSeq
                        , s = this.player.lastPlayVideoSeq;
                      h.default.log("VideoResender.setMaxPullSeq BBB", e, "minRecvSeq=" + i),
                      this.produceResendInfo(i, e, s, 30, t)
                  }
              }
          }, {
              key: "checkUnResendPackets",
              value: function(e, t) {
                  var i = e.seqNum
                    , s = 30;
                  e.isDownlinkResend || e.isUplinkResend || (s = this.firstRtoCalc.calculateFirstRto(e, t));
                  var a = this.player.lastPlayVideoSeq
                    , n = this.seqStatus.maxRecvSeq;
                  if (this.seqStatus.checkCurrentSeq(i, a, t)) {
                      if (0 === n)
                          return;
                      this.produceResendInfo(i, n, a, s, t)
                  }
              }
          }, {
              key: "produceResendInfo",
              value: function(e, t, i, s, a) {
                  if (!d.default.isEqualOrBiggerUint(t, e))
                      for (var n = t + 2; n < e; n += 2)
                          if (!d.default.isEqualOrBiggerUint(i, n) && !this.seqStatus.IsCheckedResend(n)) {
                              var r = this.firstRtoCalc.limitFirstDownlinkRto(s, n, e)
                                , o = new p.default;
                              o.createStampc = a,
                              o.delta = r,
                              o.resendTimes = 0,
                              o.seq = n,
                              this.waitResendMap.set(n, o),
                              this.seqStatus.CheckedResend(n),
                              this.seqStatus.SetResendSended(n)
                          }
              }
          }, {
              key: "doResend",
              value: function(e, t) {
                  for (e.length > 0 && h.default.log("VideoResender.doResend seqCnt=" + e.length); e.length > 0; ) {
                      var i = e.length > this.MaxResendSeqCnt ? this.MaxResendSeqCnt : e.length;
                      this.videoPlayStat.videoResendSendCnt += i,
                      this.pkg || (this.pkg = new y.default);
                      var s = this.pkg;
                      if (l.default.videoStreamId && (s.streamGroupId = l.default.videoStreamId),
                      s.sender = this.player.uid,
                      s.receiver = l.default.getUid(),
                      s.stampc = t,
                      s.seqNums = e.slice(0, i),
                      !l.default.send(s))
                          return h.default.log("VideoResender.doResend sendVideo failed"),
                          void this.reset();
                      h.default.debug("Resend: " + s.seqNums.toString()),
                      e.splice(0, i)
                  }
              }
          }, {
              key: "cleanSeqsFromMap",
              value: function(e, t) {
                  for (var i = 0; i < e.length; i++) {
                      var s = e[i];
                      t.delete(s)
                  }
              }
          }, {
              key: "cleanAllMaps",
              value: function() {
                  h.default.info("VideoResender.cleanAllMaps"),
                  this.waitResendMap.clear(),
                  this.alreadyResendMap.clear()
              }
          }]),
          e
      }();
      m.RESENDRET_SUCCESS = 0,
      m.RESENDRET_DOWNLINK_RESEND = 1,
      m.RESENDRET_NOTSTART = 2,
      m.RESENDRET_TOOLATE = 3,
      m.RESENDRET_ERROR = 4,
      m.RESENDRET_PULL = 5,
      t.default = m
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(8))
        , o = s(i(4))
        , u = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.MaxByteIndex = 4095,
              this.MaxSeqGap = this.MaxByteIndex << 1,
              this.RECVED_VIDEO = 1,
              this.UPLINK_RESEND = 2,
              this.DOWNLINK_RESEND = 4,
              this.SERVER_RESEND = 8,
              this.RECVED_LATE = 16,
              this.SERVER_RECVED = 32,
              this.SERVER_CONFORMED = 64,
              this.SERVER_REJECTED = 128,
              this.CHECKED_RESEND = 256,
              this.DUPLICATED_VIDEO = 512,
              this.SENT_TO_PEER = 1024,
              this.RESEND_SENDED = 2048,
              this.statusVec = [],
              this.maxSeq = 0,
              this.minSeq = 0,
              this.playedSeq = 0,
              this.lastRecvStamp = 0,
              this.seqBytes = new Uint8Array(4),
              this.maxRecvSeq = 0,
              this.minRecvSeq = 0,
              this.minRecvSeqLimit = 0,
              this.seqInvalidStamp = 0,
              this.packetSeqGap = 400,
              this.reset()
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.setToZero(this.statusVec, 0, this.MaxByteIndex + 1),
                  this.maxSeq = 0,
                  this.minSeq = 0,
                  this.playedSeq = 0,
                  this.lastRecvStamp = 0,
                  this.maxRecvSeq = 0,
                  this.minRecvSeq = 0,
                  this.minRecvSeqLimit = 0,
                  this.seqInvalidStamp = 0
              }
          }, {
              key: "OnRecvPacket",
              value: function(e, t) {
                  var i = e.seqNum
                    , s = this.SERVER_RECVED | this.SERVER_CONFORMED | this.CHECKED_RESEND;
                  0 !== this.playedSeq && i <= this.playedSeq ? s |= this.RECVED_LATE : s |= this.RECVED_VIDEO,
                  e.isUplinkResend && (s |= this.UPLINK_RESEND),
                  e.isDownlinkResend && (s |= this.DOWNLINK_RESEND),
                  e.isServerResend && (s |= this.SERVER_RESEND),
                  this.lastRecvStamp = t,
                  this.addStatus(i, s),
                  this.checkServerRecved(e)
              }
          }, {
              key: "checkServerRecved",
              value: function(e) {
                  this.seqBytes[0] = e.ext >> 24 & 255,
                  this.seqBytes[1] = e.ext >> 16 & 255,
                  this.seqBytes[2] = e.ext >> 8 & 255,
                  this.seqBytes[3] = 255 & e.ext;
                  for (var t = 2 * (255 & e.playTime), i = e.seqNum, s = 0; s < 32; s++)
                      i -= t,
                      0 == (this.seqBytes[s >> 3] & 1 << (7 & s)) ? this.AddProperty(i, this.SERVER_CONFORMED) : this.AddProperty(i, this.SERVER_CONFORMED | this.SERVER_RECVED)
              }
          }, {
              key: "OnRejecteResend",
              value: function(e) {
                  for (var t = 0; t < e.length; t++)
                      this.addStatus(e[t], this.SERVER_REJECTED)
              }
          }, {
              key: "CheckedResend",
              value: function(e) {
                  this.AddProperty(e, this.CHECKED_RESEND)
              }
          }, {
              key: "SetResendSended",
              value: function(e) {
                  this.AddProperty(e, this.RESEND_SENDED)
              }
          }, {
              key: "SetServerRejected",
              value: function(e) {
                  this.AddProperty(e, this.SERVER_REJECTED)
              }
          }, {
              key: "IsSeqValid",
              value: function(e, t) {
                  return 0 === this.maxSeq || 0 === this.lastRecvStamp || t - this.lastRecvStamp > 1e4 || (r.default.isEqualOrBiggerUint(this.maxSeq, e) ? this.maxSeq - e <= this.MaxSeqGap : e - this.maxSeq <= this.MaxSeqGap)
              }
          }, {
              key: "IsServerHave",
              value: function(e) {
                  return !!this.HasProperty(e, this.SERVER_RECVED)
              }
          }, {
              key: "IsServerLost",
              value: function(e) {
                  return !1 !== this.IsServerConfirmed(e) && !this.HasProperty(e, this.SERVER_RECVED)
              }
          }, {
              key: "IsServerConfirmed",
              value: function(e) {
                  return !!this.HasProperty(e, this.SERVER_CONFORMED)
              }
          }, {
              key: "IsCheckedResend",
              value: function(e) {
                  return !!this.HasProperty(e, this.CHECKED_RESEND)
              }
          }, {
              key: "IsResendSended",
              value: function(e) {
                  return !!this.HasProperty(e, this.RESEND_SENDED)
              }
          }, {
              key: "IsServerRejected",
              value: function(e) {
                  return !!this.HasProperty(e, this.SERVER_REJECTED)
              }
          }, {
              key: "AddProperty",
              value: function(e, t) {
                  r.default.isBiggerUint(this.maxSeq - this.MaxSeqGap, e) || this.update(e, t)
              }
          }, {
              key: "RemoveProperty",
              value: function(e, t) {
                  r.default.isBiggerUint(this.maxSeq - this.MaxSeqGap, e) || (this.statusVec[this.getPos(e)] = this.statusVec[this.getPos(e)] & (r.default.UintMax ^ t),
                  (0 === this.minSeq || r.default.isBiggerUint(this.minSeq, e)) && (this.minSeq = e))
              }
          }, {
              key: "HasProperty",
              value: function(e, t) {
                  return (this.getStatus(e) & t) === t
              }
          }, {
              key: "getPos",
              value: function(e) {
                  return e >> 1 & this.MaxByteIndex
              }
          }, {
              key: "update",
              value: function(e, t) {
                  this.statusVec[this.getPos(e)] |= t,
                  (0 === this.minSeq || r.default.isBiggerUint(this.minSeq, e)) && (this.minSeq = e)
              }
          }, {
              key: "addStatus",
              value: function(e, t) {
                  if (0 === this.maxSeq)
                      return this.maxSeq = e,
                      void this.update(e, t);
                  if (r.default.isBiggerUint(e, this.maxSeq))
                      r.default.isBiggerUint(e, this.maxSeq + this.MaxSeqGap) ? (this.reset(),
                      this.maxSeq = e,
                      this.update(e, t)) : this.onBiggerSeq(e, t);
                  else {
                      if (r.default.isBiggerUint(this.maxSeq - this.MaxSeqGap, e))
                          return;
                      this.update(e, t)
                  }
              }
          }, {
              key: "onBiggerSeq",
              value: function(e, t) {
                  var i = e - this.MaxSeqGap;
                  r.default.isBiggerUint(i, this.minSeq) && this.resetMinPos(i),
                  this.maxSeq = e,
                  this.update(e, t)
              }
          }, {
              key: "resetMinPos",
              value: function(e) {
                  var t = this.getPos(this.minSeq)
                    , i = this.getPos(e - 2);
                  this.minSeq = e,
                  t > i ? (this.setToZero(this.statusVec, t, this.MaxByteIndex - t + 1),
                  this.setToZero(this.statusVec, 0, i + 1)) : this.setToZero(this.statusVec, t, i - t + 1)
              }
          }, {
              key: "setToZero",
              value: function(e, t, i) {
                  for (var s = 0; s < i; s++)
                      e[t + s] = 0
              }
          }, {
              key: "getStatus",
              value: function(e) {
                  var t = 0;
                  return 0 !== this.maxSeq && r.default.isEqualOrBiggerUint(e, this.minSeq) && r.default.isEqualOrBiggerUint(this.maxSeq, e) && (t = this.statusVec[this.getPos(e)]),
                  t
              }
          }, {
              key: "checkCurrentSeq",
              value: function(e, t, i) {
                  if (0 === this.maxRecvSeq)
                      return this.maxRecvSeq = e,
                      this.minRecvSeq = e,
                      !1;
                  if (0 !== this.minRecvSeqLimit && r.default.isBiggerUint(this.minRecvSeqLimit, e))
                      return o.default.debug("PacketSeqChecker.checkCurrentSeq cur video seq=" + e + " smaller than minRecvLimit=" + this.minRecvSeqLimit),
                      this.seqInvalidStamp = i,
                      !1;
                  if (r.default.isEqualOrBiggerUint(this.minRecvSeq, e))
                      return this.minRecvSeq - e > this.packetSeqGap ? (o.default.debug("PacketSeqChecker.checkCurrentSeq cur video seq=" + e + " too smaller than minRecvSeq=" + this.minRecvSeq),
                      this.minRecvSeqLimit = e,
                      this.seqInvalidStamp = i,
                      !1) : (this.minRecvSeq = e,
                      !0);
                  if (0 !== t && r.default.isEqualOrBiggerUint(t, e))
                      return !1;
                  if (r.default.isEqualOrBiggerUint(this.maxRecvSeq, e))
                      return !0;
                  var s = this.maxRecvSeq;
                  return this.maxRecvSeq = e,
                  !(e - s > this.packetSeqGap && (o.default.log("PacketSeqChecker.checkCurrentSeq cur video seq=" + e + " too larger than maxRecvSeq=" + s),
                  this.minRecvSeqLimit = e,
                  this.minRecvSeq = e,
                  this.seqInvalidStamp = i,
                  1))
              }
          }]),
          e
      }();
      t.default = u
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.seq = 0,
              this.createStampc = 0,
              this.sendStampc = 0,
              this.delta = 0,
              this.resendTimes = 0,
              this.received = !1,
              this.parentDelay = 0,
              this.parentSeqDiff = 0
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.seq = 0,
                  this.createStampc = 0,
                  this.sendStampc = 0,
                  this.delta = 0,
                  this.resendTimes = 0,
                  this.received = !1,
                  this.parentDelay = 0,
                  this.perantSeqDiff = 0
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1));
      s(i(4));
      var r = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.cap = t > 20 ? t : 200,
              this.jittersVec = [],
              this.jitterIdx = 0,
              this.maxJitter = Number.NEGATIVE_INFINITY,
              this.minJitter = Number.POSITIVE_INFINITY
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.jittersVec = [],
                  this.jitterIdx = 0,
                  this.maxJitter = Number.NEGATIVE_INFINITY
              }
          }, {
              key: "calculateFirstRto",
              value: function(e, t) {
                  var i = Number(t) - Number(e.stampc);
                  this.addJitter(i);
                  var s = this.max()
                    , a = 0;
                  return null === s ? a = 150 : (a = s - i,
                  a += 200,
                  a = this.limit(30, a, 1500)),
                  a
              }
          }, {
              key: "addJitter",
              value: function(e) {
                  var t = !1;
                  this.jittersVec.length === this.cap ? (e > this.maxJitter ? this.maxJitter = e : this.jittersVec[this.jitterIdx] === this.maxJitter && (t = !0),
                  this.jittersVec[this.jitterIdx++] = e,
                  this.jitterIdx >= this.cap && (this.jitterIdx = this.jitterIdx % this.cap),
                  t && this.reCalcMax()) : (this.jittersVec.push(e),
                  e > this.maxJitter && (this.maxJitter = e))
              }
          }, {
              key: "reCalcMax",
              value: function() {
                  this.maxJitter = Number.NEGATIVE_INFINITY;
                  for (var e = 0; e < this.jittersVec.length; e++)
                      this.jittersVec[e] > this.maxJitter && (this.maxJitter = this.jittersVec[e])
              }
          }, {
              key: "max",
              value: function() {
                  return this.jittersVec.length >= 20 ? this.maxJitter : null
              }
          }, {
              key: "limit",
              value: function(e, t, i) {
                  return t < e ? e : t > i ? i : t
              }
          }, {
              key: "limitFirstDownlinkRto",
              value: function(e, t, i) {
                  var s = 6 * (i - t) / 2;
                  return e = e > s ? e - s : 0
              }
          }]),
          e
      }();
      t.default = r
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(8))
        , o = function() {
          function e() {
              (0,
              a.default)(this, e),
              this.uid = 0,
              this.key = 0,
              this.seqNum = 0,
              this.isEmpty = !1,
              this.isFastAccess = !1,
              this.isKeyFrame = !1,
              this.dts = 0,
              this.streamData = null,
              this.aacConfig = null,
              this.ssrc = r.default.UintMax,
              this.codec = 0,
              this.recvTs = 0
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.uid = 0,
                  this.key = 0,
                  this.seqNum = 0,
                  this.isEmpty = !1,
                  this.isFastAccess = !1,
                  this.isKeyFrame = !1,
                  this.dts = 0,
                  this.streamData = null,
                  this.aacConfig = null,
                  this.ssrc = r.default.UintMax,
                  this.codec = 0,
                  this.recvTs = 0
              }
          }]),
          e
      }();
      t.default = o
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(16))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(4))
        , u = s(i(213))
        , l = s(i(6))
        , d = s(i(8));
      s(i(64));
      var h = function() {
          function e() {
              (0,
              n.default)(this, e),
              this.uid = 0,
              this.key = null,
              this.isFastAccess = !1,
              this.hasFirst = !1,
              this.pktNum = null,
              this.firstPktSeq = null,
              this.lastPktSeq = null,
              this.dts = null,
              this.recvTs = null,
              this.size = 0,
              this.streamData = null,
              this.packets = [],
              this.frameType = -1,
              this.allframeType = null,
              this.isPlayed = !1
          }
          return (0,
          r.default)(e, [{
              key: "append",
              value: function(e) {
                  if (e.isFastAccessPacket && (this.isFastAccess = !0),
                  0 === this.packets.length)
                      this.uid = e.uid,
                      this.key = e.lastKeyFrame,
                      this.frameType = e.frameType,
                      this.allframeType = e.priority,
                      this.pktNum = e.frameNum,
                      this.packets.push(e),
                      this.size += e.streamData.length;
                  else {
                      if (this.isFull)
                          return !0;
                      for (var t = !0, i = this.packets.length - 1; i >= 0; i--) {
                          if (this.packets[i].seqNum === e.seqNum)
                              return !0;
                          if (this.packets[i].seqNum < e.seqNum) {
                              this.packets.splice(i + 1, 0, e),
                              this.size += e.streamData.length,
                              t = !1;
                              break
                          }
                      }
                      t && (this.packets.splice(0, 0, e),
                      this.size += e.streamData.length)
                  }
                  if (e.isFirstSeq && (this.firstPktSeq = e.seqNum,
                  this.lastPktSeq = e.seqNum + 2 * (this.pktNum - 1),
                  this.dts = e.getFrameTime(),
                  this.hasFirst = !0),
                  this.isFull) {
                      this.recvTs = l.default.now(),
                      this.streamData = new Uint8Array(this.size);
                      for (var s = 0, a = 0; a < this.packets.length; a++)
                          try {
                              this.streamData.set(this.packets[a].streamData, s),
                              s += this.packets[a].streamData.length
                          } catch (e) {
                              return o.default.error("VideoFrame.append error, name:" + e.name + " msg:" + e.message),
                              !1
                          }
                      if (s !== this.size)
                          return o.default.error("VideoFrame.Append size error, infact:" + s + " expected:" + this.size + " key:" + this.key + " firstSeq:" + this.firstPktSeq + " lastSeq:" + (this.firstPktSeq + 2 * this.pktNum) + " num:" + this.pktNum + " len:" + this.packets.length),
                          this.reset(),
                          !1
                  }
                  return !0
              }
          }, {
              key: "getLastFrameType",
              value: function(e) {
                  return this.allframeType >> 2 * e & 3
              }
          }, {
              key: "getOldestPacket",
              value: function() {
                  return this.packets[0]
              }
          }, {
              key: "getLatestPacket",
              value: function() {
                  var e = null
                    , t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var n, r = (0,
                      a.default)(this.packets); !(t = (n = r.next()).done); t = !0) {
                          var o = n.value;
                          (null === e || o.recvOsTime > e.recvOsTime) && (e = o)
                      }
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
                  return e
              }
          }, {
              key: "getFirstNotRecvSeq",
              value: function() {
                  if (!this.hasFirst)
                      return o.default.log("VideoFrame.getFirstNotRecvSeq error, firstPktSeq not recv"),
                      d.default.UintMax;
                  if (this.isFull)
                      return o.default.log("VideoFrame.getFirstNotRecvSeq error, no packet lost"),
                      d.default.UintMax;
                  if (1 === this.packets.length)
                      return this.firstPktSeq + 2;
                  for (var e = 1; e < this.packets.length; e++) {
                      if (this.packets[e].seqNum - this.packets[e - 1].seqNum > 2)
                          return this.packets[e - 1].seqNum + 2;
                      if (e === this.packets.length - 1)
                          return this.packets[e].seqNum + 2
                  }
                  return o.default.log("VideoFrame.getFirstNotRecvSeq error, code error"),
                  d.default.UintMax
              }
          }, {
              key: "reset",
              value: function() {
                  this.uid = 0,
                  this.key = null,
                  this.isFastAccess = !1,
                  this.hasFirst = null,
                  this.pktNum = null,
                  this.firstPktSeq = null,
                  this.lastPktSeq = null,
                  this.dts = null,
                  this.recvTs = null,
                  this.size = 0,
                  this.packets = [],
                  this.frameType = -1,
                  this.allframeType = null,
                  this.isPlayed = !1
              }
          }, {
              key: "isFull",
              get: function() {
                  return this.packets.length === this.pktNum
              }
          }, {
              key: "isKeyFrame",
              get: function() {
                  return this.frameType === u.default.FRAMETYPE_VIDEO_I
              }
          }, {
              key: "isPFrame",
              get: function() {
                  return this.frameType === u.default.FRAMETYPE_VIDEO_P
              }
          }, {
              key: "isBFrame",
              get: function() {
                  return this.frameType === u.default.FRAMETYPE_VIDEO_B
              }
          }]),
          e
      }();
      t.default = h
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = (s(i(17)),
      s(i(8)))
        , o = s(i(4))
        , u = s(i(6))
        , l = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.player = t,
              this.lateDiscardAudioPktCnt = 0,
              this.recvAudioPktCnt = 0,
              this.playAudioFrameCnt = 0,
              this.emptyAudioFrameCnt = 0,
              this.audioRecvDelaySum = 0,
              this.audioRecvDelayCnt = 0,
              this.audioCapDelaySum = 0,
              this.audioCapDelayCnt = 0,
              this.lateFrames = 0,
              this.lossFrames = 0,
              this.ambiguousEmptyFrames = 0,
              this.normalPlayFrames = 0,
              this.emptyFrames = 0,
              this.ssrc = r.default.UintMax,
              this.audioSsrc = r.default.UintMax,
              this.lastSsrcStartTime = 0,
              this.latestNormalSsrc = -1
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function() {
                  this.lateDiscardAudioPktCnt = 0,
                  this.recvAudioPktCnt = 0,
                  this.playAudioFrameCnt = 0,
                  this.emptyAudioFrameCnt = 0,
                  this.audioRecvDelaySum = 0,
                  this.audioRecvDelayCnt = 0,
                  this.audioCapDelaySum = 0,
                  this.audioCapDelayCnt = 0,
                  this.lateFrames = 0,
                  this.lossFrames = 0,
                  this.normalPlayFrames = 0,
                  this.emptyFrames = 0
              }
          }, {
              key: "resetSsrc",
              value: function() {
                  o.default.log("AudioPlayStat.resetSsrc"),
                  this.audioSsrc = r.default.UintMax,
                  this.lastSsrcStartTime = 0,
                  this.latestNormalSsrc = -1
              }
          }, {
              key: "onPlayStat",
              value: function(e) {
                  var t = u.default.now();
                  if (this.playAudioFrameCnt++,
                  !e.isEmpty && !e.isFastAccess) {
                      var i = this.player.calcRecvToPlayDelay(t, e.recvTs);
                      i > 0 && i < 25e3 && (this.audioCapDelaySum += i,
                      this.audioCapDelayCnt++,
                      this.audioRecvDelaySum += i,
                      this.audioRecvDelayCnt++)
                  }
                  e.isEmpty ? this.ambiguousEmptyFrames++ : (this.switchSsrc(e.ssrc, t),
                  this.normalPlayFrames++,
                  this.ssrc === e.ssrc ? this.lateFrames += this.ambiguousEmptyFrames : (this.emptyFrames += this.ambiguousEmptyFrames,
                  this.ssrc = e.ssrc),
                  this.ambiguousEmptyFrames = 0)
              }
          }, {
              key: "onAudioStat",
              value: function() {
                  var e = ""
                    , t = this.audioRecvDelayCnt ? this.audioRecvDelaySum / this.audioRecvDelayCnt : 0
                    , i = this.audioCapDelayCnt ? this.audioCapDelaySum / this.audioCapDelayCnt : 0;
                  e += " jitter=" + (t = Math.round(t)) + "-" + (i = Math.round(i)) + " recv=" + this.recvAudioPktCnt + " play=" + this.playAudioFrameCnt + " discard=" + this.lateDiscardAudioPktCnt + (this.emptyAudioFrameCnt ? " empty=" + this.emptyAudioFrameCnt : "") + (this.normalPlayFrames ? " normalPlay=" + this.normalPlayFrames : "") + (this.emptyFrames ? " normalEmpty=" + this.emptyFrames : "") + (this.lateFrames ? " late=" + this.lateFrames : "") + (this.ambiguousEmptyFrames ? " ambiguous=" + this.ambiguousEmptyFrames : "") + (this.lossFrames ? " lossFrames=" + this.lossFrames : "");
                  var s = this.player.msePlayer
                    , a = this.player.audioChain.size;
                  o.default.log("AUDIO_PLAY playTime=" + s.getCurrentTime() + " bufLen=" + s.getBufferLen() + "-" + s.getParserBufLen() + " qsz=" + a + e),
                  this.reset()
              }
          }, {
              key: "switchSsrc",
              value: function(e, t) {
                  this.audioSsrc !== e && (o.default.log("AudioPlayStat.switchSsrc: " + this.latestNormalSsrc + " -> " + this.audioSsrc + " -> " + e),
                  e !== r.default.UintMax && (-1 !== this.latestNormalSsrc && this.latestNormalSsrc === e && (this.audioSsrc,
                  r.default.UintMax),
                  this.latestNormalSsrc = e),
                  this.lastSsrcStartTime = t,
                  this.audioSsrc = e)
              }
          }]),
          e
      }();
      t.default = l
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(0))
        , n = s(i(1))
        , r = s(i(17))
        , o = s(i(8))
        , u = s(i(4))
        , l = s(i(6))
        , d = s(i(337))
        , h = function() {
          function e(t) {
              (0,
              a.default)(this, e),
              this.player = t,
              this.recvVideoFrameCnt = 0,
              this.recvVideoPktCnt = 0,
              this.recvVideoByteCnt = 0,
              this.playVideoFrameCnt = 0,
              this.skipVideoFrameCnt = 0,
              this.skipVideoPauseTime = 0,
              this.skipVideoPauseCnt = 0,
              this.videoRecvDelaySum = 0,
              this.videoRecvDelayCnt = 0,
              this.videoCapDelaySum = 0,
              this.videoCapDelayCnt = 0,
              this.pauseVideoTime = 0,
              this.pauseVideoCnt = 0,
              this.sensePauseCnt = 0,
              this.sensePauseTime = 0,
              this.pauseReason = 0,
              this.videoResendSendCnt = 0,
              this.videoResendRecvCnt = 0,
              this.videoResendRepeatCnt = 0,
              this.videoResendServerLostCnt = 0,
              this.videoResendNotRecvCnt = 0,
              this.videoResendNotSendCnt = 0,
              this.videoResendTooOldCnt = 0,
              this.videoResendUrgentSend = 0,
              this.videoResendLargeDelay = 0,
              this.videoResendFailedAck = 0,
              this.videoResendPacketsInAll = 0,
              this.skipVideoPauseTime5 = 0,
              this.skipVideoPauseCnt5 = 0,
              this.pauseVideoTime5 = 0,
              this.pauseVideoCnt5 = 0,
              this.sensePauseCnt5 = 0,
              this.sensePauseTime5 = 0,
              this.playVideoFrameCnt5 = 0,
              this.lastPlayVideoTs = 0,
              this.lastPlayVideoOsTs = 0
          }
          return (0,
          n.default)(e, [{
              key: "reset",
              value: function(e) {
                  this.recvVideoFrameCnt = 0,
                  this.recvVideoPktCnt = 0,
                  this.recvVideoByteCnt = 0,
                  this.playVideoFrameCnt = 0,
                  this.skipVideoFrameCnt = 0,
                  this.skipVideoPauseTime = 0,
                  this.skipVideoPauseCnt = 0,
                  this.videoRecvDelaySum = 0,
                  this.videoRecvDelayCnt = 0,
                  this.videoCapDelaySum = 0,
                  this.videoCapDelayCnt = 0,
                  this.pauseVideoTime = 0,
                  this.pauseVideoCnt = 0,
                  this.sensePauseCnt = 0,
                  this.sensePauseTime = 0,
                  this.pauseReason = 0,
                  this.videoResendSendCnt = 0,
                  this.videoResendRecvCnt = 0,
                  this.videoResendRepeatCnt = 0,
                  this.videoResendServerLostCnt = 0,
                  this.videoResendNotRecvCnt = 0,
                  this.videoResendNotSendCnt = 0,
                  this.videoResendTooOldCnt = 0,
                  this.videoResendUrgentSend = 0,
                  this.videoResendLargeDelay = 0,
                  this.videoResendFailedAck = 0,
                  this.videoResendPacketsInAll = 0,
                  e && (this.skipVideoPauseTime5 = 0,
                  this.skipVideoPauseCnt5 = 0,
                  this.pauseVideoTime5 = 0,
                  this.pauseVideoCnt5 = 0,
                  this.sensePauseCnt5 = 0,
                  this.sensePauseTime5 = 0,
                  this.playVideoFrameCnt5 = 0),
                  this.lastPlayVideoTs = 0,
                  this.lastPlayVideoOsTs = 0
              }
          }, {
              key: "onVideoStat",
              value: function(e, t) {
                  var i = this.player.pauseStartTs;
                  if (i) {
                      var s = l.default.now()
                        , a = s - i;
                      a > 200 && (u.default.warn("VideoPlayStat.onVideoStat pauseTime=" + a + " start=" + i + " now=" + s),
                      this.sensePauseTime += a,
                      this.sensePauseCnt++,
                      this.sensePauseTime5 += a,
                      this.sensePauseCnt5++,
                      this.player.pauseStartTs = s)
                  }
                  var n = this.player.uid
                    , r = this.onResendStat();
                  u.default.log("VIDEO_RESEND uid=" + n + " " + r);
                  var o = this.player.msePlayer
                    , d = this.player.videoChain.size
                    , h = this.onStat(e, t);
                  u.default.log("VIDEO_PLAY uid=" + n + " playTime=" + o.getCurrentTime() + " bufLen=" + o.getBufferLen() + "-" + o.getParserBufLen() + " qsz=" + d + h)
              }
          }, {
              key: "onResendStat",
              value: function() {
                  var e = "";
                  return e += "inAll=" + this.videoResendPacketsInAll + " send=" + this.videoResendSendCnt + " recv=" + this.videoResendRecvCnt + " repeat=" + this.videoResendRepeatCnt + (this.videoResendServerLostCnt ? " serverLost=" + this.videoResendServerLostCnt : "") + (this.videoResendNotRecvCnt ? " notRecv=" + this.videoResendNotRecvCnt : "") + (this.videoResendNotSendCnt ? " notSend=" + this.videoResendNotSendCnt : "") + (this.videoResendTooOldCnt ? " tooOld=" + this.videoResendTooOldCnt : "") + (this.videoResendUrgentSend ? " urgent=" + this.videoResendUrgentSend : "") + (this.videoResendLargeDelay ? " largeDelay=" + this.videoResendLargeDelay : "") + (this.videoResendFailedAck ? " failedAck=" + this.videoResendFailedAck : "")
              }
          }, {
              key: "onStat",
              value: function(e, t) {
                  var i = ""
                    , s = this.videoRecvDelayCnt ? this.videoRecvDelaySum / this.videoRecvDelayCnt : 0
                    , a = this.videoCapDelayCnt ? this.videoCapDelaySum / this.videoCapDelayCnt : 0;
                  return i += " jitter=" + (s = Math.round(s)) + "-" + (a = Math.round(a)) + " recv=" + this.recvVideoByteCnt + "-" + this.recvVideoPktCnt + "-" + this.recvVideoFrameCnt + " play=" + this.playVideoFrameCnt + (this.pauseVideoCnt ? " pause=" + this.pauseVideoTime + "-" + this.pauseVideoCnt : "") + (e && this.pauseVideoCnt5 ? " pause5=" + this.pauseVideoTime5 + "-" + this.pauseVideoCnt5 : "") + (this.skipVideoFrameCnt || this.skipVideoPauseTime ? " skip=" + this.skipVideoFrameCnt + "-" + this.skipVideoPauseTime + "-" + this.skipVideoPauseCnt : "") + (e && this.skipVideoPauseTime5 ? " skip5=" + this.skipVideoPauseTime5 + "-" + this.skipVideoPauseCnt5 : "") + (this.sensePauseCnt ? " sense=" + this.sensePauseTime + "-" + this.sensePauseCnt : "") + (e && this.sensePauseCnt5 ? " sense5=" + this.sensePauseTime5 + "-" + this.sensePauseCnt5 : ""),
                  this.reset(e || 0 === t),
                  i
              }
          }, {
              key: "onPlayStat",
              value: function(e, t, i) {
                  var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                    , a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0
                    , n = l.default.now()
                    , r = this.player.getPlayTime()
                    , o = this.player.lastPlayTs;
                  if (this.playVideoFrameCnt++,
                  this.playVideoFrameCnt5++,
                  !e.isFastAccess) {
                      var h = this.player.calcRecvToPlayDelay(n, e.recvTs);
                      h > 0 && h < 25e3 && e.dts > o && (this.videoRecvDelaySum += h,
                      this.videoRecvDelayCnt++);
                      var f = this.player.calcCapToPlayDelay(n, e.dts);
                      f > 0 && f < 25e3 && e.dts > o && (this.videoCapDelaySum += f,
                      this.videoCapDelayCnt++)
                  }
                  var c = 0;
                  if (e.dts <= o && 0 !== this.lastPlayVideoOsTs && e.dts - this.player.firstTs < r) {
                      var p = e.dts - this.lastPlayVideoTs
                        , v = t - this.lastPlayVideoOsTs;
                      (c = v > p ? v - p : 0) <= 200 ? c = 0 : (this.pauseVideoTime += c,
                      this.pauseVideoCnt++,
                      this.pauseVideoTime5 += c,
                      this.pauseVideoCnt5++)
                  }
                  var y = 0;
                  if (a > 0 && 0 !== this.lastPlayVideoTs && ((y = e.dts - this.lastPlayVideoTs) <= 200 ? y = 0 : (this.skipVideoPauseTime += y,
                  this.skipVideoPauseCnt++,
                  this.skipVideoPauseTime5 += y,
                  this.skipVideoPauseCnt5++)),
                  (c > 0 || y > 0) && this.pauseReason === d.default.VPR_NORMAL) {
                      var m = this.getVideoPauseReason(a, e, s, i);
                      d.default.isValid(m) ? this.pauseReason = m : (u.default.error("VideoPlayStat.onPlayStat invalid pause reson:" + m),
                      this.pauseReason = d.default.VPR_UNKNOWN)
                  }
                  this.lastPlayVideoTs = e.dts,
                  this.lastPlayVideoOsTs = t
              }
          }, {
              key: "getVideoPauseReason",
              value: function(e, t, i, s) {
                  if (r.default.videoLink.getVideoConnectedDuration() < 1e4)
                      return d.default.VPR_LINKCLOSEDRECENTLY;
                  if (r.default.downlinkRTOCalculator.GetSmoothRtt() >= 2e3)
                      return d.default.VPR_LARGERTT;
                  if (e <= 0)
                      return this.judgeLateReason(t);
                  var a = 0;
                  if (null === i)
                      return d.default.VPR_UNKNOWN;
                  for (var n = i.prev, l = null; ; ) {
                      if (null === n || n === i) {
                          n = null;
                          break
                      }
                      if ((l = n.data).key === s + 1)
                          break;
                      n = n.prev
                  }
                  var h = this.player.lastPlayVideoSeq;
                  if (null === n)
                      a = h + 2;
                  else {
                      if (l.isFull)
                          return u.default.error("VideoPlayStat.getVideoPauseReason error, earliestFrame.isFull === true"),
                          d.default.VPR_UNKNOWN;
                      if (l.hasFirst) {
                          if (a = l.getFirstNotRecvSeq(),
                          o.default.isUintMax(a))
                              return u.default.error("VideoPlayStat.getVideoPauseReason error, destinationSeq error"),
                              d.default.VPR_UNKNOWN
                      } else
                          a = h + 2
                  }
                  return this.judgeNotRecvReason(a)
              }
          }, {
              key: "judgeLateReason",
              value: function(e) {
                  var t = e.getLatestPacket();
                  return t.isDownlinkResend ? d.default.VPR_RESENDRECVLATE : t.isUplinkResend ? d.default.VPR_UPLINKRESENDLATE : 0 !== t.peerUid ? d.default.VPR_P2PLATE : d.default.VPR_DOWNLINKLATE
              }
          }, {
              key: "judgeNotRecvReason",
              value: function(e) {
                  var t = this.player.videoResender.seqStatus;
                  return t.IsServerLost(e) ? d.default.VPR_SERVERLOST : t.IsServerRejected(e) ? d.default.VPR_SERVERREJECT : t.IsResendSended(e) ? d.default.VPR_RESENDNOTRECV : d.default.VPR_NOTRESEND
              }
          }]),
          e
      }();
      t.default = h
  }
  , function(e, t, i) {
      Object.defineProperty(t, "__esModule", {
          value: !0
      }),
      t.default = {
          VPR_NORMAL: 0,
          VPR_SERVERLOST: 1,
          VPR_SERVERREJECT: 2,
          VPR_NOTRESEND: 3,
          VPR_RESENDNOTRECV: 4,
          VPR_DOWNLINKLATE: 5,
          VPR_UPLINKRESENDLATE: 6,
          VPR_RESENDRECVLATE: 7,
          VPR_P2PLATE: 8,
          VPR_LINKCLOSEDRECENTLY: 9,
          VPR_LARGERTT: 10,
          VPR_UNKNOWN: 100,
          isValid: function(e) {
              return e >= 0 && e <= 10 || 100 === e
          }
      }
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(20))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(17))
        , u = s(i(4))
        , l = (s(i(6)),
      s(i(39)));
      s(i(110)),
      s(i(34)),
      s(i(43));
      var d = function() {
          function e(t, i) {
              (0,
              n.default)(this, e),
              this.hyPlayer = t,
              this.huyaMgr = i,
              this.info = null,
              this.addListener()
          }
          return (0,
          r.default)(e, [{
              key: "addListener",
              value: function() {
                  l.default.addListener("8102", this._livingStreamInfoNotice.bind(this)),
                  l.default.addListener("8103", this._livingStreamEndNotice.bind(this)),
                  l.default.addListener("getLivingStreamInfo", this._onGetLivingStreamInfo.bind(this)),
                  l.default.addListener(l.default.WEBSOCKET_CONNECTED, this.onWebsocketConnected.bind(this))
              }
          }, {
              key: "onWebsocketConnected",
              value: function() {
                  o.default.proxyLink.connected && this.info && (this.getLivingStreamInfo(this.info),
                  this.info = null)
              }
          }, {
              key: "getLivingStreamInfo",
              value: function(e) {
                  if ((0,
                  a.default)(o.default, e),
                  o.default.proxyLink.connected) {
                      var t = e.sid
                        , i = e.subSid || e.subsid
                        , s = e.presenterUid || e.pid
                        , n = new HUYA.GetLivingStreamInfoReq;
                      n.tId = o.default.proxyLink.getUserId(),
                      0 == n.tId.lUid && (n.tId.lUid = o.default.getUid()),
                      s ? n.lPresenterUid = Number(s) : (n.lTopSid = Number(t),
                      n.lSubSid = Number(i)),
                      o.default.sendWup("liveui", "getLivingStreamInfo", n)
                  } else
                      this.info = e
              }
          }, {
              key: "_onGetLivingStreamInfo",
              value: function(e) {
                  e && e.bIsLiving ? this._livingStreamInfoNotice(e.tNotice) : u.default.log("GetLivingStreamInfoReq xxxxxxx no living")
              }
          }, {
              key: "_livingStreamInfoNotice",
              value: function(e) {
                  var t = !1
                    , i = e.mStreamInfo.value;
                  for (var s in i) {
                      var a = i[s]
                        , n = a.iLiveScenarioType;
                      if (1 == n) {
                          var r = 0;
                          1 == n ? r = 5 : 3 == n && (r = 6);
                          var l = a.vStreamInfo.value;
                          for (var d in l) {
                              var h = {
                                  serviceType: r
                              }
                                , f = l[d];
                              4 == f.iLineIndex && f.lPresenterUid != e.lPresenterUid && (h.streamName = f.sStreamName,
                              h.presenterUid = f.lPresenterUid,
                              h.subSid = f.lSubChannelId,
                              o.default.audioMgr.startVoice(h),
                              t = !0)
                          }
                      }
                  }
                  0 == t && u.default.info("No pure audio stream.")
              }
          }, {
              key: "_livingStreamEndNotice",
              value: function(e) {
                  o.default.audioMgr.stopVoice(e.sStreamName)
              }
          }]),
          e
      }();
      t.default = d
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(7))
        , n = s(i(0))
        , r = s(i(1))
        , o = s(i(17))
        , u = s(i(12))
        , l = s(i(4))
        , d = (s(i(8)),
      s(i(10)),
      s(i(6)),
      s(i(82)),
      s(i(39)));
      s(i(110)),
      s(i(34)),
      s(i(43));
      var h = window.AudioContext || window.webkitAudioContext
        , f = null
        , c = function() {
          function e(t, i) {
              (0,
              n.default)(this, e),
              this.hyPlayer = t,
              this.huyaMgr = i,
              this.voiceMap = new a.default,
              this.posMap = {},
              this.masterUid = 0,
              this.masterSpeak = !1,
              this.masterStreamName = null,
              this._liveMeetingNoticeBind = this._liveMeetingNotice.bind(this),
              this.hyPlayer.on(u.default.UPDATE_INTERSITY, this.setSoundIntensity.bind(this))
          }
          return (0,
          r.default)(e, [{
              key: "reset",
              value: function() {
                  l.default.log("LiveMeetingMgr.reset"),
                  this.huyaMgr.stop(),
                  this.voiceMap.clear(),
                  this.posMap = {},
                  this.masterUid = 0,
                  this.masterSpeak = !1,
                  this.masterStreamName = null
              }
          }, {
              key: "start",
              value: function(e, t, i) {
                  l.default.log("LiveMeetingMgr.start", e, t, i),
                  o.default.isLiveMeeting = !0,
                  o.default.presenterUid = e || 0,
                  o.default.sid = t || 0,
                  o.default.subSid = i || 0,
                  d.default.addListener("1025601", this._liveMeetingNoticeBind)
              }
          }, {
              key: "stop",
              value: function() {
                  l.default.log("LiveMeetingMgr.stop"),
                  this.reset(),
                  d.default.removeListener("1025601", this._liveMeetingNoticeBind)
              }
          }, {
              key: "_liveMeetingNotice",
              value: function(e) {
                  var t = this;
                  if (!(this.lastLiveMeetingVer && this.lastLiveMeetingVer > e.iVersion))
                      if (this.lastLiveMeetingVer = e.iVersion,
                      1 == e.tStat.iState) {
                          var i = this.masterSpeak
                            , s = this.masterStreamName;
                          this.masterUid = e.tStat.lPresenterUid,
                          this.masterSpeak = 0 == e.tStat.iSilence,
                          this.masterStreamName = e.tStat.mpContext.get("stream_name"),
                          this.posMap[this.masterUid] = 0,
                          this.masterStreamName == s ? this.masterSpeak != i && (this.masterSpeak ? o.default.audioMgr.startVoice({
                              streamName: this.masterStreamName,
                              subSid: o.default.subSid,
                              presenterUid: this.masterUid
                          }) : o.default.audioMgr.stopVoice(s)) : (s && o.default.audioMgr.stopVoice(s),
                          this.masterSpeak && o.default.audioMgr.startVoice({
                              streamName: this.masterStreamName,
                              subSid: o.default.subSid,
                              presenterUid: this.masterUid
                          })),
                          e.vSeats.value.forEach(function(e) {
                              t.posMap[e.lUid] = e.iPos;
                              var i = t.voiceMap.get(e.iPos)
                                , s = !1
                                , a = null;
                              i && (s = i.iMute + i.iSilence == 0,
                              a = i.mpContext.get("stream_name"));
                              var n = e.mpContext.get("stream_name");
                              if (n) {
                                  t.voiceMap.set(e.iPos, e);
                                  var r = e.iMute + e.iSilence == 0;
                                  n == a ? r != s && (r ? o.default.audioMgr.startVoice({
                                      streamName: n,
                                      subSid: o.default.subSid,
                                      presenterUid: e.lUid
                                  }) : o.default.audioMgr.stopVoice(a)) : (a && o.default.audioMgr.stopVoice(a),
                                  r && o.default.audioMgr.startVoice({
                                      streamName: n,
                                      subSid: o.default.subSid,
                                      presenterUid: e.lUid
                                  }))
                              } else
                                  a && o.default.audioMgr.stopVoice(a),
                                  t.voiceMap.delete(e.iPos)
                          })
                      } else
                          this.reset()
              }
          }, {
              key: "setSoundIntensity",
              value: function(e, t) {
                  var i = "";
                  if (t.intensity && parseInt(t.intensity) > 10) {
                      var s = this.posMap[t.uid];
                      i = "@@@@@@@ speaking intensity=" + t.intensity + " uid=" + t.uid,
                      this.hyPlayer.trigger(u.default.AUDIO_SOUND, {
                          uid: t.uid,
                          pos: s
                      })
                  } else
                      i = "@@@@@@@ speaking sound small intensity=" + t.intensity + " uid=" + t.uid;
                  1 === Number(localStorage._printScriptVoice) && l.default.debug(i)
              }
          }, {
              key: "detectSound",
              value: function(e) {
                  var t = this;
                  this._detectSound(e, function(e) {
                      var i = e.uid
                        , s = t.posMap[i];
                      t.hyPlayer.trigger(u.default.AUDIO_SOUND, {
                          uid: i,
                          pos: s
                      })
                  })
              }
          }, {
              key: "_detectSound",
              value: function(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function(e) {}
                    , i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : function(e) {}
                    , s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 200
                    , a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : -40;
                  f || (f = new h);
                  var n = f.createAnalyser();
                  f.createMediaElementSource(e).connect(n),
                  n.connect(f.destination),
                  n.minDecibels = a;
                  var r = new Uint8Array(n.frequencyBinCount)
                    , o = performance.now()
                    , u = !1;
                  !function a(l) {
                      e.error || requestAnimationFrame(a),
                      n.getByteFrequencyData(r),
                      r.some(function(e) {
                          return e
                      }) && (u && (u = !1,
                      t(e)),
                      o = l),
                      !u && l - o > s && (i(e),
                      u = !0)
                  }(o)
              }
          }]),
          e
      }();
      t.default = c
  }
  , function(e, t, i) {
      function s(e) {
          return e && e.__esModule ? e : {
              default: e
          }
      }
      Object.defineProperty(t, "__esModule", {
          value: !0
      });
      var a = s(i(16))
        , n = s(i(20))
        , r = s(i(7))
        , o = s(i(0))
        , u = s(i(1))
        , l = s(i(13))
        , d = function() {
          function e() {
              (0,
              o.default)(this, e),
              this.comDim = new r.default,
              this.coreDim = new r.default,
              this.actDim = new r.default,
              this.extDim = new r.default,
              this.coreMap = new r.default,
              this.compMap = new r.default,
              this.heart_type = l.default.HEART_TYPE.START
          }
          return (0,
          u.default)(e, [{
              key: "reset",
              value: function() {
                  this.comDim.clear(),
                  this.coreDim.clear(),
                  this.actDim.clear(),
                  this.extDim.clear(),
                  this.coreMap.clear(),
                  this.compMap.clear(),
                  this.heart_type = l.default.HEART_TYPE.START
              }
          }, {
              key: "createAct",
              value: function(e, t) {
                  return this._createAct(e, t)
              }
          }, {
              key: "createActs",
              value: function(e) {
                  var t = [];
                  if (e)
                      for (var i = 0; i < e.length; i++) {
                          var s = e[i]
                            , a = this._createAct(s.type, s.params);
                          t.push(a)
                      }
                  return t
              }
          }, {
              key: "_createAct",
              value: function(e, t) {
                  var i = {
                      sMetricName: l.default.ACT.name,
                      vField: {},
                      vDimension: {}
                  };
                  if (i.vDimension[l.default.ACT.field] = e,
                  this._fillFromMap(i.vDimension, this.comDim),
                  this._fillFromMap(i.vDimension, this.actDim),
                  t) {
                      var s = 0;
                      if (t.hasOwnProperty(l.default.KEY_VALUE)) {
                          var a = t[l.default.KEY_VALUE];
                          for (s = 0; s < a.length; s++)
                              i.vField[l.default.KEY_VALUE + (s + 1)] = a[s]
                      }
                      if (t.hasOwnProperty(l.default.KEY_STR)) {
                          var r = t[l.default.KEY_STR];
                          for (s = 0; s < r.length; s++)
                              i.vDimension[l.default.KEY_STR + (s + 1)] = r[s]
                      }
                      t.hasOwnProperty(l.default.KEY_DIM) && (0,
                      n.default)(i.vDimension, t[l.default.KEY_DIM])
                  }
                  return this.actDim.clear(),
                  i
              }
          }, {
              key: "fill",
              value: function(e, t) {
                  t ? (this.heart_type = l.default.HEART_TYPE.END,
                  this._fill(e)) : this._fill(e)
              }
          }, {
              key: "_fill",
              value: function(e) {
                  if (0 != this.coreMap.size || 0 != this.compMap.size) {
                      var t = {
                          sMetricName: l.default.CORE.name,
                          vField: {},
                          vDimension: {},
                          vExLog: {}
                      };
                      this.coreDim.set(l.default.DIM_CORE.HEART_TYPE, this.heart_type),
                      this._fillFromMap(t.vDimension, this.comDim),
                      this._fillFromMap(t.vDimension, this.coreDim),
                      this._fillFromMap(t.vExLog, this.extDim),
                      this._fillFromMap(t.vField, this.coreMap),
                      this._fillComp(t.vDimension),
                      this.coreDim.clear(),
                      this.extDim.clear(),
                      this.coreMap.clear(),
                      this.compMap.clear(),
                      this.heart_type == l.default.HEART_TYPE.START && (this.heart_type = l.default.HEART_TYPE.CONTINUS),
                      e.push(t)
                  }
              }
          }, {
              key: "_fillComp",
              value: function(e) {
                  var t = !0
                    , i = !1
                    , s = void 0;
                  try {
                      for (var n, r = (0,
                      a.default)(this.compMap.keys()); !(t = (n = r.next()).done); t = !0) {
                          var o = n.value
                            , u = this.compMap.get(o)
                            , l = ""
                            , d = !0
                            , h = !1
                            , f = void 0;
                          try {
                              for (var c, p = (0,
                              a.default)(u.keys()); !(d = (c = p.next()).done); d = !0) {
                                  var v = c.value;
                                  l.length > 0 && (l += ";"),
                                  l += v + "," + u.get(v)
                              }
                          } catch (e) {
                              h = !0,
                              f = e
                          } finally {
                              try {
                                  !d && p.return && p.return()
                              } finally {
                                  if (h)
                                      throw f
                              }
                          }
                          e[o] = l
                      }
                  } catch (e) {
                      i = !0,
                      s = e
                  } finally {
                      try {
                          !t && r.return && r.return()
                      } finally {
                          if (i)
                              throw s
                      }
                  }
              }
          }, {
              key: "_fillFromMap",
              value: function(e, t) {
                  var i = !0
                    , s = !1
                    , n = void 0;
                  try {
                      for (var r, o = (0,
                      a.default)(t.keys()); !(i = (r = o.next()).done); i = !0) {
                          var u = r.value;
                          e[u] = t.get(u)
                      }
                  } catch (e) {
                      s = !0,
                      n = e
                  } finally {
                      try {
                          !i && o.return && o.return()
                      } finally {
                          if (s)
                              throw n
                      }
                  }
              }
          }, {
              key: "setComDim",
              value: function(e, t) {
                  this.comDim.set(e, t)
              }
          }, {
              key: "setCoreDim",
              value: function(e, t) {
                  this.coreDim.set(e, t)
              }
          }, {
              key: "setActDim",
              value: function(e, t) {
                  this.actDim.set(e, t)
              }
          }, {
              key: "setExtDim",
              value: function(e, t) {
                  this.extDim.set(e, t)
              }
          }, {
              key: "delDim",
              value: function(e) {
                  this.comDim.has(e) ? this.comDim.delete(e) : this.coreDim.has(e) ? this.coreDim.delete(e) : this.actDim.has(e) && this.actDim.delete(e)
              }
          }, {
              key: "setCore",
              value: function(e, t) {
                  this.coreMap.set(e, t)
              }
          }, {
              key: "addCore",
              value: function(e, t) {
                  this._addValue(this.coreMap, e, t)
              }
          }, {
              key: "setComp",
              value: function(e, t, i) {
                  this._getCompMap(e).set(t, i)
              }
          }, {
              key: "addComp",
              value: function(e, t, i) {
                  var s = this._getCompMap(e);
                  this._addValue(s, t, i)
              }
          }, {
              key: "_getCompMap",
              value: function(e) {
                  if (this.compMap.has(e))
                      return this.compMap.get(e);
                  var t = new r.default;
                  return this.compMap.set(e, t),
                  t
              }
          }, {
              key: "_addValue",
              value: function(e, t, i) {
                  if (e.has(t)) {
                      var s = e.get(t);
                      e.set(t, s + i)
                  } else
                      e.set(t, i)
              }
          }]),
          e
      }();
      t.default = d
  }
  ])
}
, function(e, t) {
  e.exports = "<div class=player-wrap id=player-wrap> <div class=player-video id=player-video> <img id=hy-video-capture> <div id=hy-watermark class=hy-watermark-normal>虎牙直播</div> <div id=player-replayicon> </div> <div class=qr-code> <div class=qr-code-close></div> <div class=qr-code-icon></div> <p>用虎牙APP 为主播点赞</p> </div> <div id=danmuwrap> <div id=danmudiv></div> <div id=danmudiv2></div> </div> <div class=player-common-toast> </div> </div> <div class=player-loading id=player-loading> <div class=player-loading-content> <div class=player-loading-logo></div> <div class=player-loading-progress alt=进度条></div> <div class=player-loading-changeline> <p>目前网络有点卡，试试下面的方法吧</p> <p>推荐去PC端观看，占用更少CPU、更流畅</p> <div class=change-line-g> <div id=change-line-btn>切换线路</div> <div id=download-pc-btn>去PC端看<i></i></div> </div> </div> </div> </div> <div id=player-nobel-open> </div> <div id=player-resource-wrap></div> <div id=player-left-head> <div id=player-check-room> <ul></ul> </div> <div id=player-link-mic> <ul></ul> </div> <div id=player-multi-pk> <ul></ul> </div> </div> <div id=player-pay-room-wrap> </div> <div class=play-list-btn id=play-list-btn> <i></i> <span></span> </div> </div> <div id=huya-ab></div> <div class=player-ctrl-wrap id=player-ctrl-wrap></div> <div class=player-guess-wrap id=player-guess-wrap></div> <div class=player-gift-wrap id=player-gift-wrap> <div class=player-gift-left> <div class=player-chest> <div class=player-chest-btn> <div class=player-chest-bg id=player-chest-btn> <div class=box-icon-word> <p></p> </div> <div class=player-chest-cd> 30:00 </div> <div class=chest-award-count></div> </div> </div> <p class=player-chest-tip> <i class=chest-stat-2><i class=chest-type-2></i></i> <i class=chest-stat-3><i class=chest-type-3></i></i> <i class=chest-stat-4></i> <span></span> </p> <p class=player-chest-login> <i></i><span></span> </p> <p class=player-chest-levelup> <i class=chest-levelup-close></i><span></span> <i class=chest-type-levelup></i> </p> </div> <div class=guess-icon> <div class=guess-box> <i></i> <div class=guess-icon-word> <p>玩竞猜</p> </div> </div> </div> <div class=tv-icon> <div class=tv-box> <i></i> <div class=tv-icon-word> <p></p> </div> <div class=tv-tips> </div> </div> </div> <div class=ship-icon> <div class=ship-box> <div class=ship-circle> <div class=ship-circle-gray> </div> <div class=ship-wrapper-right> <div class=ship-progress-right> </div> </div> <div class=ship-wrapper-left> <div class=ship-progress-left /> </div> </div> </div> <i id=ship-phase class=ship-phase0></i> <div class=ship-icon-word> <p>0票</p> </div> <div class=ship-tips> </div> </div> <div class=qa-icon> <div class=qa-box> <i></i> <div class=qa-word> <p></p> </div> </div> </div> <div class=danmu-question-icon> <div class=danmu-question-box> <i></i> <div class=danmu-question-word> <p>我问你答</p> </div> </div> </div> </div> <ul class=player-gift-right> <li id=player-punch-btn> <i></i> <p>首充礼包</p> </li> <li id=player-recharge-btn> <div id=player-recharge-click> <i></i> <div id=recharge-discount-icon></div> <div class=recharge-btn id=recharge-btn></div> <p>充值</p> </div> <div class=player-recharge-tip> <span class=recharge-now-btn>立即充值</span> </div> </li> <li id=player-noble-btn> <i></i> <p>贵族</p> </li> </ul> <div class=player-face id=player-face></div> <div id=week-star-btn class=week-star-0 title=礼物周星榜></div> </div> <div id=player-marquee-wrap class=player-marquee-wrap></div> <div id=player-pc-watch-btn><i></i><span>小窗播放</span></div> <div id=player-danmu-report> <i></i><em id=player-danmu-copy>复制</em><span></span> </div> <div id=danmu-copy-tips></div> <div id=hy-ad> <div id=adContainer> </div> <div class=ads-details> <p>了解详情</p><i></i></div> <div class=adsCountdown> <p></p> </div> </div> <div id=player-fullpage-right-btn></div> <div id=pc-watch-download-tips><span></span></div> "
}
]);
